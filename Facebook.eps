%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: Facebook.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: feast5
%%CreationDate: 25/01/10
%%BoundingBox: 0 0 289 288
%%HiResBoundingBox: 0 0 288.0508 288
%%CropBox: 0 0 288.0508 288
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 28790 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD06FFA9532F062906290629062F0629062F0629062F0629062F06%29062F0629062F0629062F062F062F062F062F062F062F062F062F062F06%2F282F062F282F062F062F062F062F062F062F062F062F062F062F062F06%29062F0629062F0629062F0629062F0629062F0629062F06290629062906%7DA8FD0AFFA853FD07062806060629060606290606062906280629062806%290628062906280629062806290628062906280629062906290628062906%290629062906290628062906280629062806290628062906280629062806%29062806290628062906060629060606290606062906060628060601282F%FD08FFA8290629062906290629062906290629062906290629062F062906%2F0629062F0629062F0629062F0629062F0629062F2829062F0629062F06%29062F0629062F0629062F0629062F0629062F2829062F0629062F062906%2F0629062F0629062F0629062F0629062906290629062906290629062906%29062806A8FD05FF7EFD0C06280606062806060628060606280606062906%280629062806290628062906280629062806290628062906280629062806%290628062906280629062806290628062906280629062806290628062906%2806290628062906060628060606280606062806060628FD0906A8FFFFFF%A829062906290629062F0629062F0629062F0629062F0629062F062F062F%062F062F062F062F282F062F282F062F282F062F282F062F282F062F282F%062F282F062F282F062F282F062F282F062F282F062F282F062F282F062F%282F062F062F062F062F062F0629062F0629062F0629062F0629062F0629%0629062806FFFFFF53012806060628060606290606062906060629062806%290628062906280629062806290629062906290629062906290629062906%2906290629062F0629062F0629062F0629062F0629062F06290629062906%290629062906290629062806290606062906280629062806290628062906%0606290606062906060628060628FFA80606062906290629062906290629%062F0629062F0629062F0629062F0629062F2829062F0629062F282F062F%282F062F282F062F282F062F282F062F282F062F282F062F282F062F282F%062F282F062F282F062F282906070607062F0629062F0629062906070629%060706290629062F06290629062906290629062906287E2EFD0C06280606%062806060629062806290628062906280629062806290628062906290629%062906290629062906290629062906290629062906290629062906290629%06290629062906280607062F537E7DA87EA87EA87EA87E7E7D7E537D5353%292F0629FD07062806060628FD050653290629062F0629062F0629062F06%29062F0629062F062F062F062F062F282F062F282F062F282F062F282F06%2F282F282F282F282F282F282F282F282F282F282F282F282F282F282F28%2F282F282F282F280706537EFD17FFA8A87D7E2F2F062F0629062F062906%2F0629060628060606290606062906280629062806290628062906280629%06290629062906290629062F0629062F0629062F0629062F0629062F0629%062F0629062F0629062F0629062F0629062F0629062F0629062953A9FD1E%FFA853062906060629060606290606290629062906290629062F0629062F%0629062F0629062F2829062F062F062F282F062F282F062F282F062F282F%062F282F062F282F062F282F062F282F062F282F062F282F062F282F062F%282F062F0653A8FD21FF5306062F0629062906290629FD04062806060628%060606280606062906280629062806290628062906290629062906290629%062906290629062906290629062F0629062F0629062F0629062F0629062F%0629062F0629062F0629067EFD23FF530606062806060628060606282906%2F0629062F0629062F062F062F062F062F282F062F282F062F282F062F28%2F062F282F282F282F282F292F282F292F282F292F282F292F282F292F28%2F292F282F292F282F292F282F292F06A8FD24FF2829062F0629062F0629%062FFD04062906280629062806290628062906280629062906290629062F%0629062F0629062F0629062F0629062F0629062F2829062F2829062F2829%062F2829062F2829062F2829062F2829062F06A8FD24FFA8290628062906%28062906060629290629062F0629062F0629062F0629062F2829062F282F%062F282F062F282F062F282F062F282F062F282F282F292F282F292F282F%292F282F292F282F292F282F292F282F292F282F292F0684FD25FFA8062F%0629062F0629062F06290606280606062806060629062806290628062906%2806290629062906290629062906290629062F0629062F0629062F062906%2F0629062F2829062F2829062F2829062F2829062F2829062F067DFD26FF%53060629062806290606062806062F0629062F062F062F062F062F282F06%2F282F062F282F062F282F282F292F282F292F282F292F282F292F282F29%2F282F292F282F292F282F292F282F292F282F292F282F292F282F0753FD%27FF7E062F282F062F062F062F0629060629062806290628062906290629%062906290629062F0629062F0629062F0629062F2829062F2829062F2829%062F282F062F282F062F282F062F282F062F282F062F282F282F282F062F%A8FD27FF290606290628062906280629062829062F0629062F0629062F06%29062F282F062F282F062F282F062F282F282F282F282F292F282F292F28%2F292F282F292F282F292F282F292F282F292F282F292F282F292F282F29%2F53FD28FF2F062F062F2829062F0629062FFD0406290628062906280629%0628062906290629062906290629062F0629062F0629062F0629062F2829%062F282F062F282F062F282F062F282F062F282F062F282F062F282F062F%06A8FD27FFA8062906280629062806290628062929062F062F062F282F06%2F282F062F282F282F282F282F292F282F292F282F292F282F292F282F29%2F292F292F292F292F292F292F292F292F292F292F292F292F292F292F29%2F2953FD28FF7E2F282F062F282F062F282F062F06062806290628062906%2906290629062F0629062F0629062F0629062F2829062F282F062F282F06%2F282F282F282F282F282F282F282F282F282F282F282F282F282F282F28%2F282F53FD28FF7E062F0629062906290629062806292F0629062F282906%2F282F062F282F062F282F062F282F282F292F282F292F282F292F282F29%2F282F292F282F292F282F292F292F292F292F292F292F292F292F292F29%2F292F06A8FD28FF5307062F282F062F2829062F28290606290628062906%28062906290629062906290629062F0629062F0629062F2829062F282F06%2F282F062F282F062F282F282F282F282F282F282F282F282F282F282F28%2F282F282FA8FD28FF5306290629062906290628062906282F282F062F28%2F062F282F282F282F282F292F282F292F282F292F282F292F292F292F29%2F292F292F292F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F2F%2F29FD042FFD29FF292F282F282F062F282F062F282F0606290629062906%29062F0629062F0629062F0629062F2829062F282F062F282F282F282F28%2F282F282F282F282F282F282F282F282F292F282F292F282F292F282F29%2F282F0653FD1CFFA8FFA8A9A8FD07FFA82F0629062F0629062F06290629%062929062F282F062F282F062F282F062F282F282F292F282F292F282F29%2F282F292F282F292F282F292F292F292F292F2F2F292F2F2F292F2F2F29%2F2F2F292F2F2F292F2F2F292F53FD19FFA87E532F282F292F2853537E7E%FFFFA8062F282F062F282F062F282F062F06062806290629062906290629%0629062F0629062F0629062F062F062F282F062F282F062F282F282F282F%282F282F282F282F282F282F282F282F282F282F282F282F282F282F067E%FD18FF5329062F0629062F06290629060706532929062F06290629062906%29062906292F062F282F062F282F282F292F282F292F282F292F282F292F%292F292F292F292F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F2953%2F2F2F532F2F29532F2F2F532F2F292F7EFD17FF532F292F292F292F292F%292F292F282F292F282F292F282F292F282F282F062F280629062F062906%2F0629062F0629062F2829062F282F062F282F282F282F282F282F282F28%2F282F292F282F292F282F292F282F292F282F292F282F292F282F292F28%2F292F067EFD16FF7E2F282F282F282F282F282F282F282F062F2829062F%2829062F0629062F062906292F282F062F282F062F282F282F292F282F29%2F282F292F282F292F282F292F292F292F292F2F2F292F2F2F292F2F2F29%2F2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F7EFD16FF53062F%292F292F292F282F292F282F292F282F292F282F292F282F282F062F282F%060629062906290629062F0629062F0629062F062F062F282F062F282F28%2F282F282F282F282F282F282F282F282F282F282F292F282F292F282F29%2F282F292F282F292F282F06A8FD16FF292F282F282F282F282F062F282F%062F2829062F2829062F0629062F0629062906292F282F282F292F282F29%2F282F292F282F292F292F292F292F292F292F2F2F292F2F2F292F2F2F29%532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F%2F7EFD16FF53292F2F2F292F2F2F292F292F292F292F292F292F282F292F%282F292F282F282F28062F0629062F0629062F2829062F282F062F282F28%2F282F282F282F282F292F282F292F282F292F282F292F282F292F292F29%2F292F292F292F292F292F292F292F292F292F29A8FD16FF292F282F292F%282F282F282F282F282F282F062F282F062F2829062F0629062F06292F06%2F282F062F292F282F292F282F292F282F292F282F292F292F292F292F2F%2F292F2F2F292F2F2F292F2F2F29FD042F532F2F2F532F2F2F532F2F2F53%2F2F2F53FD042F84FD16FF532F2F292F2F2F292F292F292F292F282F292F%282F292F282F292F282F282F062F280629062F0629062F0629062F282906%2F282F062F282F282F282F282F282F282F282F282F292F282F292F282F29%2F282F292F282F292F282F292F282F292F292F292F292F292F06A8FD16FF%282F282F282F282F282F282F282F282F062F282F062F2829062F0629062F%062906292F282F292F282F292F282F292F292F292F292F292F292F2F2F29%2F2F2F29FD042F532F2F2F532F2F2F532F2F2F532F2F2F532F532F532F53%2F532F532F532F532F532F532F2FA8FD16FF532F2F29532F2F292F2F2F29%2F2F2F292F292F292F292F282F292F282F292F282F290629062F2829062F%282F062F282F282F282F282F282F282F292F282F292F282F292F282F292F%292F292F292F292F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F%2F2F29A8FD16FF292F292F282F292F282F292F282F282F282F282F282F28%2F062F282F062F2829062F2F282F282F292F282F292F282F292F282F292F%292F292F292F2F2F292F2F2F292F2F2F29FD042F532F2F2F532F2F2F532F%2F2F532F2F2F532F2F2F532F2F2F532F2F2F532F2F7EFD16FF53292F2F2F%292F2F2F292F2F2F292F292F292F292F282F292F282F292F282F292F2806%2F0629062F2829062F282F062F282F282F282F282F282F282F282F282F29%2F282F292F282F292F282F292F292F292F292F292F292F292F292F2F2F29%2F2F2F292F2F2F292F29A8FD16FF2F2F282F292F282F282F282F282F282F%282F282F282F062F282F062F2829062F06292F292F282F292F282F292F29%2F292F292F2F2F292F2F2F29FD042F532F2F2F532F2F2F532F532F532F53%2F532F532F532F532F532F532F532F532F542F532F542F532F542F2F84FD%16FF532F532F2F2F532F2F2F532F2F292F2F2F292F2F2F292F292F292F29%2F282F292F28062F2829062F282F282F282F282F282F282F292F282F292F%282F292F282F292F292F292F292F2F2F292F2F2F292F2F2F292F2F2F29FD%042F532F2F2F532F2F2F532F2F2F532FA8FD16FF2F2F292F292F292F292F%282F292F282F292F282F282F282F282F282F282F062F28292F282F292F28%2F292F282F292F292F292F292F2F2F292F2F2F292F2F2F29532F2F2F532F%2F2F532F2F2F532F532F532F532F532F532F532F532F532F532F532F532F%532F532F2FA8FD16FF532F2F2F532F2F292F2F2F292F2F2F292F2F2F292F%292F282F292F282F292F282F290629062F2829062F282F062F282F282F28%2F282F282F282F292F282F292F282F292F292F292F292F292F292F2F2F29%2F2F2F292F2F2F292F2F2F292F2F2F292F2F2F292F2F2F29A8FD16FF292F%292F282F292F282F292F282F282F282F282F282F282F062F282F062F2829%062F2F282F292F292F292F292F2F2F292F2F2F29FD042F532F2F2F532F2F%2F532F532F532F532F532F532F542F532F542F532F542F532F542F532F54%FD0C2F84FD16FF532F2F292F2F2F292F292F292F292F072F072F292F2F2F%292F292F292F292F282F29282F062F282F282F282F282F282F282F292F28%2F292F282F292F292F292F292F2F2F292F2F2F29FD042F532F2F2F532F2F%2F532F2F2F532F2F2F7E7E7E597E7E7E597E7E7E59A9FD16FF597E597E59%7E597E537E597E537E597E537E532F282F282F282F282F282F282F062F2F%292F282F292F282F292F292F2F2F292F2F2F292F2F2F29532F2F2F532F2F%2F532F2F2F532F532F532F532F532F532F542F532F542F532F542F2FA8FD%35FF2F2F292F292F292F292F282F292F28062F282F062F282F282F282F28%2F282F282F282F282F292F282F292F292F292F292F2F2F292F2F2F292F2F%2F292F2F2F29532F2F2F532F2F2F532FA8FD34FFA82F282F282F282F282F%282F062F282F2F292F292F292F292F2F2F292F2F2F29532F2F2F532F2F2F%532F532F532F532F532F532F542F532F542F532F542F532F542F542F5A2F%542F5A2F2F84FD35FF2F2F292F2F2F292F2F2F292F292F29062F282F282F%282F282F292F282F292F282F292F292F292F292F2F2F292F2F2F29FD042F%532F2F2F532F2F2F532F2F2F532F2F2F532F532F532FA8FD34FFA82F292F%282F292F282F282F282F282F2F282F292F282F292F292F2F2F292F2F2F29%FD042F532F2F2F532F2F2F532F532F532F532F532F532F542F532F542F53%2F542F532F542F542F54A8FD34FFA9292F2F2F292F2F2F292F292F282F29%282F062F282F282F282F282F282F282F292F282F292F282F292F292F292F%292F2F2F292F2F2F29532F2F2F532F2F2F532F2F2F532F2F2F532F2F2FA8%FD34FF7E2F282F282F282F282F282F282F062F2F292F292F292F2F2F29FD%042F532F2F2F532F2F2F532F532F532F532F542F532F542F532F542F542F%5A2F542F5A2F542F5A2F542F5A2F542F54A8FD34FFA829532F2F292F2F2F%292F2F2F292F29282F282F282F282F292F282F292F282F292F292F2F2F29%2F2F2F29FD042F532F2F2F532F2F2F532F2F2F532F532F532F532F532F53%2F532F532FA9FD34FF7E2F282F292F282F292F282F282F282F2F292F292F%292F292F2F2F292F2F2F29532F2F2F532F2F2F532F532F532F532F532F53%2F542F532F542F532F542F542F5A2F542F5A2F542F5A2F2F84FD34FF7E29%2F292F2F2F292F2F2F292F292F29062F282F282F282F282F282F282F292F%282F292F292F292F292F2F2F292F2F2F29532F2F2F532F2F2F532F2F2F53%2F532F532F532F532F532F532FA8FD34FF532F292F282F292F282F282F28%2F28292F282F282F2F2F29FD042F532F2F2F532F532F532F532F532F532F%542F532F542F542F5A2F542F5A2F542F5A2F5A2F5A2F5A2F5A2F5A2F5A2F%54A8FD34FF7E2F2F2F532F2F2F532F2F292F292F28062F2829282F282F28%2F292F292F292F292F2F2F292F2F2F29532F2F2F532F2F2F532F2F2F532F%532F532F532F542F532F542F532F542F532F542FA8FD34FF532F292F292F%292F282F2829282F28292F282F282F282F292F28FD042F532F2F2F532F2F%2F532F532F532F532F542F532F542F532F542F542F5A2F542F5A2F542F5A%535A2F5A2F5A2F5AA8FD34FF5A29532F2F292F292F282F292F282F282829%062F2829062F2829282F282F282F292F292F2F2F292F2F2F29FD042F532F%2F2F532F2F2F532F532F532F532F532F532F542F532F542F532FA9FD34FF%2F2F282F282F282F2829282F2829062F2F282F292F282F292F292F292F29%532F2F2F532F532F542F532F542F532F5A2F542F5A2F542F5A2F5A2F5A2F%5A2F5A535A2F5A535A2F5A535A2F5AA8FD34FF532953292F292F292F282F%292F282F292829282F282F282F282F282F282F282F282F282F292F29532F%2F2F532F2F2F532F532F532F532F542F532F542F532F542F532F5A2F532F%5A2F542FA9FD34FF292F282F282F282F282F282F2829282F2F282F282F29%2F282F292F282F292F292F2F2F29532F2F29532F532F542F532F5A2F542F%5A2F542F5A2F5A2F5A535A2F5A535A2F5A535A2F5A535484FD33FFA82F29%2F292F292F282F292F282F292F28062F2829062F282F282F282F282F282F%282F282F282F292F282F292F282F292F29532F2F2F532F532F542F532F54%2F532F542F532F5A2F542F5A2F5A535A535A535A535A535A53A9FD16FF53%532F5353532F5353532F532F532F532F53282F282F282F282F282F282928%2F28292F292F282F292F292F292F29532F2F29532F2F29532F532F532F53%2F532F532F532F532F542F532F5A2F542F5A535A2F5A535A535A535A535A%535A2F5A535A2F5A535A2F5A2F5AA8FD16FF5329532F2F2F532F2F292F2F%2F292F2F2F29532F2F29532F2F292F292F282F292F28282F282F282F282F%282F282F282F292F282F292F282F292F292F292F292F2F2F29532F2F2953%2F2F2F532F2F2F532F532F542F532F542F532F5A2F532F5A2F542F5A2F54%2F5A2FA8FD16FF2F2F29532F2F292F292F292F292F282F292F282F292F28%2F282F282F282F282F28292F282F292F282F292F282F292F292F2F2F2953%2F2F29532F2F2F532F532F532F532F532F532F542F532F542F532F542F53%2F542F542F542F542F542F542F5A2F542F5A2F542F54A8FD16FF542F532F%532F532F532F2F29532F2F29532F2F292F2F2F292F292F282F292F282F29%2829062F282F282F282F282F282F282F282F282F292F282F292F282F292F%292F292F292F2F2F29532F2F2F532F2F2F532F532F532F532F532F532F53%2F532F532F532F532F5329A9FD16FFFD042F292F292F292F292F282F292F%282F282F282F282F282F282F282F2829282F2F282F292F292F292F29532F%2F29532F2F29532F532F532F532F532F532F532F532F542F532F542F542F%542F542F5A2F542F5A2F542F5A53542F5A535A2F5A535A2F5A535A2F54A8%FD16FF5A2F532F542F532F532F532F532F532F532F2F29532F2F29532F2F%292F292F282F29282F282F282F282F282F282F292F282F292F282F292F29%2F292F29532F2F29532F2F2F532F2F2F532F532F532F532F532F532F542F%532F542F532F542F532F542F532F542F532FA9FD16FF2F532F2F29532F2F%29532F2F292F292F292F292F282F292F282F282F282F282F282F2F292F28%2F292F282F292F292F2F2F29532F2F29532F2F2F532F532F532F532F532F%532F542F532F542F542F542F542F542F542F5A2F542F5A53542F5A53542F%5A53542F5A535484FD16FF532F532F532F532F532F532F2F2F532F2F2953%2F2F29532F2F292F292F282F292F28062F282F282F282F282F282F282F28%2F282F292F282F292F292F292F292F2F2F29532F2F29532F2F2F532F532F%532F532F532F532F542F532F542F532F542F532F542F532F542FA8FD16FF%2F2F29532F2F292F292F292F292F282F292F282F282F282F282F282F282F%282F28292F292F292F292F29532F2F29532F2F29532F532F532F532F532F%532F542F532F542F532F542F542F5A2F542F5A2F542F5A535A2F5A535A2F%5A535A2F5A535A2F5A535A2F5A5354A8FD16FF542F542F532F542F532F53%2F532F532F532F532F2F29532F2F29532F2F292F292F28282F282F282F28%2F282F292F282F292F282F292F292F292F29532F2F29532F2F2F532F532F%532F532F532F532F542F532F542F532F542F532F542F542F542F542F5A2F%542F542FA8FD16FF2F2F2F532F2F29532F2F29532F2F292F292F292F292F%282F292F282F282F282F282F2F282F292F282F292F292F2F2F29532F2F29%532F2F2F532F532F532F532F532F532F542F532F542F542F542F542F5A2F%542F5A53542F5A535A2F5A535A2F5A535A2F5A535A2F5AA8FD16FF5A2F53%2F542F532F532F532F532F532F532F2F29532F2F29532F2F292F292F282F%292829282F282F282F282F282F282F282F292F282F292F292F292F292F2F%2F29532F2F2F532F2F2F532F532F532F532F542F532F542F532F542F532F%542F542F542F542F542F532FA9FD16FFFD042F29532F2F292F292F292F29%2F282F292F282F282F282F282F282F282F282F2F282F292F29532F2F2953%2F2F29532F532F532F532F532F532F542F532F542F542F542F542F5A2F54%2F5A535A2F5A535A2F5A535A2F5A535A535A535A535A535A535A535A535A%A8FD16FF5A2F542F542F532F542F532F532F532F532F532F532F2F29532F%2F2953292F292F29282F282F282F282F292F282F292F282F292F292F292F%29532F2F29532F2F2F532F532F532F532F532F532F542F532F542F532F54%2F542F5A2F542F5A2F542F5A2F542F5A2F542FA9FD16FF2F532F2F2F532F%2F29532F2F29532F2F292F292F282F292F282F292F282F282F282F2F292F%282F292F292F2F2F29532F2F29532F2F2F532F532F532F532F532F532F54%2F532F542F542F5A2F542F5A53542F5A535A2F5A535A2F5A535A2F5A535A%2F5A535A2F5A5354A8FD16FF542F542F532F542F532F532F532F532F532F%532F2F29532F2F292F2F2F292F292F28282F282F282F282F282F282F282F%292F282F292F292F292F292F2F2F29532F2F2F532F532F532F532F532F53%2F542F532F542F542F542F542F5A2F542F5A2F542F5A2F542F5A2FA8FD16%FF2F2F2F532F2F29532F2F292F292F292F292F282F292F282F282F282F28%2F282F282F2F292F292F2F2F29532F2F29532F532F532F532F532F532F54%2F532F542F542F542F542F5A2F542F5A535A2F5A535A2F5A535A535A535A%535A545A535A545A535A545A535A545AA8FD16FF5A2F542F542F542F532F%542F532F532F532F532F532F532F2F29532F2F2953292F29282F282F282F%282F282F292F282F292F292F292F29532F2F29532F2F2F532F532F532F53%2F542F532F542F532F542F542F5A2F542F5A2F542F5A2F542F5A535A2F5A%53542F5A2FA9FD16FF2F2F2F532F2F2F532F2F29532F2F29532F2F292F29%2F282F292F282F292F282F282F2F282F292F292F2F2F29532F2F29532F2F%2F532F532F532F532F532F532F542F532F542F542F5A2F542F5A53542F5A%535A2F5A535A2F5A535A535A545A535A545A535A545A535AA8FD16FF5A2F%532F542F532F542F532F532F532F532F2F29532F2F29532F2F292F292F28%2F29282F282F282F282F282F282F292F282F292F282F292F292F2F2F2953%2F2F2F532F532F532F532F532F532F542F532F542F542F5A2F542F5A2F54%2F5A2F542F5A2F542F5A2F542FA9FD16FF2F532F2F2F532F2F29532F2F29%2F292F292F292F282F292F282F282F282F282F282F2F292F292F29532F2F%29532F532F532F532F532F532F542F532F542F532F542F542F5A2F542F5A%535A2F5A535A535A535A535A535A535A545A535A545A535A545A535A545A%535AA8FD16FF5A2F542F542F542F542F532F542F532F532F532F532F532F%532F2F29532F2F292F29282F282F282F282F292F282F292F292F292F2953%2F2F29532F2F2F532F532F532F532F542F532F542F532F542F542F5A2F54%2F5A2F542F5A535A2F5A535A2F5A535A2F5A53542FA9FD16FF2F532F532F%532F2F2F532F2F29532F2F292F292F292F292F282F292F282F282F282F2F%292F282F292F29532F2F29532F2F29532F532F532F532F532F532F542F53%2F542F542F5A2F542F5A535A2F5A535A2F5A535A535A545A535A545A535A%545A535A545A535A545AA8FD16FF542F542F532F542F532F532F532F532F%532F532F2F29532F2F29532F2F292F292F28282F282F282F282F282F282F%282F292F282F292F292F2F2F29532F2F29532F2F2F532F532F532F532F54%2F532F542F542F5A2F542F5A2F542F5A2F542F5A2F542F5A2F542F5A2FA9%FD16FF2F2F2F532F2F2F532F2F292F2F2F292F292F282F292F282F292F28%2F282F282F282F2F292F29532F2F29532F2F2F532F532F532F532F532F53%2F542F532F542F542F5A2F542F5A535A2F5A535A535A535A535A545A535A%545A535A545A535A545A535A545A535A545AA8FD16FF5A2F5A2F542F542F%532F542F532F532F532F532F532F532F5329532F2F29532F2F29282F282F%282F292F282F292F292F292F292F2F2F29532F2F2F532F2F2F532F532F53%2F532F542F532F542F542F5A2F542F5A535A2F5A535A2F5A535A2F5A535A%2F5A535A2F5A2FA9FD16FF2F532F532F532F532F2F2F532F2F29532F2F29%2F292F292F292F282F292F282F282F2F282F292F292F2F2F29532F2F2953%2F532F532F532F532F532F542F532F542F542F542F542F5A53542F5A535A%2F5A535A535A545A535A545A535A545A535A545A535A545A535AA8FD16FF%5A2F542F542F532F542F532F532F532F532F532F532F2F29532F2F292F2F%2F292F29282F282F282F282F282F282F292F282F292F292F292F292F2F2F%29532F2F2F532F532F532F532F542F532F542F542F5A2F542F5A2F542F5A%2F542F5A2F542F5A2F542F5A2F542FA9FD16FF2F532F532F532F2F29532F%2F292F292F292F292F282F292F282F282F282F282F282F2F292F2F2F2953%2F2F29532F2F2F532F532F532F532F542F532F542F542F542F542F5A2F54%2F5A535A2F5A535A535A535A535A545A535A545A535A545A535A545A535A%545A535AA8FD16FF5A2F542F5A2F542F542F532F542F532F532F532F532F%532F532F2F29532F2F295329282F282F282F282F292F282F2F2F29532F2F%29532F532F532F532F532F532F542F532F542F532F5A2F542F5A53542F5A%535A535A535A535A535A535A535A535A535A535A535A2FA9FD16FF2F542F%532F542F532F532F532F532F532F532F2F2953292F282F292F282F292F28%2F2F292F292F2F2F29532F53535A535A535A535A535A535A537E535A537E%535A537E5A7E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7E5A7EA8FD16FF7E537E547E537E535A537E535A53%7E535A535A535A535A5353292F2F2F292F292F28282F282F282F28532FFD%0853595353535A5353535A535A535A535A535A535A537E535A537E535A53%7E537E537E5A7E537E5A7E537E5A7E537E5A7E537E5A7E537E53A9FD16FF%535A535A535A535A535A535A5353535AFD0A53282F282F282F282F2F292F%29532F53535A535A535A535A535A535A537E535A537E537E537E537E537E%5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7EA8FD16FF7E537E5A7E537E537E537E535A537E535A53%7E535A535A535A535A2F2F29532F2F29282F282F28FD0853595353535A53%53535A535A535A535A535A535A537E535A537E535A537E535A537E5A7E53%7E5A7E597E5A7E597E5A7E597E5A7E597E5A7E597E54A9FD16FF535A535A%535A535A535A535A5359535A5353535AFD0853292F282F282F2F282F2953%535A5353535A535A535A535A535A535A537E535A537E535A537E537E537E%5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7EA9FD16FF7E537E537E535A537E535A537E535A535A535A53%5A535A535AFD0453292F292F29282F282F2F532F5353532FFD08535A5353%535A535A535A535A535A535A535A535A537E535A537E535A537E597E537E%5A7E537E5A7E537E5A7E537E5A7E537E5A7E53A9FD16FF535A535A535A53%5A535A5353535A5353535AFD06532F5353532F2F282F282F2F292F2F5353%5A535A535A535A535A535A537E535A537E537E537E537E537E5A7E537E5A%7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7E5A7EA9FD16FF7E5A7E537E5A7E537E537E537E535A537E535A535A%535A535A535A535A2F2F295329282F285353532FFD08535A5353535A5353%535A535A535A535A535A535A537E535A537E535A537E5A7E537E5A7E537E%5A7E597E5A7E597E5A7E597E5A7E597E5A7E53A9FD16FF535A535A535A53%5A535A535A535A5353535A5353535AFD0853282F282F2F292F2F5A535353%5A5353535A535A535A535A535A535A537E535A537E535A537E5A7E537E5A%7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7EA8FD16FF7E537E5A7E537E535A537E535A537E535A535A535A535A%535A535A53532F2F292F28282F282F2F5353532F5353532FFD08535A5353%535A535A535A535A535A535A535A535A537E535A537E535A537E5A7E537E%5A7E537E5A7E537E5A7E537E5A7E537E53A9FD16FF535A535A535A535A53%5A535A5353535AFD06532F5353532F535353282F282F2F292F2F5A535353%5A535A535A535A535A535A537E535A537E537E537E537E537E5A7E537E5A%7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7EA8FD16FF7E537E5A7E537E537E537E535A537E535A535A535A535A%535A535A535A53532F2F29282F282FFD0D535A5353535A535A535A535A53%5A535A535A535A537E535A537E535A537E5A7E537E5A7E537E5A7E597E5A%7E597E5A7E597E5A7E597E54A9FD16FF535A535A535A535A535A535A5353%535A5353535AFD0A53282F282F2F282F2F53535A5353535A535A535A535A%535A535A537E535A537E535A537E537E537E5A7E537E5A7E537E5A7E5A7E%5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7EA9FD16FF7E53%7E537E535A537E535A537E535A535A535A535A535A535A5353535A532F29%2F29282F062F53532F5353532FFD08535A5353535A5353535A535A535A53%5A535A535A535A535A537E535A537E535A537E597E537E5A7E537E5A7E53%7E5A7E537E5A7E53A9FD16FF535A535A535A535A535A5353535AFD0A532F%5353532F53282F282F2F292F2F53535A535A535A535A535A535A537E535A%537E535A537E537E537E537E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7EA9FD16FF7E547E537E53%7E537E535A537E535A537E535A535A535A535A535A535A532F292F29282F%285353532FFD0853595353535A5353535A535A535A535A535A535A535A53%5A537E535A537E535A537E5A7E537E5A7E537E5A7E597E5A7E597E5A7E59%7E5A7E53A9FD16FF535A535A535A535A535A5359535A5353535AFD0C5328%2F282F2F292F295A5353535A5353535A535A535A535A535A535A537E535A%537E535A537E537E537E5A7E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7E5A7E5A7EA8FD16FF7E537E535A537E535A537E53%5A535A535A535A535A535A5353535A53532F2F292F28282F282F2F535353%2F5353532FFD08535A5353535A5353535A535A535A535A535A535A535A53%5A537E535A537E535A537E537E537E5A7E537E5A7E537E5A7E537E53A9FD%16FF535A535A535A535A5353535A5353535AFD06532F5353532F53535328%2F282F2F292F2F5A5353535A535A535A535A535A535A537E535A537E535A%537E537E537E537E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7E5A7E5A7EA8FD16FF7E537E537E537E535A537E53%5A537E535A535A535A535A535A535A535A5353292F29282F282F2F535353%2FFD08535A5353535A5353535A535A535A535A535A535A535A535A537E53%5A537E535A537E535A537E5A7E537E5A7E537E5A7E537E5A7E537E53A9FD%16FF535A535A535A535A535A535A5353535A53535359FD0A53282F282F2F%282F2F53535A5353535A5353535A535A535A535A535A535A537E535A537E%535A537E537E537E5A7E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7EA8FD16FF7E535A537E535A537E535A535A535A53%5A535A535A5353535A5353535A532F282F29282F062F53532F5353532F53%53532FFD08535A5353535A5354535A535A535A535A535A535A535A535A53%7E535A537E535A537E535A537E535A537E535A537E535A53A9FD16FF535A%535A535A5353535A5353535AFD06532F5353532F5353532F53282F282F2F%292F2F53535A5353535A535A535A535A535A535A537E535A537E535A537E%537E537E537E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E%5A7E5A7E5A7E5A7E5A7EA9FD16FF7E537E537E535A537E535A537E535A53%5A535A535A535A535A5353535A2F2F292F29282F282F2F532F5353532FFD%08535A5353535A5353535A535A535A535A535A535A535A535A537E535A53%7E535A537E535A537E535A537E5A5A537E5A5A537E5A5A53A9FD16FF535A%535A535A535A535A5353535A5353535AFD0A532F2F282F282F2F292F28FD%04535A5353535A5353535A535A535A535A535A535A537E535A537E535A53%7E537E537E5A7E537E5A7E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7E5A5AA8FD16FF7E537E535A537E535A535A535A535A535A535A535A%535A5353535A5353282F292F28062F282F285353532F5353532F5353532F%FD08535A5353535A5353535A535A535A535A535A535A535A535A535A535A%537E535A537E535A537E535A537E535A537E53A9FD16FF5353535A535353%5A5353535AFD06532F5353532F5353532F53282F282F282953282F292F2F%53535A5353535A535A535A535A535A535A537E535A537E535A537E537E53%7E537E537E5A7E537E5A7E537E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A7E5A%7E5A7E5A7EA8FD16FF7E537E535A537E535A537E535A535A535A535A535A%535A535A535A2F2F292F292F53A829282F282F28FD0E535A5353535A5353%535A535A535A535A535A535A535A535A537E535A537E535A537E535A537E%535A537E535A537E535A537E53A9FD16FF5354535A5359535A5353535A53%53535AFD0A53282F282F282F06A8FF532F292F282F2953535A5353535A53%59535A535A535A535A537E535A537E535A537E535A537E537E537E5A7E53%7E5A7E537E5A7E537E5A7E537E5A7E537E5A7E537E5A7E537EA9FD16FF7E%535A537E535A537E535A535A535A535A535A535AFD04532F2F282F292F06%59FFFFA8062F282F282F282F2853292F2853292F29532F5329532F532F53%2F532F532F532F532F532F532F532F542F532F542F532F542F532F542F53%2F5A53542F5A53542F5A53542FFD077E7D7E7E7E7D7E7E7E597E7E7E597E%7E7E2F532F532F532F532F532F5329532F53295329532953292F282F282F%282F0629A8FFFFFFA9292F292F292F292F292F29532F2F29532F2F2F532F%532F532F532F532F532F542F532F542F542F542F542F542F542F5A2F542F%5A2F542F5A2F542F5A2F542F5A2F542F5A2F542F542F542F542F532F542F%2F2F542F2F2F532F2F2F542F532F532F532F532F532F532F2F29532F2F29%532F2F29532F2F2953292FA8FD05FFA90629282F282F282F292F282F292F%282F292F292F292F292F2F2F29532F2F29532F2F2F532F532F532F532F53%2F532F542F532F542F532F542F532F542F532F542F532F542F532F542F53%2F532F532F532F532F532F2F2F532F2F2F532F2F29532F2F292F292F292F%292F282F292F282F292F282F282F062FA8FD08FF532F062F292F292F2F2F%29532F2F29532F2F29532F532F532F532F532F532F532F532F542F532F54%2F532F542F542F542F542F542F542F5A2F542F5A2F542F5A2F542F5A2F54%2F542F542F542F542F542F532F542F532F532F532F532F532F532F532F53%2F2F29532F2F29532F2F292F292F292F2853A8FD0AFFA853062F282F282F%282F282F282F282F292F282F292F292F292F292F2F2F29532F2F29532F2F%2F532F2F2F532F532F532F532F532F532F532F532F532F532F532F532F53%2F532F532F532F532F2F2F532F2F29532F2F292F2F2F292F292F292F292F%282F292F282F282F282F282F282F28292FA9FD05FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                              
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2010-01-25T15:41:44+13:00</xmp:CreateDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9IebvN2heU9Dn1rWp/Rt&#xA;IfhRRQySyEErFEtRydqbD5k0AJFmLFKcqDGcxEWXyh58/wCcgPPPme4eKxuX0LSekdpZuVlYb7yz&#xA;ji7E13C8V9u+bvDooQ57l12TUyly2DzQ8mJZiSx3JO5OZbjtgYquC4quC4quC4rTYGKWwuKrguKt&#xA;hcVb44rTfEYpp3EYFb4jFXUxV1MVdxxV3EYq1xGKtccKKaKnFaaK4q0VxVrjiq0jFWiuKKWlcVWk&#xA;Yq1Qg1GxHQ4q9I8h/n5568rTpHdXL65pWweyvZGd1UU/uZzydCAtADVf8nvmJm0UJ8ti5GPUyjz3&#xA;D6x8oeb9C826FBrWiz+tazfC6NQSwygAvFKgJ4utenQihBKkE6TLilCVF2MJiQsPk38+vPs/mvzz&#xA;c20b/wC4nRHksrFFNVZkak01QWB9R12I/YC965u9Fh4IX1LrtTk4pV0DzgDMxx1wGBVwXFVwXFK4&#xA;DFWwuKrguK0uC4E02BirfE4q3xxVvjirfHFXccVb44q7jiruOKtccVa44q1xxVtIndgiKWdtlVRU&#xA;k+wGKgJ/Y/l358v1V7Xy/qEsbU4yfVpVQ18GZQv45VLPAc5BsGKR6I3/AJVB+Zf/AFLt5/wA/rkf&#xA;zWP+cGX5efcsk/KL8y0QsfLl6QOvGPkfuWpx/NY/5wR+Xn3IOb8tfzChFX8tanSlaraTsAB48VNM&#xA;kNRjP8Q+bE4ZjolF35f1yzr9b066t6dfVhkT/iSjJicTyLHgl3FLyMmxWlcUUtIxVaRir0X8iPPk&#xA;/lTzzbQyOBpOtPHZagjHiql2pDPUlVBjdtyf2C3fMTW4eOF9Q5GmycMq6F50BmW464DFVwXFaXAY&#xA;pXBcVXhcVpcFwJbC4quC4quC4q2FxS2FGKt8cVbpirqYq6mKupirqYq6mKq1nY3d7dRWlnA9xdTs&#xA;EhgiUu7segVRucBIAsqATsHu3kP/AJxpRo4r7zjMwY/ENJtmAoPCaYfiqf8ABZq83aHSHzc3Hpf5&#xA;z2nQfKflnQIRFo2mW9itKF4owJG/15DV2/2RzXzyylzNuTGIHJNsrZOxV2KuxV2KpdqPlvy7qdf0&#xA;lpdpe16/WIIpa/8ABq2TjkkORIQQDzeXfmv+Un5aWHkvWNbg0lbK9s7dnt5LaR419VqLGDHyMdOb&#xA;Co45mabU5DMRuw0ZcMOEmnyqRm7datK4opaRiq4Liq4DFK8Liq4LitLwuBK4Liq4Liq4LilcFxVs&#xA;DFWwuKruOKu44q3xxVvjil3HFXccVdxxVWtLG6vbqG0tImnubh1ighQVZ3c0VQPEnASALKgEvq78&#xA;p/yo0/ybpyXd2iT+Y7hP9KuvtCINv6MXgB+037R9qDNFqtUchofS7HFiER5vQsxG52KuxV2KuxV2&#xA;KuxV2KvLf+cktSNp+WU1uDT9I3dvbEeIUmf/AJk5m6CN5PcGjUn0PkkjN66xaRiqwriilwGKV4GK&#xA;rwuKaXAYFXBcVXhcUrgMVXBcVXBcVXBcVbC4pbC4Fb44q3xxVvjiruOKu44q7jir3X/nG7yRFI9z&#xA;5tvIwxiY2umcuzU/fSj6GCA/62aztDN/APi5mmh/E98zVOW7FXYq7FXYq7FXYq7FXYq8C/5yr1IC&#xA;38v6Wrbs9xcyp4cQiRn6eT5tOzY7kuJqzsA+eCM2rgrCuFFLCMVXAYqvApgSvC4qvC4qvC4pXBcV&#xA;XBcVXhcUrguBWwuKrguKthcVb44q3xxV3HFW+IxV3EYq7iMVfZn5f6Kmi+StG00LxaK1Rph/xbKP&#xA;Ul/4dznOZ58UyXaQjUQGQZUzdirsVdirsVdirsVdirsVfLP/ADktqP1r8wY7UH4bCyhiK/5cjPKT&#xA;/wAC65u+z41jvvLgao+p5IVzOcVaRiqwrhRS4DAleFxVeFxSvAxVcFxVeFxSvC4FXBcVXBcVXBcV&#xA;bAxVumKt8cVb44q7jirfHFXccVRmjWQvNXsbMioubiKEj/jI4X+ORmaBKYiyH25nMu2dirsVdirs&#xA;VczBQWY0UbknoBirzHzT/wA5A+TNGne1sFl1i5jNGa3KrACOo9ZvtfNVI98zcWhnLc7NE9REebDp&#xA;P+cob0uTH5djVOwa6Zj94iX9WZH8mj+d9jV+a8kRaf8AOUcewvPLrL4vDdBv+FaJf+JYD2b3S+xI&#xA;1Q6hlGk/85Ffl3esFunutNY9WuIea1+cBmP3jKJaDIOVFsGoiXz3+Z2t2+u+fda1S2kE1tNPxt5l&#xA;rR44VWJGFfFUGbXTw4cYBcLMbkSGLFcva1MrihYRiq5VxVUC4pXgYqvC4qvC4pXBcCrwuKrguKrg&#xA;MVbC4quC4quC4q2FxVvjiruOKt8cVdxxQn3kCEyeefLyim2o2rGvgsysf1ZVn/u5e4tmL6g+xc5x&#xA;2jsVdirsVdiryj/nIjzPeaX5YtNKtJDE+sSOs7qaEwQhS6A/5TSLX2qO+Z/Z+ISkSejj6mdRrvfN&#xA;RGblwFpXFVhXFVpXFVhXCqwrihYRiqxlxQuVcUrwMVXhcVVAuBK4DFV4XFV4GKrguKrguKrguKrg&#xA;uKthcULguKt8cVb44q7jiruOKsi/Lpf+d80D/mOg/wCJjKdR/dy9zbh+oPrzOddm7FXYq7FXYq8M&#xA;/wCcnRX/AA1/0e/9i+bTs3+L4fpcPV9HhRXNo4i0jFVpXFVhXFVhXFVhXCqwrihYRirYGKqiriq8&#xA;DAleBiq8Liq8DFVwXFV4XFVwXFC4Liq8Liq4JilvjirfHFDfHFXcTiruJxVkX5dg/wCOtB/5joP+&#xA;JjKdR/dy9zbh+oPrfOddm7FXYq7FXYq8O/5yaFf8N/8AR7/2L5tOzf4vh+lw9X0eGFc2jiLSuKrC&#xA;uKrSMVWMuKrCMVUyuFVjLihtRiqoBgSvAxVUAxVcBiq8Liq8DFV4XFC8Liq8LilsDFC4Liq4JirY&#xA;TFWwmBW+GKu4YVZB+Xq/87zoX/MdB/xMZRqP7uXubcP1B9Z5zzs3Yq7FXYq7FXiH/OS4r/hz/o9/&#xA;7F82nZv8Xw/S4er6PDyubRw1hXFVhXFKwriqwjFVjLiqwjFVNhhVcowKvAxVUAxVcBiqoq4qvC4o&#xA;XhcVVAuKVwGKF4XFV4TFVwXArYGKt8cKpp5Z0mHVvMOnaZM7RxXlxHDI6U5AOwBIrUVyvLPhiT3M&#xA;4RuQD2f/AKF58s/9XK9/5Jf80Zq/5Rn3BzPyse8t/wDQvPln/q5Xv/JL/mjH+UZ9wX8rHvKM0X8j&#xA;vL+k6vZ6nDf3cktnKk0aP6fElDUA0QGmRnrpSiRQ3THTgG3pGYLkOxV2KuxV2KsT8+flzpfnP6j9&#xA;euZ7f6h6vp+hw+L1uFeXJW6emMyMGpOK6HNqyYhPmxI/845eV/8Aq53v/JL/AJozI/lGfcGv8rHz&#xA;W/8AQt/lb/q533/JH/mjH+UZ9wX8rHzaP/ONvlb/AKul9/yR/wCaMf5Rn3Bfyse8tH/nGvyqf+lp&#xA;ff8AJH/mjH+UZ9wX8rHzeMfmL5YsvLPm690SylknhtBF+8m48yZIklP2QB+3my0+QzgJFxcsRGVB&#xA;jBGXNaxlxVTIxVtRiqooxVeBiqoq4qvAxQqKuKqgXFK4LihUVcVXhcCrguFVwXFVwXFWwuKsg8gL&#xA;/wA7tof/ADGw/wDExlGo/u5e5sw/UH1XnPO0dirsVdirsVdirsVdirsVdirsVdirsVfJH5tT/WPz&#xA;F1161pcensa/3aKn/GudBpRWMOtz/WWHMMyGpYRiqmwxVyUO4NcVVQMVXqMVVFGKFRVxVUAxSvC4&#xA;oVFXAq8DCq8Liq8Liq4Liq4LirYXFWQeQV/53XRP+YyH/iYyjUf3cvc2YfqD6mznnaOxV2KuxV2K&#xA;uxV2KuxV2KuxV2KuxV2Kvjnz1N9Y86a9MDUPqF1xPT4RMwX8M6PAKhH3B1eQ+opARlrBTYYqsagG&#xA;5piqEWo6bYGaukrj3xRSuk6nqKYUUiEZD0IxRSsoxVeoxQqquBV4GFV4XFV4XFV4XFV4XFVwTAhc&#xA;FGKp/wCQx/zumi/8xkP/ABMZTqP7uXubcP1h9Q5zztHYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXxVr&#xA;Fys+p3lwWH76eSTrX7Tk9e/XOmiKADqZbkpa8yDoK5JaUHmc9NsCaUGqdzucUuUYqqAYqvUYqqKM&#xA;VVUdx0JxRSulw46gHFFK6XKnqpHy3wrSsk0R70+eKKVlZD0YH6cUKoXFVRUwKvAxQuC4quCYqnHl&#xA;G6trLzPpd5dOIre3uY5JZCCQqqwJO1TleaJMCB3NmI1IEve/+VneRP8Aq7R/8BL/AM0ZpfymXudh&#xA;48O93/KzvIn/AFdo/wDgJf8AmjH8pl7l8eHerWX5heTb27htLXU0luJ3EcUYSQFmY0AqVAyMtNkA&#xA;shIyxOwLIsobHYq7FXYq7FUo1/zb5d8veh+mb1LP6zz9DmHPL06cqcQ3TmMsx4ZT+kWxlMR5pOfz&#xA;d/Lkf9LqP/kXN/zRlv5TL3MfFj3rf+Vv/lv/ANXuP/kXN/zRj+Uy9y+LHva/5XD+W3/V7j/5Fz/9&#xA;U8fymXuXxY96nc/nJ+XS28rRa1GZQjGMelNuwG37HjiNJkvkvix73yYRm+desIxVTIxVYwxVyjFV&#xA;RRiq8DFVQDFV6jFVRRhVUUYoVAMVXgYqqLUdDTFVVXkH7R+/FCqs8w/a/AYopUW4lHh92K0uF1L4&#xA;D8caWl/1qT+UY0tN/Wn/AJRivC76038oxXhT3yHcu3nTRAQKG8h/4mMp1H93L3NmIeoPqHOddm7F&#xA;XYq7FXYq8U/5yRFf8O/9Hn/MjNp2b/F8P0uJqujxIjNo4qxhiqmwxVTYYErGGKqbDFVjDFVMjFXK&#xA;MVXqMVVFGKqijFVRRhVUUYoVFGKrwMVVFXFVQDFC8LhVeBgVeFwquC4FXBcVb44q7jiqe+Q1/wCd&#xA;00T/AJjIf+JjKdR/dy9zZi+oPqTOddk7FXYq7FXYq8W/5yPFf8Pf9Hn/ADIzadm/xfD9Liaro8TY&#xA;ZtHFWEYqpsMVU2GKVNhgVTIxVTIxVTYYq4DFVQDFVQDFVRRiqoowqqKMUKgGKqijFVVRiheowqqA&#xA;YFXhcKrwuBV4XChcFxVvjiruOKp75EX/AJ3PRf8AmMh/4mMo1H93L3NmL6g+n8512bsVdirsVdir&#xA;xj/nI0V/w9/0ef8AMjNp2b/F8P0uJqujxVhm0cVSYYqpsMVU2GKqbDFKmwwKpsMVU2GKtLiqqoxV&#xA;eoxVUUYVVVGKFRRiqooxVVUYqqKMUKgGKqijFVQDFV4XCheFxVcFxVdxxV3HFU88ir/zuWi/8xkP&#xA;/ExlOo/u5e5sxfUH03nOOzdirsVdirsVeM/85Fj/AJR//o8/5kZtOzf4vh+lxNV0eLMM2jiKbDFK&#xA;kRiqmwxVSYYpU2GBVNhiqxsVaUYqqLiqooxVUUYVVFGKFUDFVRRiqqoxQqKMKqqjFVRRgVUUYUKi&#xA;riqoq4quC4quoMUOoMVTvyOP+dw0b/mLi/4kMp1P93L3NmL6g+l85x2jsVdirsVdirxv/nIn/pn/&#xA;APo8/wCZGbTs3+L4fpcTVdHizDNo4imwxSpMMVU2GKqTDFVNhgSpnFVNsVWriqouKqq4qqLhVVUY&#xA;oVFxVVUYqqqMUKijFVVRiqqowoVFGKqijFVQDFDeKuxV2Kp55H/5TDRv+YuL/iQynU/3cvc2YfqD&#xA;6WznHaOxV2KuxV2KvG/+ciP+mf8A+jz/AJkZtOzf4vh+lxNV0eMMM2riKbDAqiwxSptiqk2KqbYp&#xA;UmwKsbFVq4qqDFVRcVVVwoVVxVUXFVVcVVVxQqqN8KqijAqqowoVVGKqqjFV2KHYq7FXYqnnkf8A&#xA;5TDRv+YuL/iQynU/3cvc2YfqD6WznHaOxV2KuxV2KvHP+ch+mgf9Hf8AzIzadm/xfD9Liaro8Ybp&#xA;m1cRTbAqi+KVNsVUmxVSbFVNsCVNsVWriqtGjOwVQWY9AMVTODRpmFZHCew+I/wyJmzEEUuiL/v0&#xA;/wDA/wBuDjT4aouir/v0/wDA/wBuPGjw1RdET/fp+7+3HjXw1VdFX/fp+7+3HjXgVV0Za/3p+7+3&#xA;Dxo8NUXRl/36fu/twca8CqujL/v0/d/bh414FVdGX/fp+7+3HjRwKi6Ov+/T939uPGvAqjR1/wB+&#xA;n7v7cfERwN/ohf8Afp+7+3HjXgd+iF/36fu/tx414Hfohf8Afp+7+3HjXgd+iF/36fu/tx414E58&#xA;m6WsfmvSX9QnjdRGlPBh75TqJ/uz7meKHqD6GzQOxdirsVdirsVeTfnzZC5/QdW48PrXavX0f6Zs&#xA;uzpVxfD9LjaiN08jbRlp/en7v7c2XG43ApNoy/79P3f248a+Gptoq/79P/A/248aeBSbRF/36f8A&#xA;gf7ceNfDUm0Rf9+n/gf7ceNfDQlzpFxGCyESAdhsfuwiYQYFLXFNj1yTFSbFVq4qyHS7NYYg7D96&#xA;4qT4A9sqkbboxpMFyLJUGKFVcKqi4qqLihUXriqquKFRemKqoxVUXFCoMVbxQ7FXYq7FU38pf8pP&#xA;pf8AzEx/8SGVZ/oPuZ4/qD3jNG5zsVdirsVdiry/87f+lN/0c/8AMrNhoP4vh+loz9HljdM2LQpN&#xA;iqm2KqbYEqTYqptiqU6xZqU+sIKMP7z3HjlkD0YTj1SVsm1ugUNKinoWAP0nEpHNlQyhvVFxVUXF&#xA;CouFVVcVVFxQqLiqquKFRcVVFxVUU4oVRireKHYq7FXYqm/lL/lJ9L/5iY/+JDKs/wBB9zPH9Qe8&#xA;Zo3OdirsVdirsVeX/nb/ANKb/o5/5lZsNB/F8P0tGfo8rbpmxaFNsVU2xVTbAlSbFVNsUoe6UNby&#xA;KehUj8MIQeTFmy5obtv7+L/XX9eJSObKhlDeqDFVRcUKi4VVFwKqLhQqDFVVTiq9TvihVU4qqKcU&#xA;KinFV+KHYq7FXYqm/lL/AJSfS/8AmJj/AOJDKs/0H3M8f1B7xmjc52KuxV2KuxV5d+d3TRv+jn/m&#xA;Vmw0HX4fpaM/R5W2bFoU2xVTOKVNsCqbYqptilQn/un/ANU/qwhSxVsucdu1/v4/9Zf14lI5spXK&#xA;G9UGKqi4oVFOKqinFVQHChUU4qqKcVVAcUKinFVQHFV6nFC8Niq6uKt4odiqbeUv+Un0v/mJj/4k&#xA;Mqz/AEH3M8f1B7zmjc52KuxV2KuxV5d+d/8A0pf+jn/mVmx0H8Xw/S0Z+jypjmwaFNjiqmxxSptg&#xA;VTOKqbYpUJ/7p/8AVP6sQrFWy9x3Wx/fx/6y/rxKRzZUuUN6ouKr1OKqgOKFRTiqoDhVUU4oVFOK&#xA;qgOKr1OKFQHFV4OKrg2KF4bFW+WKu5Yqm/lFv+do0v8A5iY/+JDKs/0H3M8f1B73mjc12KuxV2Ku&#xA;xV5b+eJ20X/o6/5k5sdB/F8P0tGbo8pY5sGhTJxVTY4EqbHCqmxwKsOKVCc/uZD/AJJ/VhCsVOXO&#xA;OsQkEEdR0xVlFpOs8KyL3G48D3ykinIBtEA4FVAcVVAcUKinCqopwKvBwoVFOKr1OKqgOKFwbFVQ&#xA;Niq4NirdcVb5Yob5Yqm/k8/87TpX/MTH/wASGVZ/oPuZ4/qD3/NG5rsVdirsVdiryv8APL/pSf8A&#xA;R1/zJzYaD+L4fpaM3R5SxzYtCmTilYTgVTJxVTY4pU2OKoHVbgRWrLX45PhUfPrkojdjM0GOscta&#xA;Wc/nN5K/wv5zn+rRenpOp1u7DivFE5H97CvFEQem/RFrxQpXrmLpM3HDfmG3NDhLDrK9ltnqu6H7&#xA;SHocySLYCVJ1BqlpIBV+DeDbfj0ysxLYJBEC+tP9/J94wcJTxBUW+tP9/L94x4SjiC8X1p/v5PvG&#xA;HhK8QVBfWn+/l+/HhK8QVBfWn+/l+/HhKOIL1vbX/fq/eMeErYXi9tf9+r9+NFeIKi31r/v1fvGP&#xA;CV4guF7a/wC/V+/HhKOILxe2v+/V+/HhK2FwvrX/AH6v3jHhK2F3161/36v348JWw769a/79X78a&#xA;K2G/r1r/AL9X7xjRWwmnlbVdPt/Mmmzz3McUMdxG0kjMAqqGFSScrzQJgQB0ZQkLD2//AB55L/6v&#xA;dl/yPT+uaf8AL5P5pcvxI94a/wAe+Sv+r5Zf8j0/rj+XyfzSviR73f4+8k/9Xyy/5Hp/XH8vk/ml&#xA;fEj3tf4/8k/9Xyy/5Hp/XH8vk/mlfEj3u/5WB5I/6vtl/wAj0/rj+XyfzSviR73m35x+Z/L2pfoj&#xA;9H6jb3fpfWPV9GRX48vS41oe/E5naLFKN2K5NOWYNbvNDfWn+/V+8ZncJaeILGvrT/fy/fjwlPEF&#xA;Nr60/wB/L94xorxBTN9af7+X7xg4SvEFjX1p/v5PvGPCU8QQtxq9sgPA+o3YDYfecIgWJmEkubmS&#xA;eQySHfsOwHhlgFNZNsz/ACa8lf4o85wfWYvU0nTKXd/yWqPxP7qFuSOh9R+qNTkgenTMbV5uCG3M&#xA;tmGHEX075p8raN5o0abSNXh9W2l+JHWgkikAIWWJiDxda/wNQSDpseQwNhzZREhRfMXnT8mfOXlf&#xA;1bn0P0npMfJvr9oC3BF5tymi+3HRE5Od0WtOZzc4dXCe3IuFPCYsHBzKalQHFV6nFVRThVUU4oVA&#xA;cVXq2Kqitiq8NiheGwquBwKuDYVXBsCt8sVdyxVrlirRbCq0tiq0tiqwtgVaWxVTZsUqZOKrGOKq&#xA;bHFVMnFKmxwKsY4qzjyX+TXnLzR6Vz6H6M0mTi31+7BXmjcG5Qxfbkqj8lOyNSnMZi5tXCG3MtsM&#xA;MpPpvyt5W0byxo0Ok6TD6VtF8Tu1DJLIQA0srADk7U/gKAAZpsmQzNlzYxERQf/Z</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>210.001480</stDim:w>
            <stDim:h>297.000132</stDim:h>
            <stDim:unit>Millimeters</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>D Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>100.000000</xmpG:cyan>
                           <xmpG:magenta>87.000000</xmpG:magenta>
                           <xmpG:yellow>15.999996</xmpG:yellow>
                           <xmpG:black>27.999996</xmpG:black>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>L Blue</xmpG:swatchName>
                           <xmpG:mode>CMYK</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:cyan>71.264206</xmpG:cyan>
                           <xmpG:magenta>47.129013</xmpG:magenta>
                           <xmpG:yellow>0.003052</xmpG:yellow>
                           <xmpG:black>0.003052</xmpG:black>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -288 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 288 li
288.051 288 li
288.051 0 li
cp
clp
[1 0 0 1 0 0 ]ct
gsave
0 24.9995 mo
0 11.1997 11.2002 0 25 0 cv
263.051 0 li
276.85 0 288.051 11.1997 288.051 24.9995 cv
288.051 263 li
288.051 276.85 276.85 288 263.051 288 cv
25 288 li
11.2002 288 0 276.85 0 263 cv
0 24.9995 li
clp
402.551 217.71 mo
402.551 76.2603 287.75 -38.5401 146.301 -38.5401 cv
4.84962 -38.5401 -109.949 76.2603 -109.949 217.71 cv
-109.949 359.16 4.84962 473.96 146.301 473.96 cv
287.75 473.96 402.551 359.16 402.551 217.71 cv
false sop
/0 
[/DeviceCMYK] /CSA add_res
1 .87 .16 .28 cmyk
f
400.373 217.71 mo
400.373 77.462 286.549 -36.3628 146.301 -36.3628 cv
6.05072 -36.3628 -107.772 77.462 -107.772 217.71 cv
-107.772 357.959 6.05072 471.782 146.301 471.782 cv
286.549 471.782 400.373 357.959 400.373 217.71 cv
.997182 .866091 .158431 .277255 cmyk
f
398.196 217.71 mo
398.196 78.6635 285.347 -34.1861 146.301 -34.1861 cv
7.25289 -34.1861 -105.596 78.6635 -105.596 217.71 cv
-105.596 356.757 7.25289 469.606 146.301 469.606 cv
285.347 469.606 398.196 356.757 398.196 217.71 cv
.994365 .862182 .156863 .27451 cmyk
f
396.02 217.71 mo
396.02 79.8652 284.145 -32.0093 146.301 -32.0093 cv
8.45506 -32.0093 -103.419 79.8652 -103.419 217.71 cv
-103.419 355.556 8.45506 467.43 146.301 467.43 cv
284.145 467.43 396.02 355.556 396.02 217.71 cv
.991548 .858273 .155295 .271765 cmyk
f
393.843 217.71 mo
393.843 81.0674 282.943 -29.8316 146.301 -29.8316 cv
9.65629 -29.8316 -101.241 81.0674 -101.241 217.71 cv
-101.241 354.353 9.65629 465.252 146.301 465.252 cv
282.943 465.252 393.843 354.353 393.843 217.71 cv
.988731 .854364 .153726 .26902 cmyk
f
391.666 217.71 mo
391.666 82.2685 281.741 -27.6553 146.301 -27.6553 cv
10.8583 -27.6553 -99.0645 82.2685 -99.0645 217.71 cv
-99.0645 353.152 10.8583 463.075 146.301 463.075 cv
281.741 463.075 391.666 353.152 391.666 217.71 cv
.985913 .850455 .152158 .266276 cmyk
f
389.489 217.71 mo
389.489 83.4702 280.54 -25.4785 146.301 -25.4785 cv
12.0596 -25.4785 -96.8877 83.4702 -96.8877 217.71 cv
-96.8877 351.95 12.0596 460.897 146.301 460.897 cv
280.54 460.897 389.489 351.95 389.489 217.71 cv
.983096 .846546 .15059 .263531 cmyk
f
387.312 217.71 mo
387.312 84.6719 279.338 -23.3017 146.301 -23.3017 cv
13.2617 -23.3017 -94.711 84.6719 -94.711 217.71 cv
-94.711 350.748 13.2617 458.721 146.301 458.721 cv
279.338 458.721 387.312 350.748 387.312 217.71 cv
.980279 .842637 .149021 .260786 cmyk
f
385.136 217.71 mo
385.136 85.874 278.137 -21.124 146.301 -21.124 cv
14.4628 -21.124 -92.5333 85.874 -92.5333 217.71 cv
-92.5333 349.547 14.4628 456.545 146.301 456.545 cv
278.137 456.545 385.136 349.547 385.136 217.71 cv
.977462 .838728 .147453 .258041 cmyk
f
382.958 217.71 mo
382.958 87.0752 276.935 -18.9472 146.301 -18.9472 cv
15.665 -18.9472 -90.3565 87.0752 -90.3565 217.71 cv
-90.3565 348.345 15.665 454.367 146.301 454.367 cv
276.935 454.367 382.958 348.345 382.958 217.71 cv
.974644 .834819 .145885 .255296 cmyk
f
380.781 217.71 mo
380.781 88.2769 275.733 -16.771 146.301 -16.771 cv
16.8662 -16.771 -88.1797 88.2769 -88.1797 217.71 cv
-88.1797 347.144 16.8662 452.19 146.301 452.19 cv
275.733 452.19 380.781 347.144 380.781 217.71 cv
.971827 .83091 .144316 .252552 cmyk
f
378.604 217.71 mo
378.604 89.4785 274.532 -14.5937 146.301 -14.5937 cv
18.0684 -14.5937 -86.0029 89.4785 -86.0029 217.71 cv
-86.0029 345.941 18.0684 450.014 146.301 450.014 cv
274.532 450.014 378.604 345.941 378.604 217.71 cv
.96901 .827001 .142748 .249807 cmyk
f
376.428 217.71 mo
376.428 90.6806 273.33 -12.4165 146.301 -12.4165 cv
19.2705 -12.4165 -83.8262 90.6806 -83.8262 217.71 cv
-83.8262 344.74 19.2705 447.837 146.301 447.837 cv
273.33 447.837 376.428 344.74 376.428 217.71 cv
.966193 .823092 .14118 .247062 cmyk
f
374.251 217.71 mo
374.251 91.8819 272.128 -10.2397 146.301 -10.2397 cv
20.4707 -10.2397 -81.6485 91.8819 -81.6485 217.71 cv
-81.6485 343.538 20.4707 445.66 146.301 445.66 cv
272.128 445.66 374.251 343.538 374.251 217.71 cv
.963376 .819183 .139611 .244317 cmyk
f
372.073 217.71 mo
372.073 93.0835 270.927 -8.06352 146.301 -8.06352 cv
21.6729 -8.06352 -79.4726 93.0835 -79.4726 217.71 cv
-79.4726 342.337 21.6729 443.482 146.301 443.482 cv
270.927 443.482 372.073 342.337 372.073 217.71 cv
.960558 .815274 .138043 .241572 cmyk
f
369.897 217.71 mo
369.897 94.2851 269.726 -5.88627 146.301 -5.88627 cv
22.8749 -5.88627 -77.2959 94.2851 -77.2959 217.71 cv
-77.2959 341.135 22.8749 441.306 146.301 441.306 cv
269.726 441.306 369.897 341.135 369.897 217.71 cv
.957741 .811366 .136475 .238828 cmyk
f
367.721 217.71 mo
367.721 95.4873 268.523 -3.70903 146.301 -3.70903 cv
24.0762 -3.70903 -75.1181 95.4873 -75.1181 217.71 cv
-75.1181 339.934 24.0762 439.129 146.301 439.129 cv
268.523 439.129 367.721 339.934 367.721 217.71 cv
.954924 .807457 .134906 .236083 cmyk
f
365.543 217.71 mo
365.543 96.6885 267.322 -1.53226 146.301 -1.53226 cv
25.2783 -1.53226 -72.9414 96.6885 -72.9414 217.71 cv
-72.9414 338.731 25.2783 436.952 146.301 436.952 cv
267.322 436.952 365.543 338.731 365.543 217.71 cv
.952107 .803548 .133338 .233338 cmyk
f
363.366 217.71 mo
363.366 97.8901 266.12 .644512 146.301 .644512 cv
26.4794 .644512 -70.7646 97.8901 -70.7646 217.71 cv
-70.7646 337.529 26.4794 434.775 146.301 434.775 cv
266.12 434.775 363.366 337.529 363.366 217.71 cv
.949289 .799639 .13177 .230593 cmyk
f
361.189 217.71 mo
361.189 99.0918 264.918 2.82128 146.301 2.82128 cv
27.6816 2.82128 -68.588 99.0918 -68.588 217.71 cv
-68.588 336.328 27.6816 432.599 146.301 432.599 cv
264.918 432.599 361.189 336.328 361.189 217.71 cv
.946472 .79573 .130202 .227848 cmyk
f
359.013 217.71 mo
359.013 100.294 263.717 4.999 146.301 4.999 cv
28.8828 4.999 -66.4101 100.294 -66.4101 217.71 cv
-66.4101 335.127 28.8828 430.422 146.301 430.422 cv
263.717 430.422 359.013 335.127 359.013 217.71 cv
.943655 .791821 .128633 .225104 cmyk
f
356.835 217.71 mo
356.835 101.495 262.516 7.1753 146.301 7.1753 cv
30.085 7.1753 -64.2333 101.495 -64.2333 217.71 cv
-64.2333 333.926 30.085 428.244 146.301 428.244 cv
262.516 428.244 356.835 333.926 356.835 217.71 cv
.940838 .787912 .127065 .222359 cmyk
f
354.658 217.71 mo
354.658 102.697 261.313 9.35207 146.301 9.35207 cv
31.2861 9.35207 -62.0567 102.697 -62.0567 217.71 cv
-62.0567 332.724 31.2861 426.067 146.301 426.067 cv
261.313 426.067 354.658 332.724 354.658 217.71 cv
.93802 .784003 .125497 .219614 cmyk
f
352.481 217.71 mo
352.481 103.898 260.111 11.5293 146.301 11.5293 cv
32.4883 11.5293 -59.8809 103.898 -59.8809 217.71 cv
-59.8809 331.522 32.4883 423.891 146.301 423.891 cv
260.111 423.891 352.481 331.522 352.481 217.71 cv
.935203 .780094 .123928 .216869 cmyk
f
350.305 217.711 mo
350.305 105.101 258.91 13.7066 146.301 13.7066 cv
33.6895 13.7066 -57.7032 105.101 -57.7032 217.711 cv
-57.7032 330.32 33.6895 421.714 146.301 421.714 cv
258.91 421.714 350.305 330.32 350.305 217.711 cv
.932386 .776185 .12236 .214124 cmyk
f
348.128 217.71 mo
348.128 106.302 257.709 15.8829 146.301 15.8829 cv
34.8906 15.8829 -55.5264 106.302 -55.5264 217.71 cv
-55.5264 329.119 34.8906 419.537 146.301 419.537 cv
257.709 419.537 348.128 329.119 348.128 217.71 cv
.929569 .772276 .120792 .21138 cmyk
f
345.95 217.71 mo
345.95 107.503 256.507 18.0596 146.301 18.0596 cv
36.0928 18.0596 -53.3496 107.503 -53.3496 217.71 cv
-53.3496 327.917 36.0928 417.359 146.301 417.359 cv
256.507 417.359 345.95 327.917 345.95 217.71 cv
.926751 .768367 .119223 .208635 cmyk
f
343.773 217.71 mo
343.773 108.705 255.305 20.2363 146.301 20.2363 cv
37.295 20.2363 -51.1728 108.705 -51.1728 217.71 cv
-51.1728 326.715 37.295 415.184 146.301 415.184 cv
255.305 415.184 343.773 326.715 343.773 217.71 cv
.923934 .764459 .117655 .20589 cmyk
f
341.598 217.71 mo
341.598 109.907 254.104 22.4141 146.301 22.4141 cv
38.4961 22.4141 -48.9951 109.907 -48.9951 217.71 cv
-48.9951 325.514 38.4961 413.007 146.301 413.007 cv
254.104 413.007 341.598 325.514 341.598 217.71 cv
.921117 .76055 .116087 .203145 cmyk
f
339.42 217.71 mo
339.42 111.108 252.902 24.5908 146.301 24.5908 cv
39.6982 24.5908 -46.8184 111.108 -46.8184 217.71 cv
-46.8184 324.313 39.6982 410.829 146.301 410.829 cv
252.902 410.829 339.42 324.313 339.42 217.71 cv
.9183 .756641 .114518 .2004 cmyk
f
337.242 217.709 mo
337.242 112.31 251.7 26.7675 146.301 26.7675 cv
40.8994 26.7675 -44.6416 112.31 -44.6416 217.709 cv
-44.6416 323.11 40.8994 408.652 146.301 408.652 cv
251.7 408.652 337.242 323.11 337.242 217.709 cv
.915483 .752732 .11295 .197656 cmyk
f
335.066 217.71 mo
335.066 113.512 250.499 28.9443 146.301 28.9443 cv
42.1016 28.9443 -42.4648 113.512 -42.4648 217.71 cv
-42.4648 321.908 42.1016 406.476 146.301 406.476 cv
250.499 406.476 335.066 321.908 335.066 217.71 cv
.912665 .748823 .111382 .194911 cmyk
f
332.89 217.71 mo
332.89 114.714 249.297 31.122 146.301 31.122 cv
43.3027 31.122 -40.288 114.714 -40.288 217.71 cv
-40.288 320.707 43.3027 404.299 146.301 404.299 cv
249.297 404.299 332.89 320.707 332.89 217.71 cv
.909848 .744914 .109813 .192166 cmyk
f
330.712 217.71 mo
330.712 115.915 248.096 33.2983 146.301 33.2983 cv
44.5049 33.2983 -38.1113 115.915 -38.1113 217.71 cv
-38.1113 319.506 44.5049 402.121 146.301 402.121 cv
248.096 402.121 330.712 319.506 330.712 217.71 cv
.907031 .741005 .108245 .189421 cmyk
f
328.535 217.71 mo
328.535 117.117 246.894 35.4746 146.301 35.4746 cv
45.706 35.4746 -35.9346 117.117 -35.9346 217.71 cv
-35.9346 318.304 45.706 399.944 146.301 399.944 cv
246.894 399.944 328.535 318.304 328.535 217.71 cv
.904214 .737096 .106677 .186676 cmyk
f
326.358 217.71 mo
326.358 118.318 245.692 37.6519 146.301 37.6519 cv
46.9082 37.6519 -33.7579 118.318 -33.7579 217.71 cv
-33.7579 317.102 46.9082 397.768 146.301 397.768 cv
245.692 397.768 326.358 317.102 326.358 217.71 cv
.901396 .733187 .105108 .183932 cmyk
f
324.182 217.71 mo
324.182 119.521 244.49 39.8291 146.301 39.8291 cv
48.1094 39.8291 -31.5801 119.521 -31.5801 217.71 cv
-31.5801 315.9 48.1094 395.591 146.301 395.591 cv
244.49 395.591 324.182 315.9 324.182 217.71 cv
.898579 .729278 .10354 .181187 cmyk
f
322.005 217.71 mo
322.005 120.722 243.289 42.0059 146.301 42.0059 cv
49.3105 42.0059 -29.4034 120.722 -29.4034 217.71 cv
-29.4034 314.699 49.3105 393.414 146.301 393.414 cv
243.289 393.414 322.005 314.699 322.005 217.71 cv
.895762 .725369 .101972 .178442 cmyk
f
319.828 217.71 mo
319.828 121.923 242.087 44.1826 146.301 44.1826 cv
50.5127 44.1826 -27.2266 121.923 -27.2266 217.71 cv
-27.2266 313.497 50.5127 391.236 146.301 391.236 cv
242.087 391.236 319.828 313.497 319.828 217.71 cv
.892945 .72146 .100403 .175697 cmyk
f
317.65 217.71 mo
317.65 123.125 240.885 46.3594 146.301 46.3594 cv
51.7148 46.3594 -25.0498 123.125 -25.0498 217.71 cv
-25.0498 312.296 51.7148 389.061 146.301 389.061 cv
240.885 389.061 317.65 312.296 317.65 217.71 cv
.890127 .717551 .0988349 .172952 cmyk
f
315.475 217.71 mo
315.475 124.327 239.684 48.5371 146.301 48.5371 cv
52.9161 48.5371 -22.8731 124.327 -22.8731 217.71 cv
-22.8731 311.094 52.9161 386.883 146.301 386.883 cv
239.684 386.883 315.475 311.094 315.475 217.71 cv
.88731 .713643 .0972666 .170208 cmyk
f
313.297 217.71 mo
313.297 125.528 238.482 50.7139 146.301 50.7139 cv
54.1181 50.7139 -20.6963 125.528 -20.6963 217.71 cv
-20.6963 309.893 54.1181 384.706 146.301 384.706 cv
238.482 384.706 313.297 309.893 313.297 217.71 cv
.884493 .709734 .0956983 .167463 cmyk
f
311.119 217.709 mo
311.119 126.73 237.28 52.8902 146.301 52.8902 cv
55.3193 52.8902 -18.5195 126.73 -18.5195 217.709 cv
-18.5195 308.69 55.3193 382.529 146.301 382.529 cv
237.28 382.529 311.119 308.69 311.119 217.709 cv
.881676 .705825 .09413 .164718 cmyk
f
308.943 217.71 mo
308.943 127.932 236.078 55.0674 146.301 55.0674 cv
56.5215 55.0674 -16.3418 127.932 -16.3418 217.71 cv
-16.3418 307.489 56.5215 380.353 146.301 380.353 cv
236.078 380.353 308.943 307.489 308.943 217.71 cv
.878859 .701916 .0925617 .161973 cmyk
f
306.767 217.711 mo
306.767 129.134 234.877 57.2447 146.301 57.2447 cv
57.7237 57.2447 -14.165 129.134 -14.165 217.711 cv
-14.165 306.287 57.7237 378.176 146.301 378.176 cv
234.877 378.176 306.767 306.287 306.767 217.711 cv
.876041 .698007 .0909933 .159228 cmyk
f
304.59 217.71 mo
304.59 130.335 233.676 59.4213 146.301 59.4213 cv
58.9238 59.4213 -11.9883 130.335 -11.9883 217.71 cv
-11.9883 305.086 58.9238 375.999 146.301 375.999 cv
233.676 375.999 304.59 305.086 304.59 217.71 cv
.873224 .694098 .089425 .156484 cmyk
f
302.412 217.71 mo
302.412 131.536 232.474 61.5976 146.301 61.5976 cv
60.126 61.5976 -9.81148 131.536 -9.81148 217.71 cv
-9.81148 303.884 60.126 373.821 146.301 373.821 cv
232.474 373.821 302.412 303.884 302.412 217.71 cv
.870407 .690189 .0878567 .153739 cmyk
f
300.235 217.71 mo
300.235 132.738 231.272 63.7753 146.301 63.7753 cv
61.3282 63.7753 -7.63471 132.738 -7.63471 217.71 cv
-7.63471 302.683 61.3282 371.644 146.301 371.644 cv
231.272 371.644 300.235 302.683 300.235 217.71 cv
.86759 .68628 .0862883 .150994 cmyk
f
298.059 217.71 mo
298.059 133.94 230.07 65.9521 146.301 65.9521 cv
62.5293 65.9521 -5.45699 133.94 -5.45699 217.71 cv
-5.45699 301.48 62.5293 369.469 146.301 369.469 cv
230.07 369.469 298.059 301.48 298.059 217.71 cv
.864772 .682371 .08472 .148249 cmyk
f
295.882 217.71 mo
295.882 135.142 228.869 68.1289 146.301 68.1289 cv
63.7305 68.1289 -3.28129 135.142 -3.28129 217.71 cv
-3.28129 300.279 63.7305 367.291 146.301 367.291 cv
228.869 367.291 295.882 300.279 295.882 217.71 cv
.861955 .678462 .0831517 .145504 cmyk
f
293.705 217.71 mo
293.705 136.343 227.667 70.3057 146.301 70.3057 cv
64.9327 70.3057 -1.10357 136.343 -1.10357 217.71 cv
-1.10357 299.077 64.9327 365.113 146.301 365.113 cv
227.667 365.113 293.705 299.077 293.705 217.71 cv
.859138 .674553 .0815833 .14276 cmyk
f
291.528 217.71 mo
291.528 137.545 226.466 72.4824 146.301 72.4824 cv
66.1347 72.4824 1.0732 137.545 1.0732 217.71 cv
1.0732 297.875 66.1347 362.938 146.301 362.938 cv
226.466 362.938 291.528 297.875 291.528 217.71 cv
.856321 .670644 .080015 .140015 cmyk
f
289.352 217.71 mo
289.352 138.747 225.264 74.6597 146.301 74.6597 cv
67.3359 74.6597 3.24997 138.747 3.24997 217.71 cv
3.24997 296.674 67.3359 360.76 146.301 360.76 cv
225.264 360.76 289.352 296.674 289.352 217.71 cv
.853503 .666736 .0784467 .13727 cmyk
f
287.174 217.71 mo
287.174 139.948 224.063 76.8364 146.301 76.8364 cv
68.5381 76.8364 5.42674 139.948 5.42674 217.71 cv
5.42674 295.473 68.5381 358.584 146.301 358.584 cv
224.063 358.584 287.174 295.473 287.174 217.71 cv
.850686 .662827 .0768784 .134525 cmyk
f
284.998 217.71 mo
284.998 141.149 222.861 79.0137 146.301 79.0137 cv
69.7392 79.0137 7.60351 141.149 7.60351 217.71 cv
7.60351 294.271 69.7392 356.406 146.301 356.406 cv
222.861 356.406 284.998 294.271 284.998 217.71 cv
.847869 .658918 .0753101 .131781 cmyk
f
282.82 217.71 mo
282.82 142.352 221.659 81.1905 146.301 81.1905 cv
70.9414 81.1905 9.78028 142.352 9.78028 217.71 cv
9.78028 293.069 70.9414 354.229 146.301 354.229 cv
221.659 354.229 282.82 293.069 282.82 217.71 cv
.845052 .655009 .0737417 .129036 cmyk
f
280.643 217.71 mo
280.643 143.553 220.457 83.3672 146.301 83.3672 cv
72.1426 83.3672 11.957 143.553 11.957 217.71 cv
11.957 291.867 72.1426 352.053 146.301 352.053 cv
220.457 352.053 280.643 291.867 280.643 217.71 cv
.842234 .6511 .0721734 .126291 cmyk
f
278.467 217.71 mo
278.467 144.755 219.256 85.544 146.301 85.544 cv
73.3448 85.544 14.1348 144.755 14.1348 217.71 cv
14.1348 290.666 73.3448 349.876 146.301 349.876 cv
219.256 349.876 278.467 290.666 278.467 217.71 cv
.839417 .647191 .0706051 .123546 cmyk
f
276.289 217.71 mo
276.289 145.956 218.055 87.7212 146.301 87.7212 cv
74.5459 87.7212 16.3115 145.956 16.3115 217.71 cv
16.3115 289.465 74.5459 347.699 146.301 347.699 cv
218.055 347.699 276.289 289.465 276.289 217.71 cv
.8366 .643282 .0690367 .120801 cmyk
f
274.112 217.71 mo
274.112 147.158 216.852 89.8985 146.301 89.8985 cv
75.7481 89.8985 18.4883 147.158 18.4883 217.71 cv
18.4883 288.263 75.7481 345.521 146.301 345.521 cv
216.852 345.521 274.112 288.263 274.112 217.71 cv
.833783 .639373 .0674684 .118057 cmyk
f
271.936 217.71 mo
271.936 148.359 215.65 92.0751 146.301 92.0751 cv
76.9492 92.0751 20.6651 148.359 20.6651 217.71 cv
20.6651 287.06 76.9492 343.345 146.301 343.345 cv
215.65 343.345 271.936 287.06 271.936 217.71 cv
.830966 .635464 .0659001 .115312 cmyk
f
269.759 217.71 mo
269.759 149.562 214.449 94.2519 146.301 94.2519 cv
78.1504 94.2519 22.8418 149.562 22.8418 217.71 cv
22.8418 285.859 78.1504 341.168 146.301 341.168 cv
214.449 341.168 269.759 285.859 269.759 217.71 cv
.828148 .631555 .0643318 .112567 cmyk
f
267.582 217.71 mo
267.582 150.763 213.248 96.4287 146.301 96.4287 cv
79.3526 96.4287 25.0196 150.763 25.0196 217.71 cv
25.0196 284.658 79.3526 338.991 146.301 338.991 cv
213.248 338.991 267.582 284.658 267.582 217.71 cv
.825331 .627647 .0627635 .109822 cmyk
f
265.405 217.71 mo
265.405 151.965 212.046 98.6054 146.301 98.6054 cv
80.5547 98.6054 27.1953 151.965 27.1953 217.71 cv
27.1953 283.456 80.5547 336.814 146.301 336.814 cv
212.046 336.814 265.405 283.456 265.405 217.71 cv
.822514 .623738 .0611951 .107077 cmyk
f
263.228 217.71 mo
263.228 153.166 210.844 100.782 146.301 100.782 cv
81.7558 100.782 29.3731 153.166 29.3731 217.71 cv
29.3731 282.255 81.7558 334.637 146.301 334.637 cv
210.844 334.637 263.228 282.255 263.228 217.71 cv
.819697 .619829 .0596268 .104333 cmyk
f
261.051 217.71 mo
261.051 154.368 209.643 102.959 146.301 102.959 cv
82.957 102.959 31.5498 154.368 31.5498 217.71 cv
31.5498 281.053 82.957 332.461 146.301 332.461 cv
209.643 332.461 261.051 281.053 261.051 217.71 cv
.816879 .61592 .0580585 .101588 cmyk
f
258.874 217.71 mo
258.874 155.569 208.441 105.136 146.301 105.136 cv
84.1592 105.136 33.7265 155.569 33.7265 217.71 cv
33.7265 279.852 84.1592 330.283 146.301 330.283 cv
208.441 330.283 258.874 279.852 258.874 217.71 cv
.814062 .612011 .0564902 .098843 cmyk
f
256.697 217.71 mo
256.697 156.771 207.239 107.313 146.301 107.313 cv
85.3613 107.313 35.9033 156.771 35.9033 217.71 cv
35.9033 278.649 85.3613 328.106 146.301 328.106 cv
207.239 328.106 256.697 278.649 256.697 217.71 cv
.811245 .608102 .0549219 .0960982 cmyk
f
254.52 217.71 mo
254.52 157.973 206.037 109.49 146.301 109.49 cv
86.5625 109.49 38.0801 157.973 38.0801 217.71 cv
38.0801 277.448 86.5625 325.93 146.301 325.93 cv
206.037 325.93 254.52 277.448 254.52 217.71 cv
.808428 .604193 .0533535 .0933534 cmyk
f
252.344 217.71 mo
252.344 159.175 204.836 111.667 146.301 111.667 cv
87.7647 111.667 40.2568 159.175 40.2568 217.71 cv
40.2568 276.246 87.7647 323.753 146.301 323.753 cv
204.836 323.753 252.344 276.246 252.344 217.71 cv
.805611 .600284 .0517852 .0906086 cmyk
f
250.167 217.71 mo
250.167 160.376 203.635 113.844 146.301 113.844 cv
88.9658 113.844 42.4336 160.376 42.4336 217.71 cv
42.4336 275.044 88.9658 321.576 146.301 321.576 cv
203.635 321.576 250.167 275.044 250.167 217.71 cv
.802793 .596375 .0502169 .0878638 cmyk
f
247.99 217.71 mo
247.99 161.578 202.433 116.021 146.301 116.021 cv
90.1679 116.021 44.6113 161.578 44.6113 217.71 cv
44.6113 273.843 90.1679 319.399 146.301 319.399 cv
202.433 319.399 247.99 273.843 247.99 217.71 cv
.799976 .592466 .0486485 .085119 cmyk
f
245.812 217.71 mo
245.812 162.779 201.231 118.197 146.301 118.197 cv
91.3692 118.197 46.7871 162.779 46.7871 217.71 cv
46.7871 272.641 91.3692 317.222 146.301 317.222 cv
201.231 317.222 245.812 272.641 245.812 217.71 cv
.797159 .588557 .0470802 .0823743 cmyk
f
243.637 217.71 mo
243.637 163.98 200.029 120.374 146.301 120.374 cv
92.5703 120.374 48.9649 163.98 48.9649 217.71 cv
48.9649 271.439 92.5703 315.045 146.301 315.045 cv
200.029 315.045 243.637 271.439 243.637 217.71 cv
.794342 .584648 .0455119 .0796295 cmyk
f
241.459 217.71 mo
241.459 165.183 198.828 122.551 146.301 122.551 cv
93.7724 122.551 51.1416 165.183 51.1416 217.71 cv
51.1416 270.238 93.7724 312.869 146.301 312.869 cv
198.828 312.869 241.459 270.238 241.459 217.71 cv
.791524 .58074 .0439436 .0768847 cmyk
f
239.282 217.71 mo
239.282 166.385 197.626 124.728 146.301 124.728 cv
94.9746 124.728 53.3184 166.385 53.3184 217.71 cv
53.3184 269.036 94.9746 310.691 146.301 310.691 cv
197.626 310.691 239.282 269.036 239.282 217.71 cv
.788707 .576831 .0423753 .0741399 cmyk
f
237.105 217.71 mo
237.105 167.586 196.425 126.905 146.301 126.905 cv
96.1758 126.905 55.4952 167.586 55.4952 217.71 cv
55.4952 267.834 96.1758 308.515 146.301 308.515 cv
196.425 308.515 237.105 267.834 237.105 217.71 cv
.78589 .572922 .0408069 .0713951 cmyk
f
234.929 217.71 mo
234.929 168.787 195.223 129.082 146.301 129.082 cv
97.3769 129.082 57.6718 168.787 57.6718 217.71 cv
57.6718 266.633 97.3769 306.338 146.301 306.338 cv
195.223 306.338 234.929 266.633 234.929 217.71 cv
.783073 .569013 .0392386 .0686503 cmyk
f
232.752 217.71 mo
232.752 169.989 194.021 131.259 146.301 131.259 cv
98.5791 131.259 59.8497 169.989 59.8497 217.71 cv
59.8497 265.432 98.5791 304.161 146.301 304.161 cv
194.021 304.161 232.752 265.432 232.752 217.71 cv
.780256 .565104 .0376703 .0659055 cmyk
f
230.575 217.71 mo
230.575 171.191 192.819 133.436 146.301 133.436 cv
99.7803 133.436 62.0263 171.191 62.0263 217.71 cv
62.0263 264.229 99.7803 301.984 146.301 301.984 cv
192.819 301.984 230.575 264.229 230.575 217.71 cv
.777438 .561195 .0361019 .0631607 cmyk
f
228.398 217.71 mo
228.398 172.393 191.618 135.613 146.301 135.613 cv
100.982 135.613 64.2031 172.393 64.2031 217.71 cv
64.2031 263.028 100.982 299.807 146.301 299.807 cv
191.618 299.807 228.398 263.028 228.398 217.71 cv
.774621 .557286 .0345336 .0604159 cmyk
f
226.221 217.71 mo
226.221 173.594 190.416 137.79 146.301 137.79 cv
102.185 137.79 66.3799 173.594 66.3799 217.71 cv
66.3799 261.826 102.185 297.63 146.301 297.63 cv
190.416 297.63 226.221 261.826 226.221 217.71 cv
.771804 .553377 .0329653 .0576711 cmyk
f
224.044 217.71 mo
224.044 174.796 189.215 139.967 146.301 139.967 cv
103.386 139.967 68.5566 174.796 68.5566 217.71 cv
68.5566 260.625 103.386 295.453 146.301 295.453 cv
189.215 295.453 224.044 260.625 224.044 217.71 cv
.768987 .549468 .031397 .0549263 cmyk
f
221.867 217.71 mo
221.867 175.998 188.014 142.144 146.301 142.144 cv
104.588 142.144 70.7343 175.998 70.7343 217.71 cv
70.7343 259.423 104.588 293.276 146.301 293.276 cv
188.014 293.276 221.867 259.423 221.867 217.71 cv
.766169 .545559 .0298287 .0521815 cmyk
f
219.69 217.71 mo
219.69 177.199 186.811 144.32 146.301 144.32 cv
105.789 144.32 72.9102 177.199 72.9102 217.71 cv
72.9102 258.222 105.789 291.1 146.301 291.1 cv
186.811 291.1 219.69 258.222 219.69 217.71 cv
.763352 .54165 .0282604 .0494367 cmyk
f
217.513 217.71 mo
217.513 178.4 185.609 146.497 146.301 146.497 cv
106.991 146.497 75.0869 178.4 75.0869 217.71 cv
75.0869 257.02 106.991 288.922 146.301 288.922 cv
185.609 288.922 217.513 257.02 217.513 217.71 cv
.760535 .537742 .026692 .046692 cmyk
f
215.336 217.71 mo
215.336 179.602 184.408 148.674 146.301 148.674 cv
108.192 148.674 77.2646 179.602 77.2646 217.71 cv
77.2646 255.818 108.192 286.745 146.301 286.745 cv
184.408 286.745 215.336 255.818 215.336 217.71 cv
.757718 .533833 .0251237 .0439472 cmyk
f
213.159 217.71 mo
213.159 180.805 183.207 150.852 146.301 150.852 cv
109.394 150.852 79.4414 180.805 79.4414 217.71 cv
79.4414 254.617 109.394 284.568 146.301 284.568 cv
183.207 284.568 213.159 254.617 213.159 217.71 cv
.754901 .529924 .0235554 .0412024 cmyk
f
210.982 217.71 mo
210.982 182.006 182.005 153.028 146.301 153.028 cv
110.596 153.028 81.6182 182.006 81.6182 217.71 cv
81.6182 253.415 110.596 282.392 146.301 282.392 cv
182.005 282.392 210.982 253.415 210.982 217.71 cv
.752083 .526015 .0219871 .0384576 cmyk
f
208.806 217.71 mo
208.806 183.207 180.803 155.205 146.301 155.205 cv
111.797 155.205 83.795 183.207 83.795 217.71 cv
83.795 252.213 111.797 280.215 146.301 280.215 cv
180.803 280.215 208.806 252.213 208.806 217.71 cv
.749266 .522106 .0204188 .0357128 cmyk
f
206.629 217.71 mo
206.629 184.409 179.602 157.382 146.301 157.382 cv
112.999 157.382 85.9717 184.409 85.9717 217.71 cv
85.9717 251.012 112.999 278.038 146.301 278.038 cv
179.602 278.038 206.629 251.012 206.629 217.71 cv
.746449 .518197 .0188504 .032968 cmyk
f
204.452 217.71 mo
204.452 185.611 178.399 159.559 146.301 159.559 cv
114.2 159.559 88.1495 185.611 88.1495 217.71 cv
88.1495 249.81 114.2 275.861 146.301 275.861 cv
178.399 275.861 204.452 249.81 204.452 217.71 cv
.743632 .514288 .0172821 .0302233 cmyk
f
202.274 217.71 mo
202.274 186.812 177.198 161.735 146.301 161.735 cv
115.402 161.735 90.3262 186.812 90.3262 217.71 cv
90.3262 248.608 115.402 273.685 146.301 273.685 cv
177.198 273.685 202.274 248.608 202.274 217.71 cv
.740814 .510379 .0157138 .0274785 cmyk
f
200.098 217.71 mo
200.098 188.014 175.996 163.912 146.301 163.912 cv
116.603 163.912 92.5019 188.014 92.5019 217.71 cv
92.5019 247.406 116.603 271.507 146.301 271.507 cv
175.996 271.507 200.098 247.406 200.098 217.71 cv
.737997 .50647 .0141454 .0247337 cmyk
f
197.921 217.71 mo
197.921 189.216 174.795 166.09 146.301 166.09 cv
117.806 166.09 94.6796 189.216 94.6796 217.71 cv
94.6796 246.205 117.806 269.33 146.301 269.33 cv
174.795 269.33 197.921 246.205 197.921 217.71 cv
.73518 .502561 .0125771 .0219889 cmyk
f
195.744 217.71 mo
195.744 190.418 173.593 168.267 146.301 168.267 cv
119.007 168.267 96.8564 190.418 96.8564 217.71 cv
96.8564 245.003 119.007 267.153 146.301 267.153 cv
173.593 267.153 195.744 245.003 195.744 217.71 cv
.732363 .498653 .0110088 .0192441 cmyk
f
193.567 217.71 mo
193.567 191.619 172.392 170.443 146.301 170.443 cv
120.209 170.443 99.0332 191.619 99.0332 217.71 cv
99.0332 243.802 120.209 264.977 146.301 264.977 cv
172.392 264.977 193.567 243.802 193.567 217.71 cv
.729545 .494744 .00944048 .0164993 cmyk
f
191.391 217.71 mo
191.391 192.82 171.189 172.62 146.301 172.62 cv
121.411 172.62 101.21 192.82 101.21 217.71 cv
101.21 242.6 121.411 262.8 146.301 262.8 cv
171.189 262.8 191.391 242.6 191.391 217.71 cv
.726728 .490835 .00787216 .0137545 cmyk
f
189.214 217.71 mo
189.214 194.023 169.988 174.797 146.301 174.797 cv
122.612 174.797 103.387 194.023 103.387 217.71 cv
103.387 241.398 122.612 260.622 146.301 260.622 cv
169.988 260.622 189.214 241.398 189.214 217.71 cv
.723911 .486926 .00630385 .0110097 cmyk
f
187.037 217.71 mo
187.037 195.225 168.787 176.975 146.301 176.975 cv
123.814 176.975 105.563 195.225 105.563 217.71 cv
105.563 240.196 123.814 258.445 146.301 258.445 cv
168.787 258.445 187.037 240.196 187.037 217.71 cv
.721094 .483017 .00473553 .0082649 cmyk
f
184.859 217.71 mo
184.859 196.426 167.585 179.151 146.301 179.151 cv
125.016 179.151 107.741 196.426 107.741 217.71 cv
107.741 238.995 125.016 256.269 146.301 256.269 cv
167.585 256.269 184.859 238.995 184.859 217.71 cv
.718277 .479108 .00316721 .00552011 cmyk
f
182.683 217.71 mo
182.683 197.627 166.383 181.328 146.301 181.328 cv
126.217 181.328 109.918 197.627 109.918 217.71 cv
109.918 237.794 126.217 254.092 146.301 254.092 cv
166.383 254.092 182.683 237.794 182.683 217.71 cv
.715459 .475199 .00159883 .00277531 cmyk
f
180.506 217.71 mo
180.506 198.829 165.182 183.505 146.301 183.505 cv
127.419 183.505 112.095 198.829 112.095 217.71 cv
112.095 236.592 127.419 251.915 146.301 251.915 cv
165.182 251.915 180.506 236.592 180.506 217.71 cv
.712642 .47129 3.05175e-05 3.05175e-05 cmyk
f
grestore
6.53134 8.15561 mo
9.53254 4.86743 13.3988 2.38249 17.7695 1.0629 cv
13.959 3.32962 10.2088 5.69703 6.53134 8.15561 cv
false sop
.996078 .839216 .12549 .223529 cmyk
f
2.91947 13.2711 mo
3.90862 11.4139 5.1245 9.69698 6.53134 8.15561 cv
10.2088 5.69703 13.959 3.32962 17.7695 1.0629 cv
19.7247 .472589 21.7826 .115078 23.9072 .0234969 cv
16.6782 4.09862 9.67948 8.51963 2.91947 13.2711 cv
280.541 7.14198 mo
277.344 5.09901 274.097 3.12655 270.804 1.22732 cv
274.503 2.4342 277.824 4.48101 280.541 7.14198 cv
.996078 .835294 .12549 .219608 cmyk
f
1.26691 17.1254 mo
1.71112 15.7873 2.26584 14.4983 2.91947 13.2711 cv
9.67948 8.51963 16.6782 4.09862 23.9072 .0234969 cv
24.2697 .00786814 24.6336 0 25 0 cv
28.448 0 li
19.0055 5.12582 9.91844 10.8574 1.26691 17.1254 cv
284.687 12.4732 mo
278.077 8.00524 271.244 3.85122 264.201 .0260246 cv
266.495 .130184 268.711 .544301 270.804 1.22732 cv
274.097 3.12655 277.344 5.09901 280.541 7.14198 cv
282.151 8.719 283.548 10.5116 284.687 12.4732 cv
.992157 .831372 .12549 .215686 cmyk
f
.413841 20.4486 mo
.623161 19.3119 .909268 18.2028 1.26691 17.1254 cv
9.91844 10.8574 19.0055 5.12582 28.448 0 cv
33.0817 0 li
21.6332 5.96979 10.7155 12.8147 .413841 20.4486 cv
286.52 16.3727 mo
277.908 10.3612 268.889 4.886 259.519 0 cv
263.051 0 li
263.436 0 263.819 .00870887 264.201 .0260246 cv
271.244 3.85122 278.077 8.00524 284.687 12.4732 cv
285.405 13.7099 286.02 15.0135 286.52 16.3727 cv
.984314 .827451 .121569 .215686 cmyk
f
.0479535 23.4396 mo
.110507 22.4252 .233688 21.4268 .413841 20.4486 cv
10.7155 12.8147 21.6332 5.96979 33.0817 0 cv
37.8705 0 li
24.513 6.66955 11.8685 14.5234 .0479535 23.4396 cv
287.492 19.7239 mo
277.142 12.3264 266.199 5.72655 254.73 0 cv
259.519 0 li
268.889 4.886 277.908 10.3612 286.52 16.3727 cv
286.919 17.4562 287.245 18.576 287.492 19.7239 cv
.980392 .819608 .121569 .211765 cmyk
f
0 26.2098 mo
0 24.9995 li
0 24.4756 .0161394 23.9556 .0479535 23.4396 cv
11.8685 14.5234 24.513 6.66955 37.8705 0 cv
42.8359 0 li
27.6114 7.2539 13.2617 16.0599 0 26.2098 cv
287.95 22.7378 mo
276.002 14.0391 263.229 6.41515 249.765 0 cv
254.73 0 li
266.199 5.72655 277.142 12.3264 287.492 19.7239 cv
287.704 20.7086 287.858 21.7138 287.95 22.7378 cv
.980392 .815686 .117647 .211765 cmyk
f
0 28.9589 mo
0 26.2098 li
13.2617 16.0599 27.6114 7.2539 42.8359 0 cv
48.006 0 li
30.8304 7.77343 14.7228 17.5285 0 28.9589 cv
288.051 25.5119 mo
274.579 15.5563 260.021 6.98175 244.595 0 cv
249.765 0 li
263.229 6.41515 276.002 14.0391 287.95 22.7378 cv
288.017 23.4827 288.051 24.2373 288.051 24.9995 cv
288.051 25.5119 li
.976471 .811765 .117647 .211765 cmyk
f
0 31.7222 mo
0 28.9589 li
14.7228 17.5285 30.8304 7.77343 48.006 0 cv
53.4116 0 li
34.1646 8.2301 16.2259 18.9368 0 31.7222 cv
288.051 28.2254 mo
273.046 16.9798 256.649 7.46609 239.189 0 cv
244.595 0 li
260.021 6.98175 274.579 15.5563 288.051 25.5119 cv
288.051 28.2254 li
.972549 .807843 .117647 .207843 cmyk
f
0 34.5007 mo
0 31.7222 li
16.2259 18.9368 34.1646 8.2301 53.4116 0 cv
59.0978 0 li
37.6485 8.60599 17.7744 20.2842 0 34.5007 cv
288.051 30.9522 mo
271.454 18.331 253.141 7.87935 233.503 0 cv
239.189 0 li
256.649 7.46609 273.046 16.9798 288.051 28.2254 cv
288.051 30.9522 li
.972549 .803922 .117647 .203922 cmyk
f
0 37.2966 mo
0 34.5007 li
17.7744 20.2842 37.6485 8.60599 59.0978 0 cv
65.1279 0 li
41.3296 8.88582 19.3737 21.5623 0 37.2966 cv
288.051 33.6941 mo
269.817 19.6251 249.422 8.19513 227.473 0 cv
233.503 0 li
253.141 7.87935 271.454 18.331 288.051 30.9522 cv
288.051 33.6941 li
.968627 .796078 .117647 .2 cmyk
f
0 40.1098 mo
0 37.2966 li
19.3737 21.5623 41.3296 8.88582 65.1279 0 cv
71.5833 0 li
45.24 9.04819 21.0517 22.7439 0 40.1098 cv
288.051 36.4518 mo
268.092 20.8184 245.478 8.40155 221.018 0 cv
227.473 0 li
249.422 8.19513 269.817 19.6251 288.051 33.6941 cv
288.051 36.4518 li
.960784 .792157 .113725 .2 cmyk
f
0 42.9401 mo
0 40.1098 li
21.0517 22.7439 45.24 9.04819 71.5833 0 cv
78.5841 0 li
49.4578 9.05929 22.8283 23.8062 0 42.9401 cv
288.051 39.2248 mo
266.263 21.8945 241.226 8.46314 214.016 0 cv
221.018 0 li
245.478 8.40155 268.092 20.8184 288.051 36.4518 cv
288.051 39.2248 li
.956863 .788235 .113725 .196078 cmyk
f
0 45.7892 mo
0 42.9401 li
22.8283 23.8062 49.4578 9.05929 78.5841 0 cv
86.3244 0 li
54.1012 8.86796 24.744 24.7095 0 45.7892 cv
288.051 42.0142 mo
279.108 34.7888 269.595 28.2263 259.604 22.414 cv
259.801 21.2495 li
259.801 21.2495 258.473 20.8011 255.669 20.1771 cv
240.227 11.6044 223.665 4.78543 206.276 0 cv
214.016 0 li
241.226 8.46314 266.263 21.8945 288.051 39.2248 cv
288.051 42.0142 li
.956863 .784314 .113725 .196078 cmyk
f
0 48.659 mo
0 45.7892 li
24.744 24.7095 54.1012 8.86796 86.3244 0 cv
95.1476 0 li
59.363 8.38504 26.8805 25.3719 0 48.659 cv
288.051 44.8214 mo
279.003 37.3935 269.368 30.6634 259.217 24.709 cv
259.604 22.414 li
269.595 28.2263 279.108 34.7888 288.051 42.0142 cv
288.051 44.8214 li
255.669 20.1771 mo
253.907 19.7851 251.563 19.3238 248.598 18.8607 cv
232.579 10.5984 215.43 4.21229 197.454 0 cv
206.276 0 li
223.665 4.78543 240.227 11.6044 255.669 20.1771 cv
.952941 .780392 .109804 .196078 cmyk
f
0 51.55 mo
0 48.659 li
26.8805 25.3719 59.363 8.38504 95.1476 0 cv
105.756 0 li
65.6796 7.42492 29.3843 25.6543 0 51.55 cv
288.051 47.6472 mo
278.907 40.017 269.132 33.1037 258.829 27.0076 cv
259.217 24.709 li
269.368 30.6634 279.003 37.3935 288.051 44.8214 cv
288.051 47.6472 li
248.598 18.8607 mo
246.64 18.5551 244.411 18.2485 241.903 17.9607 cv
224.663 9.68829 206.2 3.58585 186.845 0 cv
197.454 0 li
215.43 4.21229 232.579 10.5984 248.598 18.8607 cv
.94902 .772549 .109804 .192157 cmyk
f
0 54.4623 mo
0 51.55 li
29.3843 25.6543 65.6796 7.42492 105.756 0 cv
120.264 0 li
74.3281 5.44483 32.7286 25.1063 0 54.4623 cv
288.051 50.492 mo
278.805 42.6456 268.908 35.5555 258.441 29.3089 cv
258.829 27.0076 li
269.132 33.1037 278.907 40.017 288.051 47.6472 cv
288.051 50.492 li
241.903 17.9607 mo
239.891 17.73 237.698 17.5112 235.319 17.3145 cv
215.677 8.56915 194.511 2.62822 172.338 0 cv
186.845 0 li
206.2 3.58585 224.663 9.68829 241.903 17.9607 cv
.94902 .768627 .105882 .188235 cmyk
f
0 57.3975 mo
0 54.4623 li
32.7286 25.1063 74.3281 5.44483 120.264 0 cv
172.338 0 li
194.511 2.62822 215.677 8.56915 235.319 17.3145 cv
233.261 17.1444 231.066 16.9909 228.726 16.8603 cv
203.308 6.40904 175.473 .644512 146.301 .644512 cv
89.9517 .644512 38.5969 22.1502 0 57.3975 cv
288.051 53.3572 mo
278.713 45.2949 268.675 38.0106 258.052 31.6139 cv
258.441 29.3089 li
268.908 35.5555 278.805 42.6456 288.051 50.492 cv
288.051 53.3572 li
.945098 .764706 .105882 .188235 cmyk
f
0 60.3576 mo
0 57.3975 li
38.5969 22.1502 89.9517 .644512 146.301 .644512 cv
175.473 .644512 203.308 6.40904 228.726 16.8603 cv
226.617 16.7425 224.389 16.6434 222.045 16.5677 cv
198.484 7.6826 172.958 2.82128 146.301 2.82128 cv
89.8003 2.82128 38.3709 24.6627 0 60.3576 cv
288.051 56.2437 mo
278.615 47.952 268.452 40.4777 257.662 33.9225 cv
258.052 31.6139 li
268.675 38.0106 278.713 45.2949 288.051 53.3572 cv
288.051 56.2437 li
.937255 .760784 .105882 .184314 cmyk
f
0 63.3444 mo
0 60.3576 li
38.3709 24.6627 89.8003 2.82128 146.301 2.82128 cv
172.958 2.82128 198.484 7.6826 222.045 16.5677 cv
219.868 16.4974 217.589 16.4475 215.205 16.4214 cv
193.59 9.01586 170.416 4.999 146.301 4.999 cv
89.6414 4.999 38.1346 27.1876 0 63.3444 cv
288.051 59.1531 mo
278.523 50.6281 268.226 42.9511 257.272 36.2352 cv
257.662 33.9225 li
268.452 40.4777 278.615 47.952 288.051 56.2437 cv
288.051 59.1531 li
.933333 .756863 .101961 .180392 cmyk
f
0 66.3574 mo
0 63.3444 li
38.1346 27.1876 89.6414 4.999 146.301 4.999 cv
170.416 4.999 193.59 9.01586 215.205 16.4214 cv
213.965 16.4079 212.697 16.4009 211.4 16.4009 cv
210.342 16.4009 209.305 16.4213 208.29 16.4615 cv
188.692 10.426 167.871 7.1753 146.301 7.1753 cv
89.4768 7.1753 37.888 29.7246 0 66.3574 cv
288.051 62.0855 mo
278.432 53.318 268.002 45.4329 256.881 38.5508 cv
257.272 36.2352 li
268.226 42.9511 278.523 50.6281 288.051 59.1531 cv
288.051 62.0855 li
.933333 .74902 .101961 .180392 cmyk
f
0 69.3994 mo
0 66.3574 li
37.888 29.7246 89.4768 7.1753 146.301 7.1753 cv
167.871 7.1753 188.692 10.426 208.29 16.4615 cv
206.189 16.5449 204.18 16.7135 202.259 16.9623 cv
184.451 12.0037 165.682 9.35207 146.301 9.35207 cv
89.3059 9.35207 37.6297 32.2773 0 69.3994 cv
288.051 65.0437 mo
278.343 56.025 267.781 47.9248 256.49 40.871 cv
256.881 38.5508 li
268.002 45.4329 278.432 53.318 288.051 62.0855 cv
288.051 65.0437 li
.929412 .745098 .101961 .180392 cmyk
f
0 72.4725 mo
0 69.3994 li
37.6297 32.2773 89.3059 9.35207 146.301 9.35207 cv
165.682 9.35207 184.451 12.0037 202.259 16.9623 cv
200.483 17.1925 198.781 17.4913 197.148 17.8551 cv
180.88 13.7238 163.847 11.5293 146.301 11.5293 cv
89.1236 11.5293 37.3602 34.8402 0 72.4725 cv
288.051 68.0282 mo
278.257 58.7493 267.561 50.426 256.098 43.1952 cv
256.49 40.871 li
267.781 47.9248 278.343 56.025 288.051 65.0437 cv
288.051 68.0282 li
.92549 .741176 .101961 .176471 cmyk
f
0 75.5794 mo
0 72.4725 li
37.3602 34.8402 89.1236 11.5293 146.301 11.5293 cv
163.847 11.5293 180.88 13.7238 197.148 17.8551 cv
195.633 18.1925 194.177 18.5858 192.778 19.0319 cv
177.847 15.5486 162.288 13.7066 146.301 13.7066 cv
88.9366 13.7066 37.0764 37.4244 0 75.5794 cv
288.051 71.041 mo
278.174 61.4932 267.343 52.9368 255.705 45.5238 cv
256.098 43.1952 li
267.561 50.426 278.257 58.7493 288.051 68.0282 cv
288.051 71.041 li
.921569 .737255 .101961 .172549 cmyk
f
0 78.7197 mo
0 75.5794 li
37.0764 37.4244 88.9366 13.7066 146.301 13.7066 cv
162.288 13.7066 177.847 15.5486 192.778 19.0319 cv
191.473 19.448 190.216 19.9101 189.004 20.4155 cv
175.241 17.4476 160.948 15.8829 146.301 15.8829 cv
88.7393 15.8829 36.7788 40.0224 0 78.7197 cv
288.051 74.0828 mo
278.096 64.2566 267.125 55.4572 255.311 47.8559 cv
255.705 45.5238 li
267.343 52.9368 278.174 61.4932 288.051 71.041 cv
288.051 74.0828 li
.921569 .733333 .0980392 .172549 cmyk
f
0 81.8984 mo
0 78.7197 li
36.7788 40.0224 88.7393 15.8829 146.301 15.8829 cv
160.948 15.8829 175.241 17.4476 189.004 20.4155 cv
187.866 20.8905 186.768 21.4036 185.707 21.9532 cv
172.968 19.4001 159.787 18.0596 146.301 18.0596 cv
88.533 18.0596 36.4662 42.6396 0 81.8984 cv
288.051 77.1579 mo
278.018 67.0405 266.913 57.9904 254.917 50.1935 cv
255.311 47.8559 li
267.125 55.4572 278.096 64.2566 288.051 74.0828 cv
288.051 77.1579 li
.913725 .72549 .0980392 .168627 cmyk
f
0 85.1173 mo
0 81.8984 li
36.4662 42.6396 88.533 18.0596 146.301 18.0596 cv
159.787 18.0596 172.968 19.4001 185.707 21.9532 cv
184.704 22.4726 183.735 23.0242 182.796 23.6068 cv
170.967 21.3936 158.769 20.2363 146.301 20.2363 cv
88.3116 20.2363 36.1373 45.2706 0 85.1173 cv
288.051 80.2665 mo
277.943 69.8434 266.704 60.5374 254.521 52.5356 cv
254.917 50.1935 li
266.913 57.9904 278.018 67.0405 288.051 77.1579 cv
288.051 80.2665 li
.909804 .721569 .0941176 .164706 cmyk
f
0 88.3803 mo
0 85.1173 li
36.1373 45.2706 88.3116 20.2363 146.301 20.2363 cv
158.769 20.2363 170.967 21.3936 182.796 23.6068 cv
181.904 24.1607 181.04 24.7423 180.201 25.3502 cv
169.191 23.4207 157.861 22.4141 146.301 22.4141 cv
88.082 22.4141 35.7898 47.9282 0 88.3803 cv
288.051 83.4113 mo
277.874 72.6744 266.495 63.0943 254.125 54.883 cv
254.521 52.5356 li
266.704 60.5374 277.943 69.8434 288.051 80.2665 cv
288.051 83.4113 li
.909804 .717647 .0941176 .164706 cmyk
f
0 91.6887 mo
0 88.3803 li
35.7898 47.9282 88.082 22.4141 146.301 22.4141 cv
157.861 22.4141 169.191 23.4207 180.201 25.3502 cv
179.402 25.9304 178.624 26.5355 177.871 27.1622 cv
167.598 25.4711 157.049 24.5908 146.301 24.5908 cv
87.8398 24.5908 35.4232 50.6062 0 91.6887 cv
288.051 86.5953 mo
277.807 75.5259 266.295 65.667 253.728 57.235 cv
254.125 54.883 li
266.495 63.0943 277.874 72.6744 288.051 83.4113 cv
288.051 86.5953 li
.905882 .713725 .0941176 .164706 cmyk
f
0 95.0471 mo
0 91.6887 li
35.4232 50.6062 87.8398 24.5908 146.301 24.5908 cv
157.049 24.5908 167.598 25.4711 177.871 27.1622 cv
177.147 27.764 176.443 28.3869 175.758 29.0292 cv
166.157 27.5405 156.317 26.7675 146.301 26.7675 cv
87.5851 26.7675 35.0351 53.3105 0 95.0471 cv
288.051 89.8218 mo
277.749 78.4114 266.091 68.251 253.331 59.5928 cv
253.728 57.235 li
266.295 65.667 277.807 75.5259 288.051 86.5953 cv
288.051 89.8218 li
.901961 .709804 .0901961 .160784 cmyk
f
0 98.4607 mo
0 95.0471 li
35.0351 53.3105 87.5851 26.7675 146.301 26.7675 cv
156.317 26.7675 166.157 27.5405 175.758 29.0292 cv
175.098 29.6487 174.457 30.2853 173.83 30.9403 cv
164.845 29.6257 155.65 28.9443 146.301 28.9443 cv
87.3199 28.9443 34.6238 56.0466 0 98.4607 cv
288.051 93.092 mo
277.222 80.7863 264.815 69.8982 251.151 60.7485 cv
252.356 61.0502 253.051 61.2509 253.051 61.2509 cv
253.331 59.5928 li
266.091 68.251 277.749 78.4114 288.051 89.8218 cv
288.051 93.092 li
.898039 .701961 .0901961 .156863 cmyk
f
0 101.934 mo
0 98.4607 li
34.6238 56.0466 87.3199 28.9443 146.301 28.9443 cv
155.65 28.9443 164.845 29.6257 173.83 30.9403 cv
173.225 31.5737 172.634 32.2233 172.058 32.888 cv
163.638 31.7238 155.039 31.122 146.301 31.122 cv
87.0316 31.122 34.1866 58.8047 0 101.934 cv
288.051 96.4126 mo
275.723 82.0241 261.244 69.5289 245.115 59.4336 cv
247.63 59.9035 249.74 60.3953 251.151 60.7485 cv
264.815 69.8982 277.222 80.7863 288.051 93.092 cv
288.051 96.4126 li
.898039 .698039 .0862745 .156863 cmyk
f
0 105.471 mo
0 101.934 li
34.1866 58.8047 87.0316 31.122 146.301 31.122 cv
155.039 31.122 163.638 31.7238 172.058 32.888 cv
171.499 33.5326 170.953 34.1913 170.42 34.8637 cv
162.524 33.8305 154.477 33.2983 146.301 33.2983 cv
86.7293 33.2983 33.7213 61.5981 0 105.471 cv
288.051 99.7854 mo
274.395 83.3911 257.957 69.4052 239.455 58.5475 cv
241.469 58.798 243.387 59.1107 245.115 59.4336 cv
261.244 69.5289 275.723 82.0241 288.051 96.4126 cv
288.051 99.7854 li
.890196 .694118 .0862745 .152941 cmyk
f
0 109.079 mo
0 105.471 li
33.7213 61.5981 86.7293 33.2983 146.301 33.2983 cv
154.477 33.2983 162.524 33.8305 170.42 34.8637 cv
170.109 35.2547 169.802 35.6508 169.5 36.0508 cv
169.296 36.3185 169.098 36.5892 168.904 36.8648 cv
161.495 35.9465 153.957 35.4746 146.301 35.4746 cv
86.4007 35.4746 33.2237 64.4193 0 109.079 cv
288.051 103.216 mo
273.246 84.9128 254.976 69.5347 234.233 58.0783 cv
236.004 58.1703 237.762 58.3369 239.455 58.5475 cv
257.957 69.4052 274.395 83.3911 288.051 99.7854 cv
288.051 103.216 li
.886274 .690196 .0862745 .14902 cmyk
f
0 112.767 mo
0 109.079 li
33.2237 64.4193 86.4007 35.4746 146.301 35.4746 cv
153.957 35.4746 161.495 35.9465 168.904 36.8648 cv
168.441 37.522 168.004 38.2014 167.592 38.8994 cv
160.612 38.0762 153.502 37.6519 146.301 37.6519 cv
86.0549 37.6519 32.6915 67.2863 0 112.767 cv
288.051 106.709 mo
272.29 86.6148 252.359 69.9565 229.554 58.0351 cv
230.132 58.0112 230.715 57.9995 231.301 57.9995 cv
232.275 57.9995 233.256 58.0275 234.233 58.0783 cv
254.976 69.5347 273.246 84.9128 288.051 103.216 cv
288.051 106.709 li
.886274 .686274 .0862745 .14902 cmyk
f
0 116.542 mo
0 112.767 li
32.6915 67.2863 86.0549 37.6519 146.301 37.6519 cv
153.502 37.6519 160.612 38.0762 167.592 38.8994 cv
167.197 39.5702 166.824 40.2582 166.473 40.9621 cv
159.852 40.2136 153.121 39.8291 146.301 39.8291 cv
85.6863 39.8291 32.1197 70.201 0 116.542 cv
288.051 110.272 mo
271.546 88.535 250.154 70.7053 225.523 58.4214 cv
226.827 58.2183 228.176 58.0921 229.554 58.0351 cv
252.359 69.9565 272.29 86.6148 288.051 106.709 cv
288.051 110.272 li
.882353 .678431 .0862745 .14902 cmyk
f
0 120.413 mo
0 116.542 li
32.1197 70.201 85.6863 39.8291 146.301 39.8291 cv
153.121 39.8291 159.852 40.2136 166.473 40.9621 cv
166.134 41.6427 165.814 42.3384 165.514 43.0459 cv
159.202 42.3583 152.795 42.0059 146.301 42.0059 cv
85.2852 42.0059 31.5029 73.1575 0 120.413 cv
288.051 113.91 mo
270.988 90.6575 248.345 71.7492 222.099 59.1703 cv
223.191 58.8538 224.338 58.6059 225.523 58.4214 cv
250.154 70.7053 271.546 88.535 288.051 110.272 cv
288.051 113.91 li
.878431 .67451 .0823529 .145098 cmyk
f
.263611 123.984 mo
.175786 123.951 .0877276 123.918 0 123.885 cv
0 120.413 li
31.5029 73.1575 85.2852 42.0059 146.301 42.0059 cv
152.795 42.0059 159.202 42.3583 165.514 43.0459 cv
165.222 43.7349 164.948 44.4364 164.69 45.147 cv
158.65 44.51 152.51 44.1826 146.301 44.1826 cv
85.03 44.1826 31.1432 75.9915 .263611 123.984 cv
288.051 117.634 mo
270.605 92.9748 246.887 73.0637 219.229 60.2238 cv
220.132 59.8117 221.093 59.4618 222.099 59.1703 cv
248.345 71.7492 270.988 90.6575 288.051 113.91 cv
288.051 117.634 li
.87451 .670588 .0823529 .145098 cmyk
f
2.35566 124.757 mo
1.65429 124.501 .958894 124.244 .263611 123.984 cv
31.1432 75.9915 85.03 44.1826 146.301 44.1826 cv
152.51 44.1826 158.65 44.51 164.69 45.147 cv
164.438 45.8435 164.203 46.5483 163.982 47.262 cv
158.17 46.6653 152.27 46.3594 146.301 46.3594 cv
85.9722 46.3594 32.8903 77.5935 2.35566 124.757 cv
288.051 121.452 mo
270.377 95.4878 245.754 74.62 216.87 61.537 cv
217.601 61.043 218.39 60.6067 219.229 60.2238 cv
246.887 73.0637 270.605 92.9748 288.051 117.634 cv
288.051 121.452 li
.87451 .666667 .0823529 .141176 cmyk
f
4.45838 125.516 mo
3.756 125.265 3.0521 125.011 2.35566 124.757 cv
32.8903 77.5935 85.9722 46.3594 146.301 46.3594 cv
152.27 46.3594 158.17 46.6653 163.982 47.262 cv
163.766 47.9639 163.563 48.6743 163.375 49.3894 cv
157.76 48.8259 152.063 48.5371 146.301 48.5371 cv
86.9151 48.5371 34.6472 79.1835 4.45838 125.516 cv
287.369 124.339 mo
269.647 97.6312 244.545 76.2359 214.98 63.0756 cv
215.553 62.5112 216.186 61.9987 216.87 61.537 cv
245.754 74.62 270.377 95.4878 288.051 121.452 cv
288.051 124.086 li
287.825 124.17 287.596 124.255 287.369 124.339 cv
.866667 .662745 .0784314 .137255 cmyk
f
6.57159 126.262 mo
5.86333 126.015 5.16076 125.767 4.45838 125.516 cv
34.6472 79.1835 86.9151 48.5371 146.301 48.5371 cv
152.063 48.5371 157.76 48.8259 163.375 49.3894 cv
163.189 50.0967 163.016 50.8084 162.856 51.5254 cv
157.409 50.9885 151.888 50.7139 146.301 50.7139 cv
87.8708 50.7139 36.4164 80.7754 6.57159 126.262 cv
285.265 125.108 mo
267.675 98.7751 242.794 77.7102 213.523 64.8115 cv
213.953 64.1846 214.44 63.6069 214.98 63.0756 cv
244.545 76.2359 269.647 97.6312 287.369 124.339 cv
286.669 124.598 285.971 124.853 285.265 125.108 cv
.862745 .654902 .0784314 .133333 cmyk
f
8.69532 126.994 mo
7.98378 126.751 7.27735 126.508 6.57159 126.262 cv
36.4164 80.7754 87.8708 50.7139 146.301 50.7139 cv
151.888 50.7139 157.409 50.9885 162.856 51.5254 cv
162.697 52.2362 162.55 52.9519 162.414 53.669 cv
157.112 53.1539 151.737 52.8902 146.301 52.8902 cv
88.8265 52.8902 38.1949 82.3542 8.69532 126.994 cv
283.151 125.863 mo
265.77 100.028 241.269 79.3746 212.467 66.7249 cv
212.763 66.0418 213.117 65.4049 213.523 64.8115 cv
242.794 77.7102 267.675 98.7751 285.265 125.108 cv
284.564 125.361 283.858 125.614 283.151 125.863 cv
.862745 .65098 .0745098 .133333 cmyk
f
10.8315 127.713 mo
10.1168 127.475 9.40433 127.235 8.69532 126.994 cv
38.1949 82.3542 88.8265 52.8902 146.301 52.8902 cv
151.737 52.8902 157.112 53.1539 162.414 53.669 cv
162.279 54.3845 162.155 55.102 162.042 55.8206 cv
156.862 55.3224 151.61 55.0674 146.301 55.0674 cv
89.7942 55.0674 39.9868 83.9345 10.8315 127.713 cv
281.025 126.605 mo
263.93 101.385 239.949 81.2152 211.781 68.8023 cv
211.954 68.0675 212.184 67.3751 212.467 66.7249 cv
241.269 79.3746 265.77 100.028 283.151 125.863 cv
282.446 126.112 281.736 126.36 281.025 126.605 cv
.858823 .647059 .0745098 .133333 cmyk
f
12.9783 128.419 mo
12.2605 128.186 11.5436 127.95 10.8315 127.713 cv
39.9868 83.9345 89.7942 55.0674 146.301 55.0674 cv
151.61 55.0674 156.862 55.3224 162.042 55.8206 cv
161.928 56.5392 161.825 57.2595 161.731 57.9782 cv
156.652 57.4927 151.507 57.2447 146.301 57.2447 cv
90.7671 57.2447 41.7892 85.508 12.9783 128.419 cv
278.888 127.334 mo
262.155 102.841 238.819 83.2199 211.444 71.0345 cv
211.502 70.2495 211.615 69.5066 211.781 68.8023 cv
239.949 81.2152 263.93 101.385 281.025 126.605 cv
280.315 126.85 279.604 127.093 278.888 127.334 cv
.854902 .643137 .0745098 .129412 cmyk
f
15.1356 129.112 mo
14.4149 128.884 13.6934 128.652 12.9783 128.419 cv
41.7892 85.508 90.7671 57.2447 146.301 57.2447 cv
151.507 57.2447 156.652 57.4927 161.731 57.9782 cv
161.637 58.7004 161.552 59.4214 161.476 60.1405 cv
156.481 59.6645 151.42 59.4213 146.301 59.4213 cv
91.7382 59.4213 43.5998 87.0675 15.1356 129.112 cv
276.74 128.05 mo
260.431 104.378 237.851 85.3599 211.4 73.4009 cv
211.4 72.2495 li
211.4 71.8342 211.415 71.4289 211.444 71.0345 cv
238.819 83.2199 262.155 102.841 278.888 127.334 cv
278.174 127.575 277.459 127.813 276.74 128.05 cv
.85098 .639216 .0705882 .129412 cmyk
f
17.3051 129.793 mo
16.579 129.568 15.8562 129.341 15.1356 129.112 cv
43.5998 87.0675 91.7382 59.4213 146.301 59.4213 cv
151.42 59.4213 156.481 59.6645 161.476 60.1405 cv
161.399 60.8657 161.331 61.5884 161.271 62.3072 cv
156.344 61.8378 151.35 61.5976 146.301 61.5976 cv
92.7256 61.5976 45.4242 88.6331 17.3051 129.793 cv
274.578 128.753 mo
268.611 120.168 261.803 112.207 254.277 104.995 cv
254.449 102.75 li
251.885 102.75 li
239.952 91.783 226.306 82.648 211.4 75.7934 cv
211.4 73.4009 li
237.851 85.3599 260.431 104.378 276.74 128.05 cv
276.023 128.285 275.301 128.52 274.578 128.753 cv
.85098 .631373 .0705882 .12549 cmyk
f
19.487 130.461 mo
18.7556 130.24 18.0311 130.018 17.3051 129.793 cv
45.4242 88.6331 92.7256 61.5976 146.301 61.5976 cv
151.35 61.5976 156.344 61.8378 161.271 62.3072 cv
161.21 63.0365 161.156 63.7603 161.11 64.4796 cv
156.237 64.0138 151.295 63.7753 146.301 63.7753 cv
93.7167 63.7753 47.2597 90.1909 19.487 130.461 cv
272.405 129.443 mo
266.957 121.675 260.815 114.441 254.06 107.816 cv
254.277 104.995 li
261.803 112.207 268.611 120.168 274.578 128.753 cv
273.856 128.985 273.133 129.214 272.405 129.443 cv
251.885 102.75 mo
248.641 102.75 li
237.547 92.8666 225.016 84.5622 211.4 78.194 cv
211.4 76.4999 li
211.4 75.7934 li
226.306 82.648 239.952 91.783 251.885 102.75 cv
.843137 .627451 .0705882 .121569 cmyk
f
21.6814 131.117 mo
20.9473 130.9 20.2158 130.682 19.487 130.461 cv
47.2597 90.1909 93.7167 63.7753 146.301 63.7753 cv
151.295 63.7753 156.237 64.0138 161.11 64.4796 cv
161.062 65.211 161.022 65.9374 160.988 66.6548 cv
156.155 66.19 151.255 65.9521 146.301 65.9521 cv
94.7105 65.9521 49.1056 91.7398 21.6814 131.117 cv
270.22 130.12 mo
265.306 123.183 259.822 116.675 253.841 110.666 cv
254.06 107.816 li
260.815 114.441 266.957 121.675 272.405 129.443 cv
271.68 129.67 270.95 129.897 270.22 130.12 cv
248.641 102.75 mo
245.339 102.75 li
235.121 93.938 223.717 86.4642 211.4 80.6015 cv
211.4 78.194 li
225.016 84.5622 237.547 92.8666 248.641 102.75 cv
.839216 .623529 .0705882 .121569 cmyk
f
23.8872 131.76 mo
23.1506 131.548 22.4129 131.333 21.6814 131.117 cv
49.1056 91.7398 94.7105 65.9521 146.301 65.9521 cv
151.255 65.9521 156.155 66.19 160.988 66.6548 cv
160.953 67.3901 160.925 68.1167 160.902 68.8335 cv
156.1 68.3679 151.224 68.1289 146.301 68.1289 cv
95.7124 68.1289 50.9623 93.2857 23.8872 131.76 cv
268.021 130.786 mo
263.653 124.681 258.836 118.918 253.62 113.545 cv
253.841 110.666 li
259.822 116.675 265.306 123.183 270.22 130.12 cv
269.489 130.344 268.757 130.566 268.021 130.786 cv
245.339 102.75 mo
241.973 102.75 li
232.67 94.9979 222.41 88.351 211.4 83.0164 cv
211.4 80.6015 li
223.717 86.4642 235.121 93.938 245.339 102.75 cv
.839216 .619608 .0705882 .117647 cmyk
f
26.1073 132.392 mo
25.3629 132.183 24.6265 131.973 23.8872 131.76 cv
50.9623 93.2857 95.7124 68.1289 146.301 68.1289 cv
151.224 68.1289 156.1 68.3679 160.902 68.8335 cv
160.878 69.5718 160.859 70.3007 160.845 71.0153 cv
156.061 70.5461 151.207 70.3057 146.301 70.3057 cv
96.722 70.3057 52.8316 94.8283 26.1073 132.392 cv
265.81 131.439 mo
262 126.172 257.853 121.169 253.396 116.457 cv
253.62 113.545 li
258.836 118.918 263.653 124.681 268.021 130.786 cv
267.288 131.005 266.548 131.223 265.81 131.439 cv
241.973 102.75 mo
238.537 102.75 li
230.19 96.0439 221.092 90.2225 211.4 85.4398 cv
211.4 83.0164 li
222.41 88.351 232.67 94.9979 241.973 102.75 cv
.835294 .615686 .0666667 .117647 cmyk
f
28.3407 133.012 mo
27.5939 132.807 26.8491 132.6 26.1073 132.392 cv
52.8316 94.8283 96.722 70.3057 146.301 70.3057 cv
151.207 70.3057 156.061 70.5461 160.845 71.0153 cv
160.831 71.7587 160.821 72.4867 160.814 73.1997 cv
156.04 72.7253 151.199 72.4824 146.301 72.4824 cv
97.7334 72.4824 54.7117 96.3602 28.3407 133.012 cv
263.584 132.08 mo
260.351 127.661 256.87 123.426 253.17 119.405 cv
253.396 116.457 li
257.853 121.169 262 126.172 265.81 131.439 cv
265.068 131.655 264.331 131.867 263.584 132.08 cv
238.537 102.75 mo
235.021 102.75 li
227.675 97.0712 219.766 92.0779 211.4 87.872 cv
211.4 85.4398 li
221.092 90.2225 230.19 96.0439 238.537 102.75 cv
.831372 .607843 .0666667 .113725 cmyk
f
30.5878 133.619 mo
29.8387 133.419 29.0848 133.215 28.3407 133.012 cv
54.7117 96.3602 97.7334 72.4824 146.301 72.4824 cv
151.199 72.4824 156.04 72.7253 160.814 73.1997 cv
160.807 73.9472 160.803 74.6779 160.802 75.3867 cv
156.031 74.9056 151.197 74.6597 146.301 74.6597 cv
98.7551 74.6597 56.6038 97.8934 30.5878 133.619 cv
261.345 132.709 mo
258.701 129.138 255.897 125.697 252.94 122.391 cv
253.17 119.405 li
256.87 123.426 260.351 127.661 263.584 132.08 cv
262.84 132.291 262.094 132.501 261.345 132.709 cv
235.021 102.75 mo
231.415 102.75 li
225.117 98.0773 218.432 93.9163 211.4 90.3138 cv
211.4 87.872 li
219.766 92.0779 227.675 97.0712 235.021 102.75 cv
.827451 .603922 .0627451 .113725 cmyk
f
32.8497 134.215 mo
32.0929 134.019 31.3397 133.82 30.5878 133.619 cv
56.6038 97.8934 98.7551 74.6597 146.301 74.6597 cv
151.197 74.6597 156.031 74.9056 160.802 75.3867 cv
160.801 75.7641 160.801 76.1348 160.801 76.4999 cv
160.801 77.5747 li
156.035 77.087 151.194 76.8364 146.301 76.8364 cv
99.7827 76.8364 58.5081 99.4204 32.8497 134.215 cv
259.09 133.326 mo
257.056 130.613 254.928 127.977 252.708 125.42 cv
252.94 122.391 li
255.897 125.697 258.701 129.138 261.345 132.709 cv
260.596 132.917 259.844 133.122 259.09 133.326 cv
231.415 102.75 mo
227.709 102.75 li
222.519 99.0665 217.077 95.7305 211.4 92.765 cv
211.4 90.501 li
211.4 90.3138 li
218.432 93.9163 225.117 98.0773 231.415 102.75 cv
.827451 .6 .0627451 .109804 cmyk
f
35.1264 134.8 mo
34.3647 134.607 33.6064 134.412 32.8497 134.215 cv
58.5081 99.4204 99.7827 76.8364 146.301 76.8364 cv
151.194 76.8364 156.035 77.087 160.801 77.5747 cv
160.801 78.501 li
160.801 79.7637 li
156.034 79.2677 151.198 79.0137 146.301 79.0137 cv
100.819 79.0137 60.4243 100.947 35.1264 134.8 cv
256.821 133.932 mo
255.416 132.082 253.965 130.268 252.472 128.492 cv
252.708 125.42 li
254.928 127.977 257.056 130.613 259.09 133.326 cv
258.338 133.529 257.577 133.732 256.821 133.932 cv
227.709 102.75 mo
223.888 102.75 li
219.872 100.033 215.701 97.5184 211.4 95.2265 cv
211.4 92.765 li
217.077 95.7305 222.519 99.0665 227.709 102.75 cv
.819608 .596078 .0627451 .105882 cmyk
f
37.4193 135.373 mo
36.6528 135.184 35.888 134.993 35.1264 134.8 cv
60.4243 100.947 100.819 79.0137 146.301 79.0137 cv
151.198 79.0137 156.034 79.2677 160.801 79.7637 cv
160.801 81.9526 li
156.035 81.4486 151.199 81.1905 146.301 81.1905 cv
101.86 81.1905 62.3533 102.465 37.4193 135.373 cv
254.534 134.526 mo
253.781 133.548 253.01 132.574 252.231 131.617 cv
252.472 128.492 li
253.965 130.268 255.416 132.082 256.821 133.932 cv
256.059 134.132 255.301 134.329 254.534 134.526 cv
223.888 102.75 mo
219.932 102.75 li
217.156 100.968 214.309 99.2813 211.4 97.6993 cv
211.4 95.2265 li
215.701 97.5184 219.872 100.033 223.888 102.75 cv
.815686 .592157 .0588235 .105882 cmyk
f
39.7285 135.935 mo
38.9544 135.749 38.1886 135.563 37.4193 135.373 cv
62.3533 102.465 101.86 81.1905 146.301 81.1905 cv
151.199 81.1905 156.035 81.4486 160.801 81.9526 cv
160.801 84.1418 li
156.039 83.6302 151.198 83.3672 146.301 83.3672 cv
102.908 83.3672 64.2947 103.979 39.7285 135.935 cv
252.232 135.109 mo
252.149 135.003 252.07 134.902 251.987 134.797 cv
252.231 131.617 li
253.01 132.574 253.781 133.548 254.534 134.526 cv
253.77 134.722 253.001 134.917 252.232 135.109 cv
219.932 102.75 mo
215.821 102.75 li
214.363 101.866 212.894 101.013 211.4 100.184 cv
211.4 97.6993 li
214.309 99.2813 217.156 100.968 219.932 102.75 cv
.811765 .584314 .0588235 .101961 cmyk
f
42.0558 136.486 mo
41.2798 136.304 40.4998 136.12 39.7285 135.935 cv
64.2947 103.979 102.908 83.3672 146.301 83.3672 cv
151.198 83.3672 156.039 83.6302 160.801 84.1418 cv
160.801 86.3315 li
156.04 85.8115 151.199 85.544 146.301 85.544 cv
103.958 85.544 66.2496 105.485 42.0558 136.486 cv
251.958 135.177 mo
251.987 134.797 li
252.07 134.902 252.149 135.003 252.232 135.109 cv
252.141 135.132 252.049 135.155 251.958 135.177 cv
215.821 102.75 mo
211.524 102.75 li
211.48 102.725 211.444 102.705 211.4 102.68 cv
211.4 100.184 li
212.894 101.013 214.363 101.866 215.821 102.75 cv
.811765 .580392 .054902 .101961 cmyk
f
44.4007 137.025 mo
43.6143 136.847 42.8374 136.668 42.0558 136.486 cv
66.2496 105.485 103.958 85.544 146.301 85.544 cv
151.199 85.544 156.04 85.8115 160.801 86.3315 cv
160.801 88.5221 li
156.04 87.993 151.201 87.7212 146.301 87.7212 cv
105.023 87.7212 68.2178 106.995 44.4007 137.025 cv
211.524 102.75 mo
211.4 102.75 li
211.4 102.68 li
211.444 102.705 211.48 102.725 211.524 102.75 cv
.807843 .576471 .054902 .101961 cmyk
f
46.7655 137.554 mo
45.9773 137.38 45.1842 137.203 44.4007 137.025 cv
68.2178 106.995 105.023 87.7212 146.301 87.7212 cv
151.201 87.7212 156.04 87.993 160.801 88.5221 cv
160.801 90.501 li
160.801 90.7132 li
156.043 90.1754 151.201 89.8985 146.301 89.8985 cv
106.094 89.8985 70.2007 108.499 46.7655 137.554 cv
.803922 .572549 .054902 .0980392 cmyk
f
49.15 138.071 mo
48.3515 137.9 47.5593 137.728 46.7655 137.554 cv
70.2007 108.499 106.094 89.8985 146.301 89.8985 cv
151.201 89.8985 156.043 90.1754 160.801 90.7132 cv
160.801 92.9041 li
156.041 92.3561 151.207 92.0751 146.301 92.0751 cv
107.168 92.0751 72.1972 109.994 49.15 138.071 cv
.803922 .568627 .054902 .0941176 cmyk
f
51.5567 138.578 mo
50.7536 138.411 49.9485 138.242 49.15 138.071 cv
72.1972 109.994 107.168 92.0751 146.301 92.0751 cv
151.207 92.0751 156.041 92.3561 160.801 92.9041 cv
160.801 95.0957 li
156.046 94.5387 151.205 94.2519 146.301 94.2519 cv
108.253 94.2519 74.2094 111.49 51.5567 138.578 cv
.796078 .560784 .054902 .0901961 cmyk
f
53.9871 139.074 mo
53.1736 138.911 52.3656 138.746 51.5567 138.578 cv
74.2094 111.49 108.253 94.2519 146.301 94.2519 cv
151.205 94.2519 156.046 94.5387 160.801 95.0957 cv
160.801 97.2878 li
156.045 96.7203 151.208 96.4287 146.301 96.4287 cv
109.349 96.4287 76.2378 112.985 53.9871 139.074 cv
.792157 .556863 .0509804 .0901961 cmyk
f
56.4416 139.559 mo
55.6207 139.4 54.8034 139.238 53.9871 139.074 cv
76.2378 112.985 109.349 96.4287 146.301 96.4287 cv
151.208 96.4287 156.045 96.7203 160.801 97.2878 cv
160.801 99.4805 li
156.048 98.9029 151.208 98.6054 146.301 98.6054 cv
110.45 98.6054 78.2829 114.471 56.4416 139.559 cv
.788235 .552941 .0509804 .0862745 cmyk
f
58.9233 140.034 mo
58.0949 139.878 57.2654 139.72 56.4416 139.559 cv
78.2829 114.471 110.45 98.6054 146.301 98.6054 cv
151.208 98.6054 156.048 98.9029 160.801 99.4805 cv
160.801 101.674 li
156.051 101.086 151.209 100.782 146.301 100.782 cv
111.562 100.782 80.3454 115.957 58.9233 140.034 cv
.788235 .54902 .0509804 .0862745 cmyk
f
61.4336 140.499 mo
60.5949 140.346 59.7575 140.191 58.9233 140.034 cv
80.3454 115.957 111.562 100.782 146.301 100.782 cv
151.209 100.782 156.051 101.086 160.801 101.674 cv
160.801 102.75 li
133.801 102.75 li
133.801 103.633 li
105.226 106.732 79.7904 120.337 61.4336 140.499 cv
.784314 .545098 .0470588 .0862745 cmyk
f
63.975 140.953 mo
63.1259 140.804 62.2783 140.652 61.4336 140.499 cv
79.7904 120.337 105.226 106.732 133.801 103.633 cv
133.801 105.823 li
106.346 108.861 81.8553 121.786 63.975 140.953 cv
.780392 .537255 .0470588 .0823529 cmyk
f
66.5508 141.396 mo
65.6882 141.25 64.833 141.103 63.975 140.953 cv
81.8553 121.786 106.346 108.861 133.801 105.823 cv
133.801 108.014 li
107.472 110.985 83.9425 123.227 66.5508 141.396 cv
.780392 .533333 .0431373 .0784314 cmyk
f
69.1628 141.83 mo
68.2897 141.687 67.4193 141.543 66.5508 141.396 cv
83.9425 123.227 107.472 110.985 133.801 108.014 cv
133.801 110.205 li
108.61 113.106 86.0499 124.664 69.1628 141.83 cv
.772549 .529412 .0431373 .0784314 cmyk
f
71.816 142.253 mo
70.9294 142.114 70.0448 141.973 69.1628 141.83 cv
86.0499 124.664 108.61 113.106 133.801 110.205 cv
133.801 112.397 li
109.765 115.224 88.1784 126.099 71.816 142.253 cv
.768627 .52549 .0431373 .0745098 cmyk
f
74.5135 142.666 mo
73.6133 142.531 72.7117 142.393 71.816 142.253 cv
88.1784 126.099 109.765 115.224 133.801 112.397 cv
133.801 114.589 li
110.93 117.337 90.3334 127.529 74.5135 142.666 cv
.764706 .521569 .0392157 .0705882 cmyk
f
77.262 143.068 mo
76.342 142.937 75.4288 142.803 74.5135 142.666 cv
90.3334 127.529 110.93 117.337 133.801 114.589 cv
133.801 116.782 li
112.107 119.445 92.5183 128.95 77.262 143.068 cv
.764706 .513725 .0392157 .0705882 cmyk
f
80.0649 143.461 mo
79.128 143.333 78.1941 143.202 77.262 143.068 cv
92.5183 128.95 112.107 119.445 133.801 116.782 cv
133.801 118.976 li
113.302 121.549 94.7313 130.368 80.0649 143.461 cv
.760784 .509804 .0392157 .0705882 cmyk
f
82.9318 143.844 mo
81.9748 143.719 81.017 143.591 80.0649 143.461 cv
94.7313 130.368 113.302 121.549 133.801 118.976 cv
133.801 121.171 li
114.509 123.647 96.9835 131.776 82.9318 143.844 cv
.756863 .505882 .0392157 .0666667 cmyk
f
85.8706 144.216 mo
84.8873 144.095 83.9101 143.971 82.9318 143.844 cv
96.9835 131.776 114.509 123.647 133.801 121.171 cv
133.801 123.366 li
115.741 125.738 99.2738 133.181 85.8706 144.216 cv
.756863 .501961 .0392157 .0627451 cmyk
f
88.8922 144.579 mo
87.8823 144.461 86.8754 144.341 85.8706 144.216 cv
99.2738 133.181 115.741 125.738 133.801 123.366 cv
133.801 125.563 li
116.996 127.824 101.61 134.58 88.8922 144.579 cv
.74902 .498039 .0352941 .0627451 cmyk
f
92.009 144.932 mo
90.9691 144.818 89.9269 144.7 88.8922 144.579 cv
101.61 134.58 116.996 127.824 133.801 125.563 cv
133.801 127.76 li
118.275 129.9 104 135.97 92.009 144.932 cv
.745098 .490196 .0352941 .0588235 cmyk
f
95.2396 145.275 mo
94.1601 145.164 93.083 145.05 92.009 144.932 cv
104 135.97 118.275 129.9 133.801 127.76 cv
133.801 129.958 li
119.586 131.968 106.454 137.351 95.2396 145.275 cv
.741176 .486274 .0313725 .054902 cmyk
f
98.6075 145.607 mo
97.4816 145.5 96.3597 145.389 95.2396 145.275 cv
106.454 137.351 119.586 131.968 133.801 129.958 cv
133.801 132.158 li
120.934 134.023 108.989 138.723 98.6075 145.607 cv
.741176 .482353 .0313725 .054902 cmyk
f
102.142 145.93 mo
100.96 145.826 99.7835 145.719 98.6075 145.607 cv
108.989 138.723 120.934 134.023 133.801 132.158 cv
133.801 134.358 li
122.334 136.066 111.615 140.087 102.142 145.93 cv
.737255 .478431 .0313725 .054902 cmyk
f
105.889 146.242 mo
104.637 146.143 103.387 146.039 102.142 145.93 cv
111.615 140.087 122.334 136.066 133.801 134.358 cv
133.801 136.56 li
123.788 138.091 114.37 141.434 105.889 146.242 cv
.733333 .47451 .027451 .0509804 cmyk
f
109.913 146.544 mo
108.568 146.449 107.227 146.348 105.889 146.242 cv
114.37 141.434 123.788 138.091 133.801 136.56 cv
133.801 138.763 li
125.323 140.097 117.287 142.764 109.913 146.544 cv
.733333 .466667 .027451 .0470588 cmyk
f
114.321 146.836 mo
112.849 146.745 111.376 146.648 109.913 146.544 cv
117.287 142.764 125.323 140.097 133.801 138.763 cv
133.801 140.968 li
126.968 142.073 120.435 144.071 114.321 146.836 cv
.72549 .462745 .0235294 .0470588 cmyk
f
119.301 147.116 mo
117.633 147.031 115.978 146.937 114.321 146.836 cv
120.435 144.071 126.968 142.073 133.801 140.968 cv
133.801 141.8 li
160.801 141.8 li
160.801 143.535 li
156.107 142.622 151.26 142.144 146.301 142.144 cv
136.789 142.144 127.688 143.903 119.301 147.116 cv
.721569 .458824 .0235294 .0431373 cmyk
f
125.266 147.383 mo
123.271 147.306 121.282 147.217 119.301 147.116 cv
127.688 143.903 136.789 142.144 146.301 142.144 cv
151.26 142.144 156.107 142.622 160.801 143.535 cv
160.801 145.755 li
156.114 144.814 151.263 144.32 146.301 144.32 cv
138.992 144.32 131.93 145.391 125.266 147.383 cv
.717647 .454902 .0235294 .0392157 cmyk
f
133.568 147.634 mo
130.79 147.573 128.018 147.49 125.266 147.383 cv
131.93 145.391 138.992 144.32 146.301 144.32 cv
151.263 144.32 156.114 144.814 160.801 145.755 cv
160.801 147.475 li
160.045 147.5 159.291 147.523 158.533 147.545 cv
154.559 146.856 150.471 146.497 146.301 146.497 cv
141.956 146.497 137.699 146.887 133.568 147.634 cv
.717647 .45098 .0235294 .0392157 cmyk
f
144.301 147.75 mo
140.703 147.75 137.127 147.711 133.568 147.634 cv
137.699 146.887 141.956 146.497 146.301 146.497 cv
150.471 146.497 154.559 146.856 158.533 147.545 cv
153.824 147.681 149.079 147.75 144.301 147.75 cv
.713725 .443137 .0235294 .0392157 cmyk
f
217.528 142.134 mo
217.409 142.023 217.29 141.911 217.171 141.8 cv
219.608 141.8 li
218.914 141.913 218.224 142.024 217.528 142.134 cv
.764706 .521569 .0392157 .0705882 cmyk
f
214.784 142.559 mo
214.505 142.304 214.225 142.052 213.943 141.8 cv
217.171 141.8 li
217.29 141.911 217.409 142.023 217.528 142.134 cv
216.616 142.278 215.7 142.42 214.784 142.559 cv
.764706 .513725 .0392157 .0705882 cmyk
f
211.985 142.974 mo
211.789 142.801 211.598 142.634 211.4 142.463 cv
211.4 141.8 li
213.943 141.8 li
214.225 142.052 214.505 142.304 214.784 142.559 cv
213.853 142.7 212.921 142.838 211.985 142.974 cv
.760784 .509804 .0392157 .0705882 cmyk
f
211.4 143.058 mo
211.4 142.463 li
211.598 142.634 211.789 142.801 211.985 142.974 cv
211.79 143.002 211.596 143.03 211.4 143.058 cv
.756863 .505882 .0392157 .0666667 cmyk
f
133.801 102.75 mo
160.801 102.75 li
160.801 90.501 li
160.801 78.501 li
160.801 76.4999 li
160.801 64.9502 161.1 47.1001 169.5 36.0508 cv
178.35 24.3491 190.5 16.4009 211.4 16.4009 cv
245.449 16.4009 259.801 21.2495 259.801 21.2495 cv
253.051 61.2509 li
253.051 61.2509 241.801 57.9995 231.301 57.9995 cv
220.801 57.9995 211.4 61.7495 211.4 72.2495 cv
211.4 76.4999 li
211.4 90.501 li
211.4 102.75 li
254.449 102.75 li
251.449 141.8 li
211.4 141.8 li
211.4 277.5 li
160.801 277.5 li
160.801 141.8 li
133.801 141.8 li
133.801 102.75 li
0 0 0 0 cmyk
f
13.535 271.043 mo
10.2835 267.487 8.30082 262.751 8.30082 257.55 cv
8.30082 255.499 li
9.75333 260.809 11.5045 265.998 13.535 271.043 cv
.682353 .537255 .0627451 .113725 cmyk
f
17.2279 274.21 mo
15.8713 273.307 14.6307 272.242 13.535 271.043 cv
11.5045 265.998 9.75333 260.809 8.30082 255.499 cv
8.30082 246.14 li
10.304 255.902 13.3174 265.297 17.2279 274.21 cv
.682353 .533333 .0627451 .109804 cmyk
f
20.3901 275.926 mo
19.2805 275.448 18.2228 274.872 17.2279 274.21 cv
13.3174 265.297 10.304 255.902 8.30082 246.14 cv
8.30082 231.694 li
9.8703 247.348 14.0485 262.242 20.3901 275.926 cv
276.101 266.662 mo
276.721 265.023 277.31 263.367 277.868 261.699 cv
277.497 263.449 276.897 265.114 276.101 266.662 cv
.682353 .529412 .0627451 .105882 cmyk
f
23.2642 276.911 mo
22.2743 276.654 21.3141 276.324 20.3901 275.926 cv
14.0485 262.242 9.8703 247.348 8.30082 231.694 cv
8.30082 231.5 li
8.30082 228.718 8.8732 226.064 9.90742 223.651 cv
10.7234 242.668 15.434 260.68 23.2642 276.911 cv
271.243 272.784 mo
274.098 266.321 276.466 259.597 278.301 252.655 cv
278.301 257.55 li
278.301 258.973 278.152 260.361 277.868 261.699 cv
277.31 263.367 276.721 265.023 276.101 266.662 cv
274.894 269.01 273.236 271.088 271.243 272.784 cv
.678431 .52549 .0588235 .105882 cmyk
f
25.9335 277.411 mo
25.0235 277.304 24.1324 277.136 23.2642 276.911 cv
15.434 260.68 10.7234 242.668 9.90742 223.651 cv
10.4672 222.345 11.1628 221.108 11.9756 219.961 cv
12.3145 240.57 17.3017 260.054 25.9335 277.411 cv
267.757 275.168 mo
272.571 265.015 276.152 254.157 278.301 242.803 cv
278.301 252.655 li
276.466 259.597 274.098 266.321 271.243 272.784 cv
270.172 273.695 269.003 274.496 267.757 275.168 cv
.67451 .52549 .0588235 .101961 cmyk
f
28.4409 277.55 mo
28.3007 277.55 li
27.4994 277.55 26.71 277.503 25.9335 277.411 cv
17.3017 260.054 12.3145 240.57 11.9756 219.961 cv
12.6238 219.047 13.3461 218.189 14.1351 217.397 cv
14.1349 217.499 14.1348 217.608 14.1348 217.71 cv
14.1348 239.244 19.293 259.58 28.4409 277.55 cv
264.688 276.503 mo
272.014 261.788 276.679 245.515 278.046 228.321 cv
278.214 229.357 278.301 230.418 278.301 231.5 cv
278.301 242.803 li
276.152 254.157 272.571 265.015 267.757 275.168 cv
266.779 275.695 265.754 276.142 264.688 276.503 cv
.67451 .521569 .054902 .101961 cmyk
f
30.8889 277.55 mo
28.4409 277.55 li
19.293 259.58 14.1348 239.244 14.1348 217.71 cv
14.1348 217.608 14.1349 217.499 14.1351 217.397 cv
14.8192 216.709 15.5527 216.071 16.3302 215.488 cv
16.3178 216.226 16.3115 216.97 16.3115 217.71 cv
16.3115 239.284 21.5759 259.636 30.8889 277.55 cv
261.878 277.229 mo
270.385 260.754 275.471 242.233 276.199 222.601 cv
277.087 224.375 277.72 226.299 278.046 228.321 cv
276.679 245.515 272.014 261.788 264.688 276.503 cv
263.778 276.81 262.84 277.054 261.878 277.229 cv
.670588 .517647 .054902 .101961 cmyk
f
33.3486 277.55 mo
30.8889 277.55 li
21.5759 259.636 16.3115 239.284 16.3115 217.71 cv
16.3115 216.97 16.3178 216.226 16.3302 215.488 cv
17.0324 214.962 17.7705 214.48 18.5399 214.048 cv
18.5057 215.263 18.4883 216.487 18.4883 217.71 cv
18.4883 239.327 23.8623 259.693 33.3486 277.55 cv
259.264 277.527 mo
268.515 260.106 273.851 240.305 274.103 219.277 cv
274.905 220.309 275.608 221.423 276.199 222.601 cv
275.471 242.233 270.385 260.754 261.878 277.229 cv
261.024 277.384 260.151 277.484 259.264 277.527 cv
.666667 .513725 .054902 .0980392 cmyk
f
258.301 277.55 mo
256.781 277.55 li
266.444 259.756 271.936 239.369 271.936 217.71 cv
271.936 217.439 271.935 217.169 271.933 216.899 cv
272.718 217.632 273.444 218.427 274.103 219.277 cv
273.851 240.305 268.515 260.106 259.264 277.527 cv
258.945 277.542 258.624 277.55 258.301 277.55 cv
35.8197 277.55 mo
33.3486 277.55 li
23.8623 259.693 18.4883 239.327 18.4883 217.71 cv
18.4883 216.487 18.5057 215.263 18.5399 214.048 cv
19.2516 213.648 19.9905 213.29 20.7527 212.979 cv
20.6945 214.548 20.6651 216.127 20.6651 217.71 cv
20.6651 239.369 26.1562 259.756 35.8197 277.55 cv
.666667 .509804 .054902 .0941176 cmyk
f
256.781 277.55 mo
254.297 277.55 li
264.149 259.82 269.759 239.418 269.759 217.71 cv
269.759 216.841 269.75 215.978 269.732 215.113 cv
270.507 215.657 271.243 216.254 271.933 216.899 cv
271.935 217.169 271.936 217.439 271.936 217.71 cv
271.936 239.369 266.444 259.756 256.781 277.55 cv
38.3033 277.55 mo
35.8197 277.55 li
26.1562 259.756 20.6651 239.369 20.6651 217.71 cv
20.6651 216.127 20.6945 214.548 20.7527 212.979 cv
21.4689 212.686 22.2068 212.433 22.9618 212.223 cv
22.8821 214.042 22.8418 215.871 22.8418 217.71 cv
22.8418 239.418 28.4517 259.82 38.3033 277.55 cv
.666667 .509804 .054902 .0901961 cmyk
f
254.297 277.55 mo
251.8 277.55 li
261.843 259.891 267.582 239.465 267.582 217.71 cv
267.582 216.39 267.561 215.075 267.519 213.766 cv
268.287 214.168 269.026 214.618 269.732 215.113 cv
269.75 215.978 269.759 216.841 269.759 217.71 cv
269.759 239.418 264.149 259.82 254.297 277.55 cv
40.8013 277.55 mo
38.3033 277.55 li
28.4517 259.82 22.8418 239.418 22.8418 217.71 cv
22.8418 215.871 22.8821 214.042 22.9618 212.223 cv
23.6808 212.024 24.4147 211.864 25.1639 211.746 cv
25.0682 213.72 25.0196 215.712 25.0196 217.71 cv
25.0196 239.465 30.7584 259.891 40.8013 277.55 cv
.662745 .505882 .0509804 .0901961 cmyk
f
251.8 277.55 mo
249.288 277.55 li
259.536 259.962 265.405 239.52 265.405 217.71 cv
265.405 216.057 265.371 214.41 265.305 212.773 cv
266.066 213.06 266.805 213.392 267.519 213.766 cv
267.561 215.075 267.582 216.39 267.582 217.71 cv
267.582 239.465 261.843 259.891 251.8 277.55 cv
43.3126 277.55 mo
40.8013 277.55 li
30.7584 259.891 25.0196 239.465 25.0196 217.71 cv
25.0196 215.712 25.0682 213.72 25.1639 211.746 cv
25.8814 211.632 26.6127 211.557 27.3535 211.522 cv
27.2485 213.571 27.1953 215.635 27.1953 217.71 cv
27.1953 239.52 33.0647 259.962 43.3126 277.55 cv
.658823 .501961 .0509804 .0862745 cmyk
f
249.288 277.55 mo
246.76 277.55 li
257.219 260.04 263.228 239.574 263.228 217.71 cv
263.228 215.823 263.184 213.95 263.095 212.085 cv
263.849 212.272 264.587 212.502 265.305 212.773 cv
265.371 214.41 265.405 216.057 265.405 217.71 cv
265.405 239.52 259.536 259.962 249.288 277.55 cv
45.8406 277.55 mo
43.3126 277.55 li
33.0647 259.962 27.1953 239.52 27.1953 217.71 cv
27.1953 215.635 27.2485 213.571 27.3535 211.522 cv
27.6675 211.507 27.9831 211.5 28.3007 211.5 cv
29.5354 211.5 li
29.4276 213.557 29.3731 215.626 29.3731 217.71 cv
29.3731 239.574 35.3824 260.04 45.8406 277.55 cv
.658823 .498039 .0509804 .0862745 cmyk
f
246.76 277.55 mo
244.216 277.55 li
254.893 260.124 261.051 239.631 261.051 217.71 cv
261.051 215.684 260.998 213.669 260.894 211.669 cv
261.641 211.766 262.376 211.906 263.095 212.085 cv
263.184 213.95 263.228 215.823 263.228 217.71 cv
263.228 239.574 257.219 260.04 246.76 277.55 cv
48.3846 277.55 mo
45.8406 277.55 li
35.3824 260.04 29.3731 239.574 29.3731 217.71 cv
29.3731 215.626 29.4276 213.557 29.5354 211.5 cv
31.7152 211.5 li
31.6053 213.557 31.5498 215.626 31.5498 217.71 cv
31.5498 239.631 37.7071 260.124 48.3846 277.55 cv
.654902 .494118 .0470588 .0862745 cmyk
f
244.216 277.55 mo
241.654 277.55 li
252.562 260.212 258.874 239.693 258.874 217.71 cv
258.874 215.628 258.817 213.559 258.706 211.504 cv
259.445 211.519 260.176 211.575 260.894 211.669 cv
260.998 213.669 261.051 215.684 261.051 217.71 cv
261.051 239.631 254.893 260.124 244.216 277.55 cv
50.9471 277.55 mo
48.3846 277.55 li
37.7071 260.124 31.5498 239.631 31.5498 217.71 cv
31.5498 215.626 31.6053 213.557 31.7152 211.5 cv
33.8952 211.5 li
33.7834 213.555 33.7265 215.628 33.7265 217.71 cv
33.7265 239.693 40.0385 260.212 50.9471 277.55 cv
.65098 .494118 .0470588 .0823529 cmyk
f
241.654 277.55 mo
239.071 277.55 li
250.222 260.306 256.697 239.759 256.697 217.71 cv
256.697 215.627 256.639 213.555 256.525 211.5 cv
258.301 211.5 li
258.436 211.5 258.571 211.501 258.706 211.504 cv
258.817 213.559 258.874 215.628 258.874 217.71 cv
258.874 239.693 252.562 260.212 241.654 277.55 cv
53.5292 277.55 mo
50.9471 277.55 li
40.0385 260.212 33.7265 239.693 33.7265 217.71 cv
33.7265 215.628 33.7834 213.555 33.8952 211.5 cv
36.0753 211.5 li
35.9612 213.555 35.9033 215.627 35.9033 217.71 cv
35.9033 239.759 42.3788 260.306 53.5292 277.55 cv
.65098 .490196 .0431373 .0784314 cmyk
f
239.071 277.55 mo
236.468 277.55 li
247.874 260.406 254.52 239.831 254.52 217.71 cv
254.52 215.624 254.462 213.557 254.345 211.5 cv
256.525 211.5 li
256.639 213.555 256.697 215.627 256.697 217.71 cv
256.697 239.759 250.222 260.306 239.071 277.55 cv
56.1321 277.55 mo
53.5292 277.55 li
42.3788 260.306 35.9033 239.759 35.9033 217.71 cv
35.9033 215.627 35.9612 213.555 36.0753 211.5 cv
38.2555 211.5 li
38.1389 213.557 38.0801 215.624 38.0801 217.71 cv
38.0801 239.831 44.7263 260.406 56.1321 277.55 cv
.65098 .486274 .0431373 .0784314 cmyk
f
236.468 277.55 mo
233.842 277.55 li
245.512 260.515 252.344 239.904 252.344 217.71 cv
252.344 215.627 252.283 213.553 252.165 211.5 cv
254.345 211.5 li
254.462 213.557 254.52 215.624 254.52 217.71 cv
254.52 239.831 247.874 260.406 236.468 277.55 cv
58.7588 277.55 mo
56.1321 277.55 li
44.7263 260.406 38.0801 239.831 38.0801 217.71 cv
38.0801 215.624 38.1389 213.557 38.2555 211.5 cv
40.4359 211.5 li
40.3173 213.553 40.2568 215.627 40.2568 217.71 cv
40.2568 239.904 47.0881 260.515 58.7588 277.55 cv
.647059 .482353 .0431373 .0745098 cmyk
f
233.842 277.55 mo
231.19 277.55 li
243.144 260.63 250.167 239.987 250.167 217.71 cv
250.167 215.624 250.105 213.555 249.984 211.5 cv
252.165 211.5 li
252.283 213.553 252.344 215.627 252.344 217.71 cv
252.344 239.904 245.512 260.515 233.842 277.55 cv
61.4104 277.55 mo
58.7588 277.55 li
47.0881 260.515 40.2568 239.904 40.2568 217.71 cv
40.2568 215.627 40.3173 213.553 40.4359 211.5 cv
42.6165 211.5 li
42.495 213.555 42.4336 215.624 42.4336 217.71 cv
42.4336 239.987 49.4563 260.63 61.4104 277.55 cv
.643137 .478431 .0392157 .0705882 cmyk
f
231.19 277.55 mo
228.511 277.55 li
240.759 260.756 247.99 240.072 247.99 217.71 cv
247.99 215.624 247.928 213.555 247.803 211.5 cv
249.984 211.5 li
250.105 213.555 250.167 215.624 250.167 217.71 cv
250.167 239.987 243.144 260.63 231.19 277.55 cv
64.0904 277.55 mo
61.4104 277.55 li
49.4563 260.63 42.4336 239.987 42.4336 217.71 cv
42.4336 215.624 42.495 213.555 42.6165 211.5 cv
44.7981 211.5 li
44.674 213.555 44.6113 215.624 44.6113 217.71 cv
44.6113 240.072 51.842 260.756 64.0904 277.55 cv
f
228.511 277.55 mo
225.8 277.55 li
238.363 260.892 245.812 240.166 245.812 217.71 cv
245.812 215.625 245.748 213.554 245.622 211.5 cv
247.803 211.5 li
247.928 213.555 247.99 215.624 247.99 217.71 cv
247.99 240.072 240.759 260.756 228.511 277.55 cv
66.8 277.55 mo
64.0904 277.55 li
51.842 260.756 44.6113 240.072 44.6113 217.71 cv
44.6113 215.624 44.674 213.555 44.7981 211.5 cv
46.9781 211.5 li
46.8514 213.554 46.7871 215.625 46.7871 217.71 cv
46.7871 240.166 54.237 260.892 66.8 277.55 cv
.639216 .47451 .0392157 .0705882 cmyk
f
225.8 277.55 mo
223.057 277.55 li
235.95 261.04 243.637 240.266 243.637 217.71 cv
243.637 215.624 243.571 213.553 243.442 211.5 cv
245.622 211.5 li
245.748 213.554 245.812 215.625 245.812 217.71 cv
245.812 240.166 238.363 260.892 225.8 277.55 cv
69.5438 277.55 mo
66.8 277.55 li
54.237 260.892 46.7871 240.166 46.7871 217.71 cv
46.7871 215.625 46.8514 213.554 46.9781 211.5 cv
49.1601 211.5 li
49.0306 213.553 48.9649 215.624 48.9649 217.71 cv
48.9649 240.266 56.6515 261.04 69.5438 277.55 cv
.635294 .470588 .0392157 .0666667 cmyk
f
223.057 277.55 mo
220.276 277.55 li
233.522 261.199 241.459 240.377 241.459 217.71 cv
241.459 215.623 241.392 213.554 241.259 211.5 cv
243.442 211.5 li
243.571 213.553 243.637 215.624 243.637 217.71 cv
243.637 240.266 235.95 261.04 223.057 277.55 cv
72.3246 277.55 mo
69.5438 277.55 li
56.6515 261.04 48.9649 240.266 48.9649 217.71 cv
48.9649 215.624 49.0306 213.553 49.1601 211.5 cv
51.3413 211.5 li
51.2088 213.554 51.1416 215.623 51.1416 217.71 cv
51.1416 240.377 59.0784 261.199 72.3246 277.55 cv
.635294 .466667 .0392157 .0627451 cmyk
f
220.276 277.55 mo
217.453 277.55 li
231.072 261.375 239.282 240.494 239.282 217.71 cv
239.282 215.624 239.213 213.552 239.078 211.5 cv
241.259 211.5 li
241.392 213.554 241.459 215.623 241.459 217.71 cv
241.459 240.377 233.522 261.199 220.276 277.55 cv
75.1481 277.55 mo
72.3246 277.55 li
59.0784 261.199 51.1416 240.377 51.1416 217.71 cv
51.1416 215.623 51.2088 213.554 51.3413 211.5 cv
53.5228 211.5 li
53.3873 213.552 53.3184 215.624 53.3184 217.71 cv
53.3184 240.494 61.529 261.375 75.1481 277.55 cv
.635294 .462745 .0352941 .0627451 cmyk
f
217.453 277.55 mo
214.583 277.55 li
228.602 261.567 237.105 240.624 237.105 217.71 cv
237.105 215.624 237.035 213.551 236.896 211.5 cv
239.078 211.5 li
239.213 213.552 239.282 215.624 239.282 217.71 cv
239.282 240.494 231.072 261.375 217.453 277.55 cv
78.0179 277.55 mo
75.1481 277.55 li
61.529 261.375 53.3184 240.494 53.3184 217.71 cv
53.3184 215.624 53.3873 213.552 53.5228 211.5 cv
55.7045 211.5 li
55.5658 213.551 55.4952 215.624 55.4952 217.71 cv
55.4952 240.624 63.9986 261.567 78.0179 277.55 cv
.631373 .462745 .0352941 .0588235 cmyk
f
214.583 277.55 mo
211.66 277.55 li
226.108 261.779 234.929 240.768 234.929 217.71 cv
234.929 215.623 234.856 213.551 234.714 211.5 cv
236.896 211.5 li
237.035 213.551 237.105 215.624 237.105 217.71 cv
237.105 240.624 228.602 261.567 214.583 277.55 cv
80.9404 277.55 mo
78.0179 277.55 li
63.9986 261.567 55.4952 240.624 55.4952 217.71 cv
55.4952 215.624 55.5658 213.551 55.7045 211.5 cv
57.8863 211.5 li
57.7442 213.551 57.6718 215.623 57.6718 217.71 cv
57.6718 240.768 66.4923 261.779 80.9404 277.55 cv
.627451 .458824 .0313725 .054902 cmyk
f
211.66 277.55 mo
208.677 277.55 li
208.694 277.532 208.708 277.518 208.725 277.5 cv
211.4 277.5 li
211.4 274.577 li
224.693 259.374 232.752 239.477 232.752 217.71 cv
232.752 215.622 232.678 213.551 232.532 211.5 cv
234.714 211.5 li
234.856 213.551 234.929 215.623 234.929 217.71 cv
234.929 240.768 226.108 261.779 211.66 277.55 cv
83.9243 277.55 mo
80.9404 277.55 li
66.4923 261.779 57.6718 240.768 57.6718 217.71 cv
57.6718 215.623 57.7442 213.551 57.8863 211.5 cv
60.0696 211.5 li
59.9238 213.551 59.8497 215.622 59.8497 217.71 cv
59.8497 240.927 69.0147 262.014 83.9243 277.55 cv
.627451 .454902 .0313725 .054902 cmyk
f
208.677 277.55 mo
205.624 277.55 li
205.64 277.533 205.657 277.517 205.674 277.5 cv
208.725 277.5 li
208.708 277.518 208.694 277.532 208.677 277.55 cv
86.9773 277.55 mo
83.9243 277.55 li
69.0147 262.014 59.8497 240.927 59.8497 217.71 cv
59.8497 215.622 59.9238 213.551 60.0696 211.5 cv
62.252 211.5 li
62.1022 213.552 62.0263 215.62 62.0263 217.71 cv
62.0263 241.1 71.5725 262.276 86.9773 277.55 cv
211.4 274.577 mo
211.4 271.212 li
223.381 256.656 230.575 238.02 230.575 217.71 cv
230.575 215.62 230.499 213.552 230.349 211.5 cv
232.532 211.5 li
232.678 213.551 232.752 215.622 232.752 217.71 cv
232.752 239.477 224.693 259.374 211.4 274.577 cv
.623529 .45098 .0313725 .054902 cmyk
f
205.624 277.55 mo
202.489 277.55 li
202.508 277.532 202.524 277.518 202.542 277.5 cv
205.674 277.5 li
205.657 277.517 205.64 277.533 205.624 277.55 cv
90.1116 277.55 mo
86.9773 277.55 li
71.5725 262.276 62.0263 241.1 62.0263 217.71 cv
62.0263 215.62 62.1022 213.552 62.252 211.5 cv
64.4348 211.5 li
64.2814 213.549 64.2031 215.622 64.2031 217.71 cv
64.2031 241.299 74.165 262.571 90.1116 277.55 cv
211.4 271.212 mo
211.4 267.718 li
222.058 253.868 228.398 236.524 228.398 217.71 cv
228.398 215.622 228.32 213.549 228.167 211.5 cv
230.349 211.5 li
230.499 213.552 230.575 215.62 230.575 217.71 cv
230.575 238.02 223.381 256.656 211.4 271.212 cv
.619608 .447059 .027451 .0509804 cmyk
f
202.489 277.55 mo
199.259 277.55 li
199.278 277.533 199.297 277.517 199.316 277.5 cv
202.542 277.5 li
202.524 277.518 202.508 277.532 202.489 277.55 cv
93.3412 277.55 mo
90.1116 277.55 li
74.165 262.571 64.2031 241.299 64.2031 217.71 cv
64.2031 215.622 64.2814 213.549 64.4348 211.5 cv
66.6179 211.5 li
66.4602 213.549 66.3799 215.62 66.3799 217.71 cv
66.3799 241.518 76.8065 262.904 93.3412 277.55 cv
211.4 267.718 mo
211.4 264.062 li
220.731 250.986 226.221 234.986 226.221 217.71 cv
226.221 215.62 226.14 213.549 225.983 211.5 cv
228.167 211.5 li
228.32 213.549 228.398 215.622 228.398 217.71 cv
228.398 236.524 222.058 253.868 211.4 267.718 cv
.619608 .447059 .027451 .0470588 cmyk
f
199.259 277.55 mo
195.917 277.55 li
195.938 277.533 195.956 277.517 195.977 277.5 cv
199.316 277.5 li
199.297 277.517 199.278 277.533 199.259 277.55 cv
96.6838 277.55 mo
93.3412 277.55 li
76.8065 262.904 66.3799 241.518 66.3799 217.71 cv
66.3799 215.62 66.4602 213.549 66.6179 211.5 cv
68.8014 211.5 li
68.6393 213.549 68.5566 215.62 68.5566 217.71 cv
68.5566 241.768 79.5034 263.286 96.6838 277.55 cv
211.4 264.062 mo
211.4 260.206 li
219.394 247.99 224.044 233.389 224.044 217.71 cv
224.044 215.62 223.961 213.549 223.799 211.5 cv
225.983 211.5 li
226.14 213.549 226.221 215.62 226.221 217.71 cv
226.221 234.986 220.731 250.986 211.4 264.062 cv
.619608 .443137 .0235294 .0470588 cmyk
f
195.917 277.55 mo
192.436 277.55 li
192.456 277.534 192.48 277.516 192.5 277.5 cv
195.977 277.5 li
195.956 277.517 195.938 277.533 195.917 277.55 cv
100.166 277.55 mo
96.6838 277.55 li
79.5034 263.286 68.5566 241.768 68.5566 217.71 cv
68.5566 215.62 68.6393 213.549 68.8014 211.5 cv
70.9862 211.5 li
70.8195 213.547 70.7343 215.62 70.7343 217.71 cv
70.7343 242.057 82.2683 263.727 100.166 277.55 cv
211.4 260.206 mo
211.4 256.087 li
218.049 244.837 221.867 231.715 221.867 217.71 cv
221.867 215.62 221.782 213.547 221.615 211.5 cv
223.799 211.5 li
223.961 213.549 224.044 215.62 224.044 217.71 cv
224.044 233.389 219.394 247.99 211.4 260.206 cv
.615686 .439216 .0235294 .0431373 cmyk
f
192.436 277.55 mo
188.782 277.55 li
188.804 277.534 188.829 277.516 188.852 277.5 cv
192.5 277.5 li
192.48 277.516 192.456 277.534 192.436 277.55 cv
103.819 277.55 mo
100.166 277.55 li
82.2683 263.727 70.7343 242.057 70.7343 217.71 cv
70.7343 215.62 70.8195 213.547 70.9862 211.5 cv
73.1696 211.5 li
72.9977 213.548 72.9102 215.618 72.9102 217.71 cv
72.9102 242.394 85.1167 264.244 103.819 277.55 cv
211.4 256.087 mo
211.4 251.609 li
216.696 241.467 219.69 229.937 219.69 217.71 cv
219.69 215.618 219.603 213.548 219.431 211.5 cv
221.615 211.5 li
221.782 213.547 221.867 215.62 221.867 217.71 cv
221.867 231.715 218.049 244.837 211.4 256.087 cv
.611765 .435294 .0235294 .0392157 cmyk
f
188.782 277.55 mo
184.904 277.55 li
184.931 277.533 184.955 277.517 184.981 277.5 cv
188.852 277.5 li
188.829 277.516 188.804 277.534 188.782 277.55 cv
107.696 277.55 mo
103.819 277.55 li
85.1167 264.244 72.9102 242.394 72.9102 217.71 cv
72.9102 215.618 72.9977 213.548 73.1696 211.5 cv
75.3544 211.5 li
75.1773 213.547 75.0869 215.618 75.0869 217.71 cv
75.0869 242.794 88.079 264.863 107.696 277.55 cv
211.4 251.609 mo
211.4 246.603 li
215.328 237.772 217.513 227.993 217.513 217.71 cv
217.513 215.618 217.422 213.547 217.245 211.5 cv
219.431 211.5 li
219.603 213.548 219.69 215.618 219.69 217.71 cv
219.69 229.937 216.696 241.467 211.4 251.609 cv
.611765 .431373 .0235294 .0392157 cmyk
f
184.904 277.55 mo
180.733 277.55 li
180.761 277.534 180.791 277.516 180.819 277.5 cv
184.981 277.5 li
184.955 277.517 184.931 277.533 184.904 277.55 cv
111.868 277.55 mo
107.696 277.55 li
88.079 264.863 75.0869 242.794 75.0869 217.71 cv
75.0869 215.618 75.1773 213.547 75.3544 211.5 cv
77.5406 211.5 li
77.3579 213.546 77.2646 215.617 77.2646 217.71 cv
77.2646 243.282 91.1915 265.62 111.868 277.55 cv
211.4 246.603 mo
211.4 240.729 li
213.949 233.528 215.336 225.781 215.336 217.71 cv
215.336 215.617 215.243 213.546 215.06 211.5 cv
217.245 211.5 li
217.422 213.547 217.513 215.618 217.513 217.71 cv
217.513 227.993 215.328 237.772 211.4 246.603 cv
.607843 .431373 .0235294 .0392157 cmyk
f
180.733 277.55 mo
176.139 277.55 li
176.173 277.533 176.205 277.517 176.239 277.5 cv
180.819 277.5 li
180.791 277.516 180.761 277.534 180.733 277.55 cv
116.462 277.55 mo
111.868 277.55 li
91.1915 265.62 77.2646 243.282 77.2646 217.71 cv
77.2646 215.617 77.3579 213.546 77.5406 211.5 cv
79.7264 211.5 li
79.5376 213.546 79.4414 215.615 79.4414 217.71 cv
79.4414 243.897 94.5188 266.581 116.462 277.55 cv
211.4 240.729 mo
211.4 233 li
212.551 228.09 213.159 222.97 213.159 217.71 cv
213.159 215.615 213.063 213.546 212.874 211.5 cv
215.06 211.5 li
215.243 213.546 215.336 215.617 215.336 217.71 cv
215.336 225.781 213.949 233.528 211.4 240.729 cv
.603922 .427451 .0196078 .0352941 cmyk
f
176.139 277.55 mo
170.886 277.55 li
170.926 277.533 170.967 277.516 171.007 277.5 cv
176.239 277.5 li
176.205 277.517 176.173 277.533 176.139 277.55 cv
121.715 277.55 mo
116.462 277.55 li
94.5188 266.581 79.4414 243.897 79.4414 217.71 cv
79.4414 215.615 79.5376 213.546 79.7264 211.5 cv
81.9129 211.5 li
81.718 213.543 81.6182 215.616 81.6182 217.71 cv
81.6182 244.713 98.1911 267.867 121.715 277.55 cv
211.4 233 mo
211.4 211.5 li
212.874 211.5 li
213.063 213.546 213.159 215.615 213.159 217.71 cv
213.159 222.97 212.551 228.09 211.4 233 cv
.603922 .423529 .0196078 .0352941 cmyk
f
170.886 277.55 mo
164.403 277.55 li
164.457 277.534 164.514 277.516 164.567 277.5 cv
171.007 277.5 li
170.967 277.516 170.926 277.533 170.886 277.55 cv
128.198 277.55 mo
121.715 277.55 li
98.1911 267.867 81.6182 244.713 81.6182 217.71 cv
81.6182 215.616 81.718 213.543 81.9129 211.5 cv
84.1 211.5 li
83.8983 213.543 83.795 215.615 83.795 217.71 cv
83.795 245.918 102.513 269.782 128.198 277.55 cv
.603922 .419608 .0196078 .0313725 cmyk
f
164.403 277.55 mo
154.007 277.55 li
156.315 277.255 158.581 276.83 160.801 276.282 cv
160.801 277.5 li
164.567 277.5 li
164.514 277.516 164.457 277.534 164.403 277.55 cv
138.595 277.55 mo
128.198 277.55 li
102.513 269.782 83.795 245.918 83.795 217.71 cv
83.795 215.615 83.8983 213.543 84.1 211.5 cv
86.2879 211.5 li
86.0787 213.543 85.9717 215.612 85.9717 217.71 cv
85.9717 248.402 108.927 273.763 138.595 277.55 cv
.6 .415686 .0156863 .027451 cmyk
f
154.007 277.55 mo
138.595 277.55 li
108.927 273.763 85.9717 248.402 85.9717 217.71 cv
85.9717 215.612 86.0787 213.543 86.2879 211.5 cv
88.4776 211.5 li
88.2606 213.541 88.1495 215.612 88.1495 217.71 cv
88.1495 249.81 114.2 275.861 146.301 275.861 cv
151.306 275.861 156.165 275.228 160.801 274.036 cv
160.801 276.282 li
158.581 276.83 156.315 277.255 154.007 277.55 cv
.596078 .415686 .0156863 .0235294 cmyk
f
146.301 275.861 mo
114.2 275.861 88.1495 249.81 88.1495 217.71 cv
88.1495 215.612 88.2606 213.541 88.4776 211.5 cv
90.6673 211.5 li
90.4419 213.539 90.3262 215.611 90.3262 217.71 cv
90.3262 248.608 115.402 273.685 146.301 273.685 cv
151.315 273.685 156.175 273.024 160.801 271.786 cv
160.801 274.036 li
156.165 275.228 151.306 275.861 146.301 275.861 cv
.596078 .411765 .0117647 .0235294 cmyk
f
146.301 273.685 mo
115.402 273.685 90.3262 248.608 90.3262 217.71 cv
90.3262 215.611 90.4419 213.539 90.6673 211.5 cv
92.857 211.5 li
92.6223 213.538 92.5019 215.609 92.5019 217.71 cv
92.5019 247.406 116.603 271.507 146.301 271.507 cv
151.325 271.507 156.186 270.818 160.801 269.527 cv
160.801 271.786 li
156.175 273.024 151.315 273.685 146.301 273.685 cv
.592157 .407843 .0117647 .0235294 cmyk
f
146.301 271.507 mo
116.603 271.507 92.5019 247.406 92.5019 217.71 cv
92.5019 215.609 92.6223 213.538 92.857 211.5 cv
95.0499 211.5 li
94.8056 213.535 94.6796 215.609 94.6796 217.71 cv
94.6796 246.205 117.806 269.33 146.301 269.33 cv
151.334 269.33 156.2 268.608 160.801 267.263 cv
160.801 269.527 li
156.186 270.818 151.325 271.507 146.301 271.507 cv
.588235 .403922 .0117647 .0196078 cmyk
f
146.301 269.33 mo
117.806 269.33 94.6796 246.205 94.6796 217.71 cv
94.6796 215.609 94.8056 213.535 95.0499 211.5 cv
97.2432 211.5 li
96.9878 213.535 96.8564 215.606 96.8564 217.71 cv
96.8564 245.003 119.007 267.153 146.301 267.153 cv
151.345 267.153 156.215 266.396 160.801 264.99 cv
160.801 267.263 li
156.2 268.608 151.334 269.33 146.301 269.33 cv
.588235 .4 .00784314 .0196078 cmyk
f
146.301 267.153 mo
119.007 267.153 96.8564 245.003 96.8564 217.71 cv
96.8564 215.606 96.9878 213.535 97.2432 211.5 cv
99.4381 211.5 li
99.1709 213.533 99.0332 215.605 99.0332 217.71 cv
99.0332 243.802 120.209 264.977 146.301 264.977 cv
151.358 264.977 156.231 264.181 160.801 262.708 cv
160.801 264.99 li
156.215 266.396 151.345 267.153 146.301 267.153 cv
.588235 .4 .00784314 .0156863 cmyk
f
146.301 264.977 mo
120.209 264.977 99.0332 243.802 99.0332 217.71 cv
99.0332 215.605 99.1709 213.533 99.4381 211.5 cv
101.635 211.5 li
101.355 213.53 101.21 215.603 101.21 217.71 cv
101.21 242.6 121.411 262.8 146.301 262.8 cv
151.373 262.8 156.249 261.961 160.801 260.415 cv
160.801 262.708 li
156.231 264.181 151.358 264.977 146.301 264.977 cv
.584314 .396078 .00784314 .0117647 cmyk
f
146.301 262.8 mo
121.411 262.8 101.21 242.6 101.21 217.71 cv
101.21 215.603 101.355 213.53 101.635 211.5 cv
103.833 211.5 li
103.539 213.528 103.387 215.601 103.387 217.71 cv
103.387 241.398 122.612 260.622 146.301 260.622 cv
151.388 260.622 156.271 259.735 160.801 258.108 cv
160.801 260.415 li
156.249 261.961 151.373 262.8 146.301 262.8 cv
.580392 .392157 .00784314 .0117647 cmyk
f
146.301 260.622 mo
122.612 260.622 103.387 241.398 103.387 217.71 cv
103.387 215.601 103.539 213.528 103.833 211.5 cv
106.035 211.5 li
105.725 213.525 105.563 215.599 105.563 217.71 cv
105.563 240.196 123.814 258.445 146.301 258.445 cv
151.408 258.445 156.295 257.504 160.801 255.786 cv
160.801 258.108 li
156.271 259.735 151.388 260.622 146.301 260.622 cv
.580392 .388235 .00784314 .00784314 cmyk
f
146.301 258.445 mo
123.814 258.445 105.563 240.196 105.563 217.71 cv
105.563 215.599 105.725 213.525 106.035 211.5 cv
108.239 211.5 li
107.912 213.522 107.741 215.596 107.741 217.71 cv
107.741 238.995 125.016 256.269 146.301 256.269 cv
151.428 256.269 156.324 255.266 160.801 253.446 cv
160.801 255.786 li
156.295 257.504 151.408 258.445 146.301 258.445 cv
.576471 .384314 .00392157 .00784314 cmyk
f
146.301 256.269 mo
125.016 256.269 107.741 238.995 107.741 217.71 cv
107.741 215.596 107.912 213.522 108.239 211.5 cv
110.447 211.5 li
110.099 213.518 109.918 215.593 109.918 217.71 cv
109.918 237.794 126.217 254.092 146.301 254.092 cv
151.454 254.092 156.357 253.019 160.801 251.084 cv
160.801 253.446 li
156.324 255.266 151.428 256.269 146.301 256.269 cv
.572549 .384314 .00392157 .00392157 cmyk
f
146.301 254.092 mo
126.217 254.092 109.918 237.794 109.918 217.71 cv
109.918 215.593 110.099 213.518 110.447 211.5 cv
112.658 211.5 li
112.288 213.514 112.095 215.59 112.095 217.71 cv
112.095 236.592 127.419 251.915 146.301 251.915 cv
151.483 251.915 156.398 250.761 160.801 248.695 cv
160.801 251.084 li
156.357 253.019 151.454 254.092 146.301 254.092 cv
.572549 .380392 0 .00392157 cmyk
f
146.301 251.915 mo
127.419 251.915 112.095 236.592 112.095 217.71 cv
112.095 215.59 112.288 213.514 112.658 211.5 cv
160.801 211.5 li
160.801 248.695 li
156.398 250.761 151.483 251.915 146.301 251.915 cv
.572549 .376471 0 0 cmyk
f
211.4 277.5 mo
208.725 277.5 li
205.674 277.5 li
202.542 277.5 li
199.316 277.5 li
195.977 277.5 li
192.5 277.5 li
188.852 277.5 li
184.981 277.5 li
180.819 277.5 li
176.239 277.5 li
171.007 277.5 li
164.567 277.5 li
160.801 277.5 li
160.801 276.282 li
160.801 274.036 li
160.801 271.786 li
160.801 269.527 li
160.801 267.263 li
160.801 264.99 li
160.801 262.708 li
160.801 260.415 li
160.801 258.108 li
160.801 255.786 li
160.801 253.446 li
160.801 251.084 li
160.801 248.695 li
160.801 211.5 li
211.4 211.5 li
211.4 233 li
211.4 240.729 li
211.4 246.603 li
211.4 251.609 li
211.4 256.087 li
211.4 260.206 li
211.4 264.062 li
211.4 267.718 li
211.4 271.212 li
211.4 274.577 li
211.4 277.5 li
0 0 0 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (feast5) ()%%Title: (Facebook.eps)%%CreationDate: 25/01/10 3:42 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&H!_N(c2`1*5e]Tf;YFYp"j2u2!gL)h-koi'+9`)t1^VJgchkc]lrWa9T#ELLjh/ob0DU;I)NQGmZ6[WE\5]JNhV7d#m>"m.%hoeIEEf5\<(+muag5]GeQ$/`o>.nU;Z=1%JG1l@AO-SPfgqCJ2gAU&LkH<A$eN5FTDK!'fs1?r:*]+ts9!`cqH?ncQX&s^_hE;ZI%eQr'Lnat7EFLn[#ISn_>)?P'AVY:#]Ee!l`HJ@^;(JVq=Y^&T4T(N("TZ-@6]\C/IH,"8<"4Gd!mOMQ1i<At1Hp;K@q`m8?U'$PN%K?HEG5_-/lm+"\niMkGt2Z$:@p@gRJA[h:)g?_#@m2EWR+.DQm?I?+OZKH!a/bPt5qY&A([g7`th^ppUVACgO/,PWL`Za\$BKG7S%=4YK)<o/"*$LeI&.N^@Sp"*..?d$78];KhedsIm\3I\Q74KWf(Vbd?A_ToGDNW,hW:>T>]h6ZfRT<b6'ldK&K3qo`m+C3d[G\K@G%2?SQh5:uB$fmRQ,5r:VUn&VWmU;q&":>9^dh<G1Z*5/c6?TRA'i[*=a^=g5-e4n1;>M*,]C]fO*;tN0`5DRa"R/leHofE+KlTgDb%O&lJD;*'H753b<p4LLLnRI8=CpZXm*Ib,uooH-A'p8#1DhiqYbID=ZSZR12bedhgERT;U3V%nB'";,K0T7D'qiK:SS[+%@&g7-?9%'0,9f^/j$'rOZ2/]8q!3_4PH$J&fD*^5r<[FUg9'r%q-\C79Ct2!NO["7N+23=_?q*;nnX=NYWfPiFS=*2i78);iIi55aBq^5o+<%+%tQOr/[]>FY$Orj.5j(?E)P]9V[/?)\'j(],M3lhIt8_.)hEW8e8%d?H##%FV=lps'mKo'E6$MfI#HQH4=)3s03!@#leDH3@F%(%fI$NW^T^0%+#-VV;9[Z:r/^6b:P<2HYYN>8>!J=iG2[p%dqBk_pCC.sGtbb>\V1"IS[@LCH:g8qNRj,So02.[kT?,-p>LM>7!k$(%RU2aPL7_QTgW+Z.EeWA.mDJu!$X6-u+9,9^&VC%f'XePPdpAhJ6MX7>`u;Js+QZjWGb7k0.+b^<jW!@jD)nF6.Aq:8H7<I_?aKt9%__Tk*/t(?Q]UQ?u?H)WsIk4%M)r!l.6LVnn=9_u2-umAk@u#)bej-($b:o7t/o=->PnY\UHsH/)V0o2j;6JAo.Gp5-hBT[MP]eUs%CT#hLrU`/LUQj5i8YqjK3TU^hcldg;IY6$CmjXLrBFREHk>NN#<4]Wq#P*Xo#;X4fHI0j*b<\?87@]QdGJFY_/#S`c9C^FlF^65A%pdqlfcMe6)?3rg[+'LDs$U3f^Tk)ml&q&+lf;667:\s7"oXF#R\ioagXjS`9-iL*rkjRGnrY8%pRhQK_d_Dn9qE+JJJ"$/-qAfAB%s3lFn^\KPZ$10OM\n*fY2;hlm[nWWk3JK3#)sYa98Qd7X)t%S\*rX&B#J*!L]#7D</sP/9WX#Z/6E<9(KPrJJnMCJX=<dTufD$_o%gP]E1r:InAg"cs9npDe9XeM83dT5VR@i.k.RYPa?d?+'>#g.5[g[GE/QAdnHet)@A\41f#DD^-#poI,:Y54r<&(!Zg8k\5$??[m,%fK,Y3P)\p`T$Gf?j:+-q1@Cms2=6Ua4ieZ7-am5>r\IbEl=N/RS?P^-!V*lu)Wqu$Q;?'9iO8UNLk\IK7U^".CB0!GHO34//c'ge%nJUf#@6Tt)Jo,Jk4,ISQ:+3$tP.;LnV7U;l7R*m,bN<]J,R@Nll5dLkj))1uG71O;]-Y3(k&/#C:#!V.]A_5I7P#D(Egd+(4@K_n%2"CXAS_NVlhXS4?IVa(8;g2):Ts`6F\<8Q2")FPUNoou*;ta=Bh(l4l@@L9\,CKs5=nF\joELrPF:$*R7cXNC7Y]KEKGchuX,bt1%rW`2)A9ju>8]s'<Z:E#%]b]cLrBsdE9\ouA>5fD*[:)N3]/r1Xr&gT^PbaP:ret8C'"oXGhlJ2Gla&.FW@``".:c.UJn![11I!2J%oh\f5mV<.#!-4[L=/o3jp6"K^(::lS[T1S["R/PB!Qj(hHRlTK9557*K-"tjJUS4<@q/Z98+I]VA3XcdQXA<t2&Ll8U_Xd0DK*(C%*kbgfo_+RH-<[ed-g/$_.=Y91+n?/nVbid@+-Q#8T%XD#/_N:A]LT.\,RYb6<P!s4>_DA7iHQu)in^-jePqNqA6G[J5+#(]4<Ni_%n)dk&^6,.LI,%25bFh`sG&K%,?)gbN;nbb8;<aBo3[Rk9jQ*kU<$(QFg^"&rXYHCX,irIkVs;de4NFp!]7T36cUbGPjgW1<(4%q1%IaYi*GG#.kDa>t3;@m_A<h(U1^6?+)HtUS?HH>%3f29GI\Vs>D:.4+j.:\YlVbS=?c4g"KmT/rcBoA%Zj31HANcS$ePN&ZuHU,,`%;Ws\:BkCO,3\MB5NACQnM!AM],khV9NT8P;4K;<bpO/F,3Rg#3F+<bOoE^#$IiAh\QR7eb/Q1D=</T7[q3!Q^8fq.*HWY2>m'k@;%S*gEF:u0FuF[TCGHTFU<rYNRVdO/rTdFqH3ahod2*C43idgJ_)_*HR9[q;?m'jE(bS4%Wn\eO0]KHn1ugnPAB7#!h(#5Z9LK0Du1%-0ZF`LIbd8;4)F[-2(F^\P_,M`-89frA9KRTek8`0s;r``LO,`o#1O'5)$So!hDqVinU-u?<YZ$pK3.[c15nq1WIl(4rAe&2DhQ!%Jf/\0\s'L1<pp0`_4/_;PMamYQ2<5gO!0LQWEl8D0"g2+YFe/0P$8I958iSAnX!\i_Je,>&*]0a-m*E(;9JLpdCAm\FlsU$nP<_L%/E`B>H7#W"r^$QAN7:$!O&4A?<7)K0k;iDgh\[#F/,i-5B;*76TVAVgq_QIfBYS,<\HIn^H`SCP=o'PrHP,UZCS9%VTou\E>UJ:k%@r.5com.6.BNh#3ROP]MNK:c?h_LuZanmOQcP4NC=@D;Lk30(G0par@'#muIPO.V7kOhn5QbF\*26K;f=h"<lRau@J[Mi\AHcu,X%T4A*?>N\q`%6S:\b_/bj9f_Si7=XJ=@<'H]CIOJu6HQTuogVX0jc*1"eeV[9=f'_D\gjV^7"V:pqP)UEh(k(Vj1@qOB&BPgLNo17%nM9PY)k*U'''(t.>`c]f*/n)(q40kSanX/gdjeZ:8W@c>&et17mW#EXQQA][As0opchBdJ@_7cBZj72k]!:*bZeq0k8,Kn:87(;R%-1u:hD@pTlT:9Jp^Vd@D8)f^12:S$;%]V'a[)[4[R\K57&KLa[j-Wa.(K@a8fN:o.V_lD6l_EAobl[Kc-D_A9a>C12;tQ^!j3#1g%eJmu>'[e"#Z1a"d/UYesj[8SiVU&1_G`7DdO"6kP.[f@ADP&AellkJ!:'q?/U!XkKn&5/V0q)&=T:Gn+Ub-sF1[P_p!J5Y10/PR2%_KIJmB.:.,Zso<l0)@$i1@d-Yf7Z8h.*p>CMk>W;.bUj08S.;JHq^oe1,gKtP]:5ZK_R9*=H*nsP0-)c["qI6\b?XRTeRRZ2(+F&%p(HbQ=sCm%99K`NF8RWfFH^JFI*&"S\$?5aSXLtK1=nnKO'+bK^P'-N^B<j7rT$l%j&-2P2VGuKl]`Q=9J(gXFi!]I*ZOL"CXm*/%,=8q=()?.'M.P^!i%`JBojYk_9mS15DPRMk7[@gdoU<oHpq`t>/o;C"9T#_pg"PMr_J^$mASQ?eI?tiIQSi2fo^Nqn8`MJ!h^maZ%,[+j1JgjmOU2pFbK@L8$KQk'nA*`"SoTuYA,M7(jF=(c@;'"MCd2!kd3Q>S$/W\7P)l@@9!p-DV:$P/Z"_EK0X]"e[eFn]ALp_Ma%4U3E>1sCT*W't;l0$p:!b4G7oC^m-5A_94YO3'PO2"%/Z`d1>CVhDEj[#RQ!PXMuoIs-laq#J>+=@@H;bnRI9=Y0nk26&jbiBnse%k8AS&.70>o5=>ErTLD5SpKW#$k1sZqouce@Z6a6KWoumnQH3u9O)d=Le7UL=;n_3TF$qeng0`Xq9'`C^2r-bPH8'=YWr#Z_4Q&[]%q^:GeQdnXp2^)rS;7;i4CkO34pT3C<)BGLRfft>a6nOj?eA_8G6]6]V69D.EdM2M:XE^OeSagoE*'(VIC&;k1BP;2mA.M$`Mj0gV%fjdT:V]9o&/neGtP44l!#/clYT14g"6,f9]VYsHc=JF<FGX:'.qp8-CK;gapBtr^"M.HWK^\s(M^Z='p=te#]W:63qg-Ok0%lBma%GTb>h#A^r5o7?P4gk&WR3.!h4aWS%sq6YX9`c-tb^/N#n]j!K(LXE*cQ;D=CB%/$4mGT*Zo<k>V(nuBpSJng=8Wp4Dbtu&!>E;7"%%CKZ&*mNn+H&##Kq*a^QljCnu"f,9#m*D]XUDBP0CIj\fqD#8M=tV>@hhh%g1D6/5A#Ybj)M\oqRf&3?A9s:cI?uVu@PR4S;Th;B%r`[_uP[ncQSXM$\8h6k4_IO06TKK:,Ot<<6Ahh)[K""*^pV8T$d*,ra$YVA!]5u:HU+Jo@&'_P9$$3pfe7Zu/o3/s!#`W!(*'L:N%WG5'Cp=Jk>ItbY'pDrP8>e3A27&<fq7\FUuBu&P9oTN2`O=K"/-@]X?EJu2NiB>8$=aX#7>W^X;(8igUBp)j1Z#sT$%-I$SUn-kt%4=ulb:2"Y$VcXg1m;G;p5+BfWY73DN\3jSK_f*QdS3<+mA!*@_7Vg65Z"/b_G!&1hLN"hh%nWCH-;o&Qm>oKf[":/?Tj-NaqN2ij%UbO4L2FdLm')%s^1#=N_%n6AN8&/78/NYC^ee$8#7Mb5Idb6g0/V*sfZ/*RKBOA_,%ukLTetYoWglaD7#9I"K<C58kHHUM*r>!d.%8c=u$WDQ<Se5LX=9Js,-:Y'#Y,:pII<'BD93g'.P]?]gcCkRLhCrd2(oU&5eVN%fNNs._C-]]q8*:k!TpK0&K'uq76A'qR#51=lF%+!"jD=>*+(ah>\t$@LKb88tT!B90-%r.mN9R5QSS*O/!E012&67,$aG-cpLg,UN9s=`;ts"WgbABSpR9,FF74FMG2/1aTUn=],oH%nWPpT,W3JK`Ptf@cV$728X:iS%,p#f7T8k>Iud/a-%,C%HVF,a0]iu3Tq&iCcsq]e/,;!bZ&G93H@U/),8$d3dA[i%b2$Qb0f<'o%7C6@%?douSTO2Q.BXB,TR*+5pBcI]XM.]tkl"3)CBV-J3f#XRE9I9/4_8b&F4VmFq0\=gf(\cR-Nt'rEa`V6TZ2?bNe8p)g;R)$k%gf=k&[2<k1WI%>,WAK#>).O8i7:[am;Xlbd@]rqf]b\i,o7"jY0C5V!(fu\fO88%sKkc#**ZK!EV=[m8\ZeCN')JFaP@?Goi_2^u%YKS&g-@I@j9\"47`*'<7o>cS'>r(LZRNU'Da#9bsXlO[WhI6]Zc=!8T>[$A>4XFM*4q$Z$1V0B2P3S-AYrP8gc+E"Qj1aNgUFYW5%%AjZ24dPJJV"@bH19)8fXQ;uXE%BAV@HYFhDTU:!Hn>'Og,[L>&R0PkJadDW/227V57"CMre\rPZ9JGnVeUGRbp%YcC)oK2`:h)E%]aI9]IHcs!N(>HEREsARg,1!:`B$k<c-IT"dA9Wqk>."sB%&!V0MbMB[nNoK#H\[8^cjtoJn5M6hN>4Aa=:,k<O'U`?]LZ3PeA.i%J'87uiP.2"NS$j@in@LeT.!U6:I%gZE2M`o-LiP_:0bW\rMbsf&/QO-$f:,D`B`*(*+1!s4LH]ROul('LiVBZY.YXoN1c-[_LUeU%]b=QaVU**AV[+`C23;=]>IF>[=W6j-T$l5jSYJK#Vlb-+49X0-..as3=5%EHj+2mU>J9Wck=G=A;2*'Hc:d>O?5)5<Q.&e6rJ_l0%8:KG9G+eJ+)im<:*0Mi/c1/t=>h\UhhVWM2^H.)%l@%j(<W(:aj!c(-8%66;GQ#)3/-?%4:>_]?X`F$tD(ZQ#j/(FG($S/sRJc-<%flqACIW`6*_<hrJec)WBdWq&'$:qLO?i8XE^1F''IVH6[h'.CXbkk1c_3HA:.)6k=EZf5m+,dOn<r9TYE71@eHk_m+n+7+9ZKr?B%h=oc9nOoeO,1)&t$1&'oTNM3.UQ/i)6i3fV)&092'o:F?mIpSGC4Xgu)W9V)1\Q.djlPa#gO+?q\kB%GiOYtE?5l;:rdMQJ]KGjn%"*p%Pa3AN%l0bBjqKK.#H;2;3h"^Ql^'?qL8gg:?oD43^)])9lRr9m1ZiAZ#,u4\2qZ[b0XSS6K;KSX>XL4nJgYM#j'56.^ip9g[%h0a(q(EXKmB[%9TJ46SR'PmGsX2;nDc%23co4gJ%WjQ$4%^4.2(;(Q.XffRbW1.o;??Y.UQWs4L5.mmtY[4MOf!jRkM`j,6N5DFu%05K%nFPu7uHCI+2WgeN[Z]=2a_Q0r<D<^OF[S1pK>P=?b06bUoo&3Tf\cLt@3R=p,BP?n`_+:!`Z5Ro(JX>-\i8lntN>fI&qSj;`%)ML%^P3]Zm>BO_!SN+=m:\/\Sn4_1!CsVWVcguOflIEPY\*7`1(<tIIHSp5p[sc;@IF%Zd.e'2CUi6'g6<1)O<MO;0/XV>U<O_8P%Oc@n;FgJX_"DB[+B%5%n<O2i^.47%X(F]l3b.e!f+(ZL)SKYL4Guj&),#+e%=i/?)0,%Y-H.dGZ'7%.Xo#M3mUB/J?NP(p1D3MV_%lPa?3<m^Y^Qj12so!71bPEuA)Qb7ig\kcYJ!PLs/-kiD[YmY^@)5*o.rt$"F1Z;o-QOPU']Nf],#(:@nCD(KGaVmJb5oWX3Uf4Q<%=A[@Z0cDKhPW#275fb,p$!J_tPQk='Da6f225>$h`sqU0'OW8rh_7dRJsU=8n8_7,@"Lq:<>0]0XFj?EYVld=Fj`1sZ7M@R>E7fK%/i6-QQ>UGC(fWO;qWu'`h1:'#DDSqqU9,/Q9uB;qL!i\ATj"XmQ!N3b/-E%Yn-r0S->+Og_&%*L^cL+B:ePY(-m5Z`#1lE,9P\YP%:Bp:frR0sG.XUR.^Y7a=EOdcM"`@60rMBOBY#m[eI8jH&<)0&lha"`X,$ON8TWo0@TAeNrJY16$=5ZT%CW24HiQ!>@nf'jo.U'fD%imi7TGRr/ZP6/2[ikA6_ma4Y#=Fk5GP7S!O$HUD,j)O[e"dYMeEI:teS`5YToa7t1h2h$a;XdqYh#pO>]gXR:kUF#M5If[^-A^fk%%FQKu5b?a?0qOI._fWSpd7_u0,+AOeJH8UNW'JXAjTj/]RD_gRrs%`'?Vbmeh.HD"qYT8[s0-S%9"_Z3SGi3J9,fK:JNq\5\pa%V%^ti;7U=F.jq7hPk%/?YsGE5NQpYAl>Q8+8^?/U[OMZ<O&UPj\)B0WbM2h*]s]bMB&VgofM8YMl.2,UMi=bQM`jj84E`>Bo7d'*JE%ghCudXW3:Fl.eG2mdkCPQX'H$gN<ma,nR*>BH%3^9YM$/,I6&OQQB*"O2qVjPnU^^s4"]0C#os)b[17_1shThb!"7ZkW^WGfY"ij%?GH+.cYBccS/a0URcjsLc%@1*<uh8#irWoi0-]NX&#6N+lX0\2f(^=.#/-A$]Dq3.fQ=sSf=YSSUt'ial/5g;qbM!6?S?1q<`B"C%e!.WIl)*+E;7<g"nuntgraVP^Y_)l[Re56YH?dZ/`C7mu[S`\bC7S*lK5Nc!E!5l=^\UIV-PGsoDHct0rrSrk[,#HZ]mJA2@<D8d%\,'L%rb3!O>Q*\I3'j=fiK$OMe3/^NjH2'o0L?c62JlKEFk89)]D^JZZ[6&llb%>N7D3prlI!,G=*Jf#aO(]oHC^C7^BFdFA1EpL%ppgj_cH^dOpcqmd8N59?f*b-c6*'`^4DFNcXmX[<OQ][6U]knRj&`*N%*S.i6lUZie]M+)b@eYg(8BjQ^&J:iVGgqpR/>]O]D'm0%DS>od.!W<Vp7D8]Q'7)Uc'^^=2(l5:BUg./O5k,YfBW@c.Xl+1]3j@)J*Jt2T3e,cIuDT^.&!^JBp"\LidS64nD8P+'otFp]Eb2m%Q]hPOF<felI!K1)bN6CKIsWY89"d-0cOma8D]L11VSg%1Xa,CL"M;6LXM4EjU;PtglPJHIDlkX6bNo$u1[%54ah]YmlJ9`i[G,Fs%Ts9*T@_-cLa+C^n:'..4:E'8m=aJcm2;NA4[VqKAf69Bi3(IjrAV/=Q=sWCN.N#.Fl'[-.hDOt<qlaW#<4$rElC`;"o_p=s.n6ei%g.upc%_.BelJ9Gf0'9Tn8OPuC`?9[TO(bZj9,*',r:8?T'momskF%eb>uCBV$XW#"<qd%JWkEf4q]MgG[3ga.>dR-bId+&e>p!VW%[e\?fhaQpSjHdEEV`3gRSB_$P`l\B;MU=5\>@m"88Y\ING8p!(0:ZJ6X_nZ,_c8=?+I%)@mX=Cb4sl/P_bNF<=dR+5h$NjRHtj=P%3^'bsS'mj*58ltPrfk-\gJ>uCZ/KiVn.W@kDP0d=;*(9ukEN*V&6i_j9hY(()7!n.Wq(tg%&mBUdm!IZ0#Q^D6mY9?b%?32gc@XD%b6(pMc%L>p,:82DZBWPFU;^#t'lGr^T&&liMs4O#4O+MPd+VMg.oZT=Z3!)VV*trLfLVG^Qg=<Ob4cSpOl7&p'=6renMXE3E)H2]%o61-@QXAIWM0ce[NLYak`#ZFV*6SNChR_gH=0R;<(N@jpQ0`^^[Bs3u]js'hg3B'X?C">%KFWtX]u./UlMUM/C\>#k4[t=JGl#$n%$U!f>4g^\u+"1<SFR:ZL/>Q]""ZsJj?<TA321)f.rR^19H;RkC)]9D_V=.a%jh"8,e8HF7N"f0pUeoOL0?q,lPd9-BEi4hJ[$acS%'`8,\kcrV8+!r%d;T'd#\.Uh7CBY&PRW%<.SE9`Je+WM)qHSd."*jP8`XfV2%\TIRo@sFRepltCr\#46U=<[M(t,@=V3m"#oJ[U0%:[MM[N+-(,+ZuMJE=-WRh-LG08O6`elQ/NZU`XUk(+LLu=\23G-nVJ+7p5btfmW:BWQn@C:n=A_7!4O<1=\rG52=0P?43:0)ZEDJ%`P:.*o)6a9pK+8`2V?o5Ab<i)KCmU2U/qPYM&p4IMFs0u<q>-dj_e$@&aQ#fnfa(ZJoXP+8`"H%3U3B?0m<#t^$phR1d@cQpS*!t%Fj5-6Aa]*G^&FS"08"kIraW!u_Jl_X<5kZS"dEGmTBT<>=eVL&$l"P2)6-ST\8`:S-dY-Q`S8.cRpDBfFu(rpgu"Eq;(<e2;J@To%h$T/=3$Y[>M+$FQ^1]#aZmAm=oX;'L8bXC_j?T-JUe+g3WSUqPV8[FcQ:ir>[*[RNh;9X_9$5qsHYG$b1B"*e3OG'QM0cZ\.AI=!%<`rJ#b;F#Ia]*hF\g4OSn,8Q]b"Pi@0<Mum0<(u=p'IW.WC>OCLLq)-;6!N5nCm,<??B/V9ho_La.p4oCu2Y4;P52<<*1BW8PU#!%`Ft>U;0@J7QE#R!Dg*W_"t@nlBf[\^s#s!7-?=J0!2dp8]mZ5?+ct-sG+/`kJiS"U<0e:(SK:>dCq\<aK?e9QD4ac:[s1'JH[8Z0%rIjU%Z#"*BFZl'G)+>2^bn?2:*Dcs<P>=<P]cuI,(g3j/Jjl1N7q7$rU)s\8`Bkr/OT8*UlAMmj)0>@Z7[%Ns\?V^R+&^$6QlWlQ%UmL@05J=ngV4D(RYuhfA6atZ6o"+XsjaknYG)+ru[7s(""sTKu*#@tl:Rt]`BLqPhg(imLj(\+gecC"%:N%ngC:F;51'A;5kt8T-%K:TX5XeCQ)DAgFJq6`NmiA(O)UO$,$h=^-Z(30qj0!*_jh1bOngPT$73*99bJ*`["c*0B\?8fcVcf,nSY[Xbbl.7hCq:j4W;^\Wj%c!T2dR^d)`XI_D4'6E<]lGQS3k+khB=BKqL3)OGTHP;<u^JFB4UMTAqn7D9pAG+12c_P/grTNF5[e'+>3n!+AX?#lNS#pSqI;@eL%s6Jh(m_gQh](oU6o^!Uqj`]t9k-p)Y",tm;QV3h6$]eAsT81Fc]=5&Z#X@dDT_PEd\FI((C9]/OF)M'5ITc8dVLK7ioP/egrl"(>%qi7]8#&jtiLW!!/$gm]"h3Hi`me+'.?*.S,cH<9#C"7Q:UOR1ZkWF@AmQ]oP,igB3=SKGYqZrS&GO1[`M%;jDmsqmtgU=aZ/&)DH%E;/I+\C0^2pOheXad$bU5O@Lf+6?%iX=`6Mdtdgrg8%?3VnMIqEhsj*B"L4>e4m+<=MM9kNTKt&.B0G_RDje)7A]_<Cie`Z/%JRD%nj7,*o*:CMTb^PnAE2O7G#.61P:G*$?bUD-.WqU\a/@IfWm[Nnp=-Q-W$SFFPM8_L1V:-XMo8r8rnVZuV8kAJ&b_YDrKhk/WBO\&%h'/+n/Z`#,]AJTDLKNeG]N<9Xf'5PL!@kK<0i@f;Z(\8KIQ<k`(J9g)7A\8sNt8(.7AYu*V`j(-M3[e7hp"]gU_[/$Nn(\Olm,[/%EH8KHj*p2=<SDm$WL)aZf<;n9<N7qS/a.UO>FhbXe+<!"Ei%@KGHLC`k9R=/PE"Ekl+(h`)H9lg8_%]3^)ngTSS:6'*%>&P;<df2%Ni0/1q&"HC2dj;"],MCg:p'U1D<no?]4@150$Qj8F\_\'cY94[f?]FQ9>>=Wqc@!F:arb?C?s0;T)1YCfh&:;@(uN6XE<LuVI!8%%H8PqjI(J+u-+7r:Ds;T:^9uThXRu-sI77<'iUtKo>#6Zh=K'rbG!:!+-!.ZBomZaVHg`7]HG6S,Pa*"VBA8^=(KF]6[.?4t6W*+E%h"d#75HBX+IU0^Z%k<9^$!2Ip;sf'7<-iCqhiGLq-!,D;o^M`eoAb3rV9gmQqrQ/H[_<e9I(3!Qg<a_$s7r$el-[LUpSurJP=c4Z%BNqrp00+n^]q("`LY=qoZoQgs%M,$$mebTd$S,M=<*C^C]VDHk\KC:D2c/mV2d5Ilq3,Mnl*ESrYr!Q0K0u,-C<Wd(mY!)BGC'jm%VQeJpPd.0=fIp$*:H8l_FJBXNL"@?;<k:K,[2<?@7(%"k6S&,l?iCa==ssE(kKXiDG#gh9[?\6O4O]YPr=?Z:d`-X@ddGT\*342W%F#i%(S[2Ma_adU=Tk(<umI,ha3d&uZDm,2+;D"c2%fHp%(]D[l:oP&UcJ@c&qeVs:IZ.NC(:i2%Gr(e"qq%GQms]1MI+3>C(]'#i%1M_<CG<D.4'mcMR*pc:o2SFt!j3kGYgNMAl[#S4_@KT[Rhmb+.]%ZS`8)JN,E]'QbGPZ_`?i/t4hnAnq@cQ\<en;tPrlX*cVl="`%WpjHj[.!l"$her<h0[GliPsUKN8j-ZYN'3gHn"TcGPFlc#[;$p`\j#>/c'K:Ib"75f"B^?;dB8\HX?aIFb<pni7NKqrp+\#WM[1P%BCVkeI(<"dH;JJV?C`n8,$+rg%Sn-qpMRDTP4(TIq#+t$.YcsJl^uJNF3@4jHMRNL:i]="98^?rcX."CNaKKqF3aGe_U[e&Yr]GZ%2H1Z3>oYd!P=Mb9]74PP+(p&k:*s:!IJnPC5!*boT$4HWGP1+)\aarg(9a'7@sZ\(m2g\Y^#IS0''`M9?@*@CB/UF,^AhFB.lLc2%3:TpeI<BFVj6M(K\@VAlp[Kiue1?ugILb^nB\kba\"ZYLDOu6H=?QV'3jEpNs(,[5C@3+W*TPYU5-_J="2<.$ZV,4@>O=NT25_Ch%^7aW2J_-JZDg_6;SP45m\c2FR.\3S%Xkq?SLGuaIe"'*5Dg!LfRFU=D2VFMda<l.Kb+'Vr;EELASN_=bm67M8<GKcaX"0`Wr)cit%W\nP:;5@+LNK\+n0lEI22i:3\J#$&T4^kBAh;7R+8p9)#[FO$"qW#4qo1HK!j@VX3I$Z@k:8_[sIbm&H._YlO!W93qg4bfYZU70X%p*32a>B6Rkje]Q:ai8rK)O4F,b[?f"-n9r(,g79H<L#HePnlt8#&DE)8r6'4X;(Vq1DP6QaXg$:f%gk!?I]k.f-&V-Dlb/nhs]%;%'hYRgd8VV,`lY"+M&bWgml/Rh5[,p6%L%gPTaQ&tc7[U-]gF:Jn?%`Mh_&=GkH#NjgIEX,j+BeoDdB-s)qOo-n'>%\>!.qfe+!Z>%O#'j[7RQdC#)"UQf%t$-^I/eM<*u[g[PgeRDb=!Ek@1Lo4r/^@X%e#Vp:Gm09St#"2Qa)uQ)&o&)=,/]s3-(/6/gi7In1.aLLCW%%8CfuXV%WTZ_@W/LY_F6V(2PV)h3pD<"!t["T,khq%jb[lhWM5%lL?(?,ZUG5Q5@Y-b"iqZiGh1=H_jEnJ'V^fq0+%/aV3C;Y4(`_%mDHBN>KHe$0/eG(9^4i`rVXi)<rX`mF:'>F68BdC6pbVb<p%l!Q)"@EP%bGET=+u7Q<G-6c_JA&,:'8JT#<2If?BkFFNFmNMFb$V%Z9!;QH=eN0kL96%o[lcIABo7.h=d$,:AZ?$=V92*\_)qBSuq>TRp:MX4eaTo#3_$g>PcqFhR5[X-8TUfmfRXR&kD'7ohf'f%j;'u%q]c$OP(TnlhJM3[H7q*)A]:3".d*$j1T+=Jp2`'m:l7(^e?nP@e><gIJ"U:B7>TN0hOLhfCtp!6Xd],P>*UZ*Q]#cj1Qg=_6=Oke%)RNWWagi7C+Z\.Xa5mh??X;qD;Tna*d2DOkH1m`M8qYGC`$V_;$Rs0^jXVW4,q<>c,NJ4CkX<HsF)jK8RhJ;_m.1<Bc%[XBkf^rI%7J`)<'jYU2MoDeY)0BL^`ZcF\s-OQI60na-BMKW49%g.*Fr"*b8VL&uZK4:Xb)APSm@4,)\WMfXf`WsE+j@2^QTTV5OY23scap)6%/jo;&<br]mdngmYA=l^BMtbt7X_LD5f0T<.fmD'24ULR$j?J?cFZY`2/8SZ>SL!S#B7EfN<'ZMmV$iFX32O'K)o8Jt2BLTbQS.E&%gq:t/qY[$.b];t=pKtB@(ou&H_#S.d-(ufQ#"Ot:mtd_Og+i\3=QW-6=I*;Q!4&i+*Kai?NA`K2=Cd<rRSg],>RF83GAsKsjn4W9%hmcL?;;5I$clA39Rlh$!Fs>b(TZ7*=45!]fM9a%0(mPUn`qT5]h>e4#\saT,ao6Uc:`>``3Mq4Y9^Z^=^ZGtM.,(uX6U+_I(@lZJ%I#8^`Ul^@r/1lrT8:kb?'Mjt2?M$m$DKosB-(:dd`Jlb-b`FGk$K(D+[,5Sc/<QRG)iA5dqh%l[%VeNubUuY1[g,_OM?*e-Yc*8B%B7)^qP"?QW!Q_lji^</.mW]EGC7*\V&#1gaC>\mYkC]T(JNl%8dl7/,SjGhW_36OjpXGndId]Gb@qsoTp>m7f/b?qB<HI`g]@nod%nkpnFL!i618g!%abT^0+X)Er"p'AkL&+J+5);lZB\ZUF.cS=b2N\5a;$ufd2,V>;^Ie%SA2%fjolqr]LRQ8'?JV'spEK6.I-feC^%K-.+-Zft17j9T^PMOEQl_]*.Q^OFU7^#uRD2X&W%1.G?,2-t%Qa.2l'=?.W\M(Om=6,q]%#Dn#1i\eN@E4eXdac\+Z72j%G1i?4B%_QNN;e<Ld]Ot:6,ed'BjVZu.OjM;nZoVgB;P!*4Wn)!bo)5O\r/\%59#t*1]0OFII2K3%a7uf0NSd:h#gsKe,cI^B7VQrLA;S&ZZ%AEQi2@o$/+JW.;07IAnB$38_A'J(LkLK13HiQEEhgk"f'cG[7P)`Mn\ZO>aj)pkUCe"guM53c*E"]3''Y"qTjC,Kpq,-.G@p.f>h%&6U=:GfbuT+u4"WSQlD[DS2#IM^Q1R1O4gmI+`b]'?Np_P1IPXStSY^#Rd+p$@cko4Lsf"mSq<4Hj!SsKlA.ZC+Z$1G2)"3DfeU.%Y`W!(KSDd'Tm>8:k(_5$?M)@G`i!A/Q^k-fZ&=ger&d9?bpR23Zb.3YOL[^\`l?(<%6+Q0AVM,GYL.[BM2OPCC-CJ^&gB,$pQXqs%76$hXFmP_()Ju:TJ!O02E>_Ec1V-%;)pd4gU#nhTFLH`Uej$2h.>gX(iZ5J%.;.#DdUC'aO^f3O^bJ`!?imu!+5,//^@>X)4]`H_%d7Dq%9CgH#JWck<Eqk>n7$arc$TZc(j]gTt%nUMjO8WEA6VeUf]sbJ5:W$`&=W3g!OKISg7c"24YXg6'D<3noO*]kT>]QFVV]:GA%CquuVJh7\!hOekI$.eV3i;UE)*?"M%kl*`hYgg9#$DkS?+Ws]Z+-j8g3<kD_`\;e/PHF)sXk;7<+fu/'p2t?S4p_V]rR%b+f5t4F%m=ia'P@>!MD.-\e1a`fm_6'EZ(?1YL7Cj^1ZA,Wt0*?#\$Fg!YY_@JkX#<`WgG"ja#jD,YS;pKJ(?,Eo&[B-n6AA"0*8@_X59e9.%+EMe=JBH/p.\u@`0ZVnDoU[Vp%'*iEjr3E>X/Edmn"uQi\k^pRV]\PPUf,u'cgXPoUm2V;dUg?JjbP97-Y^'''XJM-\X$mBIi7'8%5OdToUHM*6i]2F)P]sSgUA?[Jm[&K*D\-&96\oeR81nu&P>s+8@7e3#OmTV<OXXOoHF]3Gq,Yuhb="cjPXJDA=?&4KBYQrF5f'\?%Dfep&6@Em_h!E.i.iuj=5I'9$h#nU;L!k3dkgD9N7)mT03HXL'FOJn/83(c"W>Te%>B%M#3`0U##$nHSGdJI%oF/;R>B$qh3b>-5%K2.gd3+*5%H3Tq1/N??4?$Z]\,_pU-*4kbN3b$(JO@-L=RR'GY)++m>Jr5^Hkf>Ba_/ebV)j8`s5];dQGk/4Cp?U3G=<$LOcR;B<%Ol#+/h5lUjX1,G"c8jQHE4)+AcR!Lcl1dX*NmM2Y]tgQ+62$JBfD(A=e9f=/nqlLo`Nj=>43co/,_KMVF!7*MKJgIXA;`g`09S,S%SN3%OIH@R#P+1]u$m$-TGqpHt_I+f<EF$K\jFNNWo';af`GT5Ln1Y/J3OXMN/!a[$aH*H#f&jh2\hBBs7rMR_l^k?H-8X=ln?!h<%q>QHfj&fZB!`eMg;J*5h!*_`gg(G6dZE?:91^$X+N9/708k'TQJd$5Hm=hbPd3*N$eBGt'3ib8dOhSeC9$.oCTCt/e8Z(1acZ;^L%gh`da0Fe^TCBSG+M36XkQp_NG$O7.XiaJ#Im3#>XCWk[XCXe4>E`QAX4Ktl8\iVW;*aec=$Zb^B]AJWn?:fEi#FuuNV+s`hl`Ye9%O;)c4e+^W[;<g=6U?f,^O65t,BA)(qH$o"t*TBuBHeu!VG'6VS'G[%N.$8('"X,g1ABc;C8S4&RL6k+ojB+mkb[;Dh080hNZ/gZ`%j?sanr4:_:7OOAt1l_m\_bPOC;F)Aj8ebEBMcg=]kbnj-(S1QKd*DT4p"0cAK?^"S`Bq0cP<Hl@,)k7;jG1QKKP7kEB?ab8SlY>k%Xd>;$Vs'hiK72C/Y)K<W@Hq+0m'32-%eUHE3\s1R3\sD]@bt(Ub>-J6O7"$Zb3MP9hg;ioYTLEVb_d,q<Y7Po-->%km6ST)CoS2q%Y"_HK9@Z)gN2YqMU7qN?+=U)YCE_;cs5'Bm4'WHn+`SA%U1VE_Vs#T?MElDmR9Kg"1?0Q(.J&ZVSSb$U9F=AR?reg1__*Mb_k5VI%O/S#53$h/dB6UHCT6cWUN&g:?A^'De,;MU*oY$C)(8$g')+ha,S2S$/)E]4=R.!DkAk$^-Lr^k/m`;#TQ8^"OniS3l6Q9ioE,o=)%1/`m`aC#3UAjiMXLG;pnm5'rIQk+i)E<]&L:"^htnK)\9=cQM5DON]5o%W"\EY@!Mo^kmXcOHUqY4b<kl9q'Vm$q)Cl-7\ae[`?`%WO+<sHb$R;A>YEMXUEh8Jm!AAH+$H_ZLd?NhRicAR?&e*[p0k?UuXR:#W+*Sq6oQSbu6E\F]<n9Wcr!1SR"5k+,8*s$U)0hAAjHh%+)\IKO6+WAbE/t`jhm55`Fqj$3V)-Lmnb#R+"m&Hjc$\]>8>>:bBP5pR.B4c]:m64%k!oYPaKBISpWLAA$M!&ETb4cp<2+[iDSiJ%MIdfeU^X[sVp#rmU^L#e4d"e;_g-XQ4F88^]-N+Mqe)\"f*=A\cT@o6',4)eBCN\e]SIpjH-W96i@/CBc_rkt'FQ"962leL82JVQ%kHi[BG@V53XrYgp96loAQC`n"1K&9&6g0>g188I;Z9Gu-!@+W9kfClqA'/5iFa]Z>SQ+j5"2@?Sap#'/@sJtH_3=\2REX>7_)(R7%9X8,`BCoVg=;82?q(s\b2JY\rIO&m`e'OE\UcbakgU@`N@3I2NQ&\Y='/NP$N[#eAqTg!7;?>JG1/b=UN$T]KT<q+J+-HK&`?[!e%Au#L"+nTAU^0!icInjacHulPd4F%tM*T#DGbhn!QP4HuLI%-)U>rS])(1Y7$GrDEBo'WrOPMo!ed?Bq)-X!]:4*nc'baf*-odo=s%Ur%scack\<Md'eh_@8T1*%Vh"q$a"&VSZn,]jXU6E:eF()6RC#a08lFbH27'KBsu&@pWGSK1):Y_Q3X?bHX3,NGr]=!G'D\;`r'=%E$+5N(OjGET#Ck52L<&AagHecZ?62Sr)en13U\gqEcZo0FGUR@T[WWFYR&TgH>6]Z3/<M,GCNosE]:`jc;-AKrRu^o[+5,[HF*HZ%o3&9K.\FFm::39VDQYX_ITc(9>]AWUp+_f%WAcH4)u%@rg>jS<7O6b>`KSX.$"2WK3e,Ei,:/lH2KaIo/;LDq.:?r7orC_cZJ.f?%L)ll1Vp"Ig,eId^#Du-E.6LT,]BZo9N"!<W;dCgnX0&H;&(Q,bjC1^Dn]dmU],fX\<,">\N#X],.ZGJcLW<o=W&!_@\WdN7a[WV<%XAj!%I6<Nh.\Fa_Z48gCWfl1UdZWF`*He45T;TE"SB"\lH9,`>.Qp@3n)<,KUf'4j:>=J`CP7%WRQRf>Ht/Rhn+3TF>ij2@(>@6<%.]NB:?`rP,\?OcQD[!!Og3dT<Ni:T!^mB!Q$u.qBc[FrAgSb>bCpiHCCIFXpO8[C;YK>F(:#&pLNgcomYu3\V>d``eS_@#gfM@sC%pluEV)t>2a&4u4.\bN_0K1;3%-cmZW?*5S\m%J'EAj_GHn*u0nQLPsbn@lW$UWd2:V_b)eK,c)5CgZ>8DcqjTjD&%nZNfutTQY@G%1Qn*h=^.bEO-`VmoCA*R];?T6a(B^/bbc=B%[/90/nlAg'SRJXRkE2IQ:mS;I$haVl&oM-m#3)&Q\WYZMeXW`V&N(iA*,Oi@I2Zh%Wi5T8Zg!W2Oppi5OIY!GWUn9;A^_s-dj2*0Ng*8)PY7oZ)&YK)/h,'YI_Oo'ZK[T6,@euqbOqC+OgF:?@4@NqBiT8^Cq:m%<%*_f%RkBPn@'t;cflTfrFKlL#7a@l(l9@15`gBJeKSlr%N\d.WaW6?%N/X9$2^HEJbbe%rfXS6OEb3p_S5#>7a(giT\g5TXP$:)(Cq:mG%'0\?`*8,F*X!K0(j3=Hb&b'$dp$?hRCq?Ek<iq;hT1p-o:p@=$[P,O1dj6_9EE^p!flTfrFNR:[TsO!H)AIGV.]3u;)Kc*P<^o!Z%d=ZYXpDu(pN:[6-OWHCmR3`<5pln-MaPOm\cDsV40#i$??.*G0$/S*75%U=%.gme_-n<PsbAo0)M83^FCWSPm2DfGPO/c-APdJn'%KrEeX-VRE[GK4S2%j3Ms_$i,lL.U?&/'mF=ATEK;6j[YTYFiZY+^t+B/-qP$YDaNE2cS(kI*>meI[Ic#H/<'!$99<MT12$,Nh2K%%EH#!n7(STl&pa4!O*8`QON!W.d+ud`g^P#r*;5c3UkiLHTY&$\Q0RmLm\3JY:H[iYnAQVnrG4b\Mg`\0>eTNa/^ImSq/`_"fBg_U%64"R>4?IT?=o)H`67rRM5:`_BeE#J%]f1tlnDj%\MS6d`SLW;1L?_JQH*bq\0r$#/L6E$W#?i_$l4^Ve"VB%CnU)O2Kah>=Z_:@a%4d`BQcJ=]Lh,($0gC89dcJ;<p3Hmi%Chu:ac*\-547dH0jJ<E>-1X%bK\k%3B+U9)f\&^_$o\54=JQA;@<:*JAEme8ju@oTRTQ'K%J7=&2VH`<_:Ba-sp%7;[oo=RTNc%*ojOtJ(fe+R$J%+PH.gJ-(28tD;Df%,<K,S,*=mM@K6@YC$Pj,dBa@nV_%-0u*q%7Z8gXo7T%4RYZN)29+-^#rW*%:s09Y0;qf&#]_/.3<32Rc);Oc^C'7*I1'COOTBE`C`+p@_dV@+p0)>O^[Gg?M(qn@u1UMIkifYEXou1::Ns>%YImP5+s6*']5a?FSUJ@\/oQ-u'CLIra5f&E"rfb+k7nMI;VkOHP/:keNR4\=?IE6%dLC35>p8AuEeZ[70(2``EKeQ/$m]J)&$o[h%Ob(d!S&AQ6l.L^b'5O)$[o3B'65>oL@n<]7rY&hO&-&.MMC2af.s9/QiYaVYQ=.OAh2Iq-Mq"\t$[;5Gnrn-j0n%</hk$(N,l'-V%@CVOU$nm?oCF,SLVLGbnTLhg9>r(#0=YW>`PDYVAl-jhP]Y;#lpPU2mm>7V/,$1-m:D2,NQd":+0sAM`ch%NkG[@@AA"$O`="EDQ%NaX?9J4/KmCs1uYf#p_)0auZ305$mPS]`b#N&ZQSPO\q&ENNM/.\C])WIjV\i);DJ18[M).lL7bj[p<7nRsC;j[=K`iH&8!cU(Y8%-Zbk23;dcW@NR-],]?pJY*V]tY,\Sd1`n:d]iq7PZ]nE2:GZe:]A7TM`]d,Fqm,WrDLQA+IbFY-e_R1l3+"l"CZW0S]iNh(D4IMB%h!gP7_Am(5V8tZ5B5]G)Eh7ONTWfs>iG[T9j^VGX6MYR..sFL`,Wtt/:ms%cSEQp"n.KgBG\Yr\79QV@pepu/R_M89@?\%9U6Y^O%46CG&QRWHBVA2_ZhXX!/<#\P+ZS!<n<tsi%:!P4ee%5!4FX[WXSWtNVpuBN_M5!m\MO^iIb(mT,<a$mPK4!.8LK^JEjbpFm&,WKL%HW?oETMfMT_eF@f0@Z8)*F<S5fc)ub:p(N/"fhM@lW"djXEsGsan]u&E\!8m9_6:s>1`Y^0NrP<ZlClcqbDalGpos%)t,H-W(L6`%GU(>a.CW$7\E-'Tq/XLt3dLI\V:k"3c02JpZaU@B;j.-UP>oV!e3I5H_@'Y4k2./(CK3VtA7LlS#+Hj#F?D@A\*I_BW;/9seuJAD%["5YdV.?DOGA)`'DOO4i3eQhJ;XWr**+[6)(.jY!fEeI:=hD')ZNtTJ!id>e1Z3LLfr)5DWJSrB_Gfc@-`3uda^=(q9)R=6?bX`!%K,sceE>$=#`jTd`@quLR4OCJ$dGn_$[`7gl7d0GOoFCh)l[^8'(`cUh!KR'h>0I#kRkL'fCI)Lr?!;O5A!'J1[mh`k!bHFn5J><e%29`2m5-?oO1)rDq0Xq_BT[@%(K0AQ.+$uiRfMrKUi>Hgl;&/q<LsQ?XmHg`':k(m%M6!u;;N,,"6o)$1q!@[oo:1Hco>a>DZ-%+D%UhD<-!gSYAQL[$@3P=nOq-jqa5B&)[d!oJPT:!Bc3u'I@/=1V].5Fh6<mR,P-4K)!lr.Ne,?(eI(J4cSb<5]H&<:=nmus@rA"4Mp%a2p&/M(FrF*+%SE2@D4BG:9)K2L$!FhAj?+;`.N&7QF=!m.CgV"dh4ROD=c'ZN.>p:l=k,#Kd*A<d!pP^pJNoWZE)V7(qejKu(%p%oB$%MjB*ka1&-TOM0%b5=b(d=!*+)N7Sg*c&aq13TmT5!a>VtMI&bZ$`d9+@H;n<XL[l2N.ub,NjU7'js4F#m,W\!Q$$`ukjeMd;%FopM[%cmeb+-5M&';&6n0*XYUEgT5iP+i:Se@p(-nt"+t4<#btWaB_&fkBRFM<qpo;uHpGj;QdZTnYSZ:Xuh?d<F>o)TT1X#!(9g%2<um[-P)W*3/2'5jZ;!H7t0P:cLhk+8PErX8b.u+qPBhL="*0Lff=7ScLi,)PABB'rPB0Z4k23k;e>06rR.1$G(/NqkP?V6)93%+%i`s7j"r20S,EB,3RWMKJ;p>P<7nbuMX&-sPk:H:2^\#ps]^_-1oh.5ciE=UukP@buQ#Nb\cqg<lSEm'g$gPQ?CnAdpY$]a4kjb2/%2kHQ6XE4?gYscmt)u<gS&=0[d=!O:%Vqb$:ej*+h;?o2507?-?T9L/8_]A5O^U3Wtdl.(#A',EW3RodGpH%rWId-/T,\pcrkPD%!%S1^.?<>hcgT'M`1>p)o8'A@J[]EduJk7$6goQ0tOO8Y3doaB1[P?*Ho3fe4;Vg,/ciu:/M5sEh;P\^j*>ebqpY-^TeB=D`LF8aNG%[YA:r_k67]r]C^20$f@:qXKfNjS]ro`m@9>qISrsZ(1-Xl;N#/hcS1abM8nUml\;r*i9V;kT7XPILE-Qq@3)hLA8<.fgkQ]29[c;%qP>HAk`ZB6Y8kTnIL5![Sa&.;<a&fg-]#[!G-52`RhK>`O*7[ui-&S(`Xq>'-"]p`ReJku\UFieEh87SaLQca=O_]#'$g.h3Z4OO%,`[>V?i$aN=N`\Loik'PeW8q!0q@Qr^<m76IiRYJV,,hpa$r;F:XGAF<"=2Vhlu^p_9V^PkWj<khfs;T&s?-foa=!$Ie\!_dN-4l%BftSTV'j2.=la#:oi&,YT'D[-Nt$'2?i#4Z&Q'P<>ee+'Qsn;5;tVD!eLtQYD<ABX3VH[;iEX->iufQ8JU,nWatXuThb#&[g4f<^%O!(Z"I@(mng4-7n6G'44Ql-k3_eG#@4_?:;KO\++6Gn9G<Sg):'XKb1KVSqD'IZ`eG"6`f@7Jnfm+'ng`):1/TPX&ne%GI)YM1p\%eVX*WmcV_jC&*DWot[`ac9gu>\'fP?cKqo#It%?2qV1)LDLZPug,Q'*?N+o0Vbb'&JW,kcgSap)XiImskB-aMNVe+<s02%koC-b'%FmAjZf/nK-:\D31?`/sWT3fgO.gPP+2qrD[2`LD`\_ibIn"\LpKp?"`$f<l=h9tQS9Xee4:J>q8SOuJCIU&<<[XWK2*:jsVB%R#U%^[>n3V=nN1]=rYT1&l\!@)Ai_]e$8?=W:O3>@5ht?bSG*mA\C)[XE8mf^1l)06Q.of4K=bMhedon-PCp\b9ZO@F[HP_Ch6!8T2DL%X`O66gO&]PV,`OZM$f+4$ct&-lh*3O26-P5e`uF*E!.FL7rY@!k9Rnq_Q#q:VY-ZfViPK>J%?S9kA]GHiSHoJen@_6J!R"q5Emd\%VnJ@^>3Yg(qpWd8e(n$Is)?mILu_CrVX(?1GQ5R!&;u5Ha[t8nRclq`Y@%Fp$(.$RDV3XBbJWLUksZ@Ei_H_&CFs4'@"!^aVjY!]%bjpOL@;UFprAic6o]J.LI-\4=gG3q1!-[jGj4DtN_s39Ro5MOT=4\DjoZ;O[qkpD6dSci`\ZeMX2-Ep^g\s6lhe!Z_(JF4N;Ial_%G?<\uZ2Cm+e?%ld3UNr\k<H[]\ThF9DKbFa[7^&:'&*+pg_$fEGD!_:m6$m(B9QnYQ>?2n));rT.^h3)IKIPJ3]LI4jTP^9iI(2$%IVp^aTAP!t7In]nrqQ"rj(@^o:]'fpj'cG/J"d<mmnlD#R>Y8GVmnE6?`9</$RKe,;8..LhhqkRq81&706':A/hB`c54T):F/5Z/%pASTd^kf*T>`ah]s!Zc]i_/ir[q-"W'kS*F6Oa]p?M,=OhnYig`I7WYeDpm!09@B3P(*;*j)[7F0+$_r%DjlYkJM[";`o8!*V"O.%a@#"\]:C2;PG,\eG,:C:MH79(/6!*ST1uilAW^4Tk+(Q1J7Ds/ZkdLrg=)"Ie'cgA5PJYt76@--LSdV^,W!ZclnpQa"Jcd8/]WcM%PA&Js;n\5"B.M=^cJ"\/=EVC9cdIq5p[*'S8b1u.;17iupSrRI^]"WEc'WjmJ*&<W.LD*>\[./WiE%Ml`oaa9SIC$8ak46fZKYcL%HoX"8\+cpFACqi*F3PZtc$6H)KhYG"I+poFho[3K`OL2E8NaQXk5Btm2L`qW49dS7c&h/b\T7_>'DfsWfK-e"_7&-V[X=9U/m;.%%]mfXV,Uj_,%ra-:;E605a0n1K[u[.>._W<6U3/BOS&\$U$7C4-YLkiDg6>?A^aREh#(te17'sl6067$seAl#9qg90.?MEr(75Xb-%m@^o\=`USk3I_]k](6**HiW3+7<%:7l4<3/co!)V)h")li(9G_l*+hA]-"#XrcPYsPo,G\9m"XUP3u?.dTG*;B-&S%3Tak;iqG1I%]XK"SrXL4@!f^u<U@2]6CZfd+A[:.=(OrqH8cPm&k<&@/cddAiIe*;=NN(t*jZ2[t"*3$LE6"`jU2Q[KHI0D;8#SroR?Dm#:rX!g%XO#?@U/21=jD7=rls_h91,gCI3\RS+DV[*m@J)86<Y65G\AqB%+N9?:QWksooE9nE"?><fI[6]VhJ\JTJ5>.;;[;X+2rg*46j[[=%ob*l3I+$'ZHD>["b&9f-bITg%;:qF/'SX)E78Y1Zdr=;.*Om5%DB!.&,h\Q3Xgr*gB0kcHBP8RP(p*OGT#%!G(U0*?+ThB]c?Gkj%n$/r!0#mh/fD-cb0$l19c%"LT:/.%EF7O!Fn\Bk*l,ioMF22,-%["t,]Pn``qk'/Nj^Or_fqM8dkgh@@%WfuDQ-S5]T3R$4>2,1[%54BOn_Qiil_!@JoH<22u_ab3[p8;<2#^TtEHB\^TVSn/9a,-FA$#m_\"=ufQStjD=PQdPi;fQ]_20UW.iVi%40Houe&,I9WF;C5_%T4_dS$_$BOOgV"H*b,8PF@,DY&/,[Z5kf:3frrZf#o;kA9&IgU^X"kQ;WN?jS=U%lHh>Na@(be\$gs#bP2q/<`Mc-pkr'SH-]=,h%"[sQU@N9s_rA55\GifTO!)I=pH>S+a&MZXKInZ[>g6,'^/<W@X_l-jG/ocm\f*n**OA,iN^&eJ/SI[)I'S2@g6>8CnZa*QIkY<5S%jI%LFd60#'AL<9["L:u:VdX1KWK_*n9*FJ>#RX-UPpg/]U9"d!1?]*T.mq"T^AQdK.-@9]&@iccYb`@aZ[(Y1fo/0G,CCURb@U;I%\^Yd\:N+3>JD/t&F+NhC7lO#cmJ.eTR7G7p=u@,DI$0HMA^$Z:`md<nQ*Ikb`eGG8F%Mg]Nlp/%OC`6Yi@;t%>TdND2FAd#f3oOi%)=_c./Fpa'k4NAA_!(`Q>3,L1FC,(Yo79jfdD5+,OpZdbUAG.m+`*9r)=d;YU_8#=7<-Q_CQZ`GYP#M-@B7ptj/"%`miRJl3Wk!p%i!PsL2/[=,9^]F>fJ3rL"aoa/^A.3%7]3XN%eDec-MN,!^%O=#[Tm6<"l.BY9.-le!Wh)_6N^,oY6:bf3t(E<ngsWj4%nr'^/\V5%h6Z3,TC;2_,22QmgM-A0670-Pc(,4paXpV!?'$ZqVsCD]6@C;m@+;o]Xn)q4Q/I6S^%+u/C,s_]V'#'7J(q$q!DKYA]=o\!OD<Y/%/Yb;OK6k$SYsTMm^Ye"eM,*720]^M+!-#R_i4^?R-ihg@@E!MR`E%tCbSUHO83!4ECn\pI"bh@:.eke/5L4Fl#OS&(nWesW*b8,(%@/n`s.2&_4$Hb&:]\F#7o97es'0>"G[^91OIf-GJd%375I,)#V9C!+10"l]'3S8utA3]JY5Zt]_,b=uD&&Af.F.^+k^:.Ar2)]&M%?T*,s=!uXHalS6%AbCs$Cmo^]RGre(VBm/6$q*[fg`DT&`Zglnhk!j#NX5E/U$9&`]6!K/8nT<>gE4G(^C/N)b&,VghsN(JJp$)E%$,O,><i=m=7>9RpI&6@O5H%g%8gO1CbcL9:0m]G[9gS!FnRKGKTb5#2#Cf@A/L:*+#QkHhVa[J]N/\mJ8rlZnkJE3"RnA`8i=g@R%&XuCR9[Q#:\RSS<momR#I'`1m^0gLPh'cKnD&+WLmk:g2;>9>6WEia[X;!/7?!T[1hfg!p<pNEEhu1gFh>:ugh(LAs/(N,Fm]L2@%[dH3NXWgn'[=>bsUb"3&B43B;AMb+i>!_I[g\g/O5OV::X>W"eBpWV_<PCJ7B,+MD:1/+KYkJ!7U=@Wc-5I\QTAn0$N<=i$DkSb(%A3A.5D77$`pT9.%rND];]+_*YL,oqKY[;:WrbR%!?ne7b@kX0,f,#L3C-N5g;g3.iI1^qb/Q&4tq0?53ejI>p3dR%rZ[>cj%IOqS%IrDu0>:q6<c[Tb*/092PR$_/o:1D[9iP1Y7V5eeLmJlZc@d`JlD.9LCq0HN/Y3]Z99+g9][JCg`+]B;b5GVCqF8GQuNmX9F9,:C.%?/-!n]u3<BN&!9qGJoU!RAJ6$D"XBV[@AUB7^kuuFD#6K)9@+A`GVS)DNomW/Bqt]XCO0VB4mS,L#mU%1?(W'Tu8U$/5!?JdRJ#3%Z?5(&qi;28@:(e7OhjF:>#7#Tdd<"taYlbLFPDejq"t*rSq6%WhWGeuqaa'p[(n6Gp6e2TS#j@j1l1ND)h(Y:+7CiPkj/+.)`5V4%ASN?#<\Jdgo0bq\Tu4Wlr-:TU_T6Fi\&Of)0$j&6Vd7`7$cLO&Na3]k8M+Q!1VK()O1AWj8#L?+Hh!sqBs``;MGe!4NE!`Ws5cfu%^fMqD"65db@!'[pQg<2.%kBm1O7(k/oh2^kPoQ;(2R[cds+@Eth-E."Keu_af2&r,Dtb%o6V9LtgQOD#Tj--<F7`[XnsnE6no1m5%@QV@iq.B&&%0$r.l/ODl`k(m;_59\c3a'dAATXJckV\ESpQbf'Fd@K?>c[%b&Mg/F>PJ&'EMq_6O'uC/;`WCPEfumMWDQ8F1O&V2%(A0/URJ5fQe29<$Mf\2k'%G-I<6\6r?bMuk`eQKtSr`Zq2ccmQ#PI4*>$,Q@X7U%%1YhVJF&BL?fD_EF^;(`Xit&?!"+JoPZ\9`9%An0g^>HFuo(Wg3?FACr^U0jepi1CdO(Wa`,36,6qP'-qZJ/musHdD]MKelU7H4pm?SW$NeeN(`ubd]9sl.D<88mnVcY55l0fsc<A%AG5YW;m9R)is8:@:Kg<=&6*dXAKq6rF:+f"!kRL(%1h9$Pd#?ofRjjkTgO%JCh0X$9\-8.@b'U'&e(E]k%#0a:KnDF$h`cWX^DaV%R.W,WaSOEIjP'Gg?_?W-LD-k0>4p`_UJV@pBWXk<&j^MWEEj5,Sn=f.913mD/e$0X>LtAuk(f3P*I,5R3dLTmR;UY$:p>l@AIA=k%].o.Jj<AQl%rjd_5bA6pU&eNH+LWQ7T)?9:":HHa&Fj&22FJ>Ojg?9">pQK]-*Ib`0"-rZ7adVlLed):[hM]g]^^m`M$6sdo9Q^j%=XTBVR8Ep,s+<,$]G,k:=8E!Or3XCop%k:U./=L"F/5uPAulGQL[d/91b(L$aO8WFkN$2D[]l)@8uX6$UlIu75a!c6;9\2lTgBk.%6_Q?dLmVBdL^(0_)b%"gC,="p@84DK_4"4=S;(_RSMmKEkt).WO6&j932[bPl!mq2rh#,?6_Y+t7b9>PM[C0/,_C7WMb?',KP61I%ZCKdBD!XZXdDIAe&?7DcX\]oNKq<o-Ki6XW=>VuEB.D7?]ufZTHDk([4t)2a6lbe37+_MVJW*UY,*K-0't)VTALnRM8jIF=3K^R=%L59BhO<G`?`_oZI,7`=_0$2b-bqO1b!&Bj0KpbZQNjX05ds?V=]4RNU"NEdL+qMQt,KI518cuQDE@OEj.RYDI14!W[^a%^Wj4jcP%$S?BuE>_rk>UjG1dls/uDtI^*RS:'OB$@(<g#LqZ9ciO5gR^Rrc.QX?`3s<>HZM+$L`P<C]eJTnfshVU^--huS$SrF->@i#TUW:`%>WQR8F^7&T?L5lW).V*\ClgBV.Jl?=,o\dPo1dp<\LlK2MqF9-0Z98nA)C;+X+G""*W,l)GZ><W.[9pRnZ!^8<@Ih/i`/:OMN7Xd%j&NemGHJ(N'^k8_buX^J?:l]38cUkgp#"Z2J:1@34Zp.HRt%oY"hdH6)SGRSlPF]].iPi*5AZ#@h\KfqfqLZ3g]t=LVGcgT2kTO7%:Ru[8qfd#t5o0e'B=jYPjWZ:'"(bPkZTsLn"/Xu)*3NZ)!/3?8X]U;O`P2b0i7C''p#7=rf8<)Z]2nW1pnp4C%nLsmQRIQ,fAGZP%-i!NWJH%*&`Im1#GHH*ci"r$lDJ[KL]:S.":!5+-IdpEm=e8]<:#@O+VH*?'U8+,fgF=+*I$gAtI>=WN7Tje\LVlg$(.,h<X<,$0%K+-!WHR@Ye8:8+P8bLH&GRGaL!X,%q6*rLo9-^t`B(tGFQ.(3VWVoY`4ah.\[;%@spAK!;s7k^E[he@_fp]3CW0`U:Ug)!EDE*p_%]j\`9+$MRW1\KZ6G*-LK^_AlKoDn#5A_ko7U598O3cqLgl"/&Iome1eJdjPAX6`r[09rmBZ>!EYJ1H-QN!WmH=10s3-jH&\Z`JG\%<$;@*DA.+H?pHbC'Q)dLrD:bn%qkD*MmIKDMm#*`hLYe#?GN7e"".O0KEb0AO<F]Q5$S:6/;"IuJHs?5_rQ;WOD&4_GBFE$LZ^Xc%O56J`Sjc,(iOYsXT7NVP)&OSSQi\hbKgpALnCK5'Y(n"IbGKn138cND+I>gF1]]E2Z=UXkJ;=:/4u7__\\L1$oc+4p2fr-$L]`ah%N#E2coPu4>#1\:Va9g%3Cr-L2Z:)/BcS5_R/6aK\Yfi?kKK-djQKOK,e$4E<7bMr*[qPYf=neG:5Rp%K=CoYX"<:t:A]M/g/.<Zr%^]B2PPms[e-ues)g%8"<*Y(G)0NpG,O=S[GS&BRQkWS!\m2<&uG[VQ*9mEAD%[@CZ0'G3])%9u"G$-a)!=2TV"Qi!;Jb,=Kb1pA9%A;=H64Q*Go!?t=kAN]$t^^^.pcp0WCi/5;M#]*S+Wo3rjLXEt)Jm<jRg*FZHcZ@3YnDHA"%5PhC%AKd@?S_s@?s($18-^l*jdB];%K[Q.m2nC?ci`e,!F^*u3K-2h;Z3M!Z^n?=1!Z;RP"PdAb6eB+S5j&Cu+C;2sNtM4-RDF\f&4*J7&T&0DL$e1QiItm;P6JTQ5[t@3%3/6`A1JG"=JKbMI_#PU\TM9QjDD4\UGHd3!fs0q+=>1#d_?4$)=TQb;^cpDZKSTX1<\T&tlXeC_h4d0/K?iurR2H&-[rI!&N70<h%79[[`@;7t5Jd3j5*5W31p'EZOS%'6Bl$s#u)_sJl_uf*%7MU"sg1JhOkbEAG_-di8L(B.P.MFL?/";i5#&#t]E.\6$oEm-YU_j_M%Zc]jkfJ5B&"M$h>&J.74^_:Q!kD!TY52c]&T3-.B`WrapNokXe3%QbfL9*6l`:AF`"0IF=P\gXZfjK8'9pb]M5_(!fnA3`4!!X4k%f)5RZq]2nnr\el!CtR+d*.b7QT[mZ8,Tt/:7Z;j(JiTQ=Ri"(hf5c[Y2*DpLa:/qEd/c1B&'YZ+_Z3&;].u;^`,`[Ni+P&7G<9J6%^c(D2-1c]iO;2.DI'b70"Lc/:*D[g:^B7Lj!/t3fY99bFKasCL7^ap*K0bS:N#2R/oEn:>2K<V:Nb&f?J@t`3)piTCU7c4oZ2mct%<h^!&j,]3mb5dY-o`P^-ASAW[intAYLB0cm%R?s&_=nE.E'V2L"u(.SWZ$mb7t#'n%ZPu]3uBsZ`[M[J,&Q>`!!gCfb[<UN=<Hi(%g;j`a"_]/Uf4DA++dNLgcS0@/(hFf%!beMB"'1bV5lo%7WsgK#&0T="RZ5$#a2.iX0,O[o-W'DBn,s6"^$MH0PF00/a:(OtJ-h):%VJ*"I42?^dqeEX07bM4[`;K[GltJ(\#PuQ.X>W&VEpYX9+CGG]cnV2m+SE0]b%cPrO<HM)nB:k:P&GkP'-Q97_%@/2FCYjE0nDaE%dAqJ%e\NEM&Oqk4$).U#BYuf"*8MuSec6""^*l\D-q@OeT`S\TKXnDRi"/^@AJ=OA$k7:pYS<`a5BLGZ_BHu4cu>Fc#;F2O3MYgB%Lc?O8#QknJat-^3N^SZ:ef@]?*uokP@0?n(+Bi012N2^q1gOR)F^Om!7r%m\:2C:J*\&Ehg%KNU,8:,=TWFnaDZSTe)_DHi[=JuQ%M'3:Z$j$7'J_UPKF>o.#4$^^b!CI^>^ac&LM?8WpFlF*2@L.UZ>L*Qf0M\r>'PS:pLLq4'$gNDM6J);sKbtV![p:1$Lf-$?'uD,[%$Z6IJ[&&+/c,$9/Bm7d_KJ3Ze"Pb6HOC6^#p^nY.J:JdO@";F"*+E=n&fhm$_^%QX#_sNi(dS3ML_cAP%:^piRB_Pdd<2ZjKI%+e%Bk3(bGpK7pUY$HEX@>/P`YH!?BOa;MqmHqK",(pH&ka&E=9;iP11hBEn\I;roDfC,"<:hM!sID#ciIQ7FHh%-P*H<.+@?u+![^GR%Ln`/R%'dV#+[\*U4,>t1Jj2`KN9P"0Ll`dQR;>UK+rk%m]s\D_$KMN)'$UjW+Gj>0IP:c-""%*JQoN/E@%`%i&m.+YY_*#dd"%R;%Aqo?m;(&rdX?nlLq8'!A0L;tZ'Q"TJ#>B#ke^[>S]@BXN,?g@]6%6Vn_DQ_/*t2UEb=iqA!+6$VNGSiiB,\(+E!UIe]M2qBJ:TI5%4IkbZ6lZcBKE2MN3=Q5\$qI%ei<4'oAdO)49,Kqr-AWG)U((T`!=A;C)0:4&Yf&$o<U(3W^c[?D#cMPrrXq^<`.B_HCHes,joqWA%Fp:&4e$`g>_BHu4'1KeK@,QXP]ZCQnEBq;O"p"6&P9/5N*/P/cQ!me#(?#hc#U;mU"OR9LZsfILTJI"n&Xrtg9[1oq!&o3>OV.56%Fl/?A_BD/pkW!$b%!;6;-btem>u*@8*.f.23Q85)J@Q`F^1##,&90tN&I'q^Y8nDg%7d.Fj)&MA-$+`*O<]],!>@j/9[ST7NgL<E%l+:>Ja^bn"%'20l#r'aN/-.I-VbLb0K)e-0_]3?Q::Q2j^rX.SXYKl3"QhAIJAXYo1&,(*K`_HB35@4qFQ&,ZKoWJpf9<TJLEJYq%0`i[-k(oaKinT(CLaiLQbL_S`#$rg:)hNJn@IB33!.W\,A0o)9(-#(Y"28FcGX3iiK5Z\ls*u+0K)BRR<BtO)o>&HPmk@#F!<GP)%!.=Z!."4!/%#L"NG2&=J#_rCM3'dTmL_cAP%:^pic\%/ncdFX*A.5\)7#C-cU/Ca5_+K$Z'&aCh,;YqpUlW`oD%,Q\FIdq)8"^Pi%<Wa2Y#VhJg&90tN&I'pSoF7-h)MSBb-5ogH35QfZ&Oqk4$).U#BYuf"CkH]Doeao@hANhc,R+5^6dJ%AYqY_Q'8(f]!Wm6]W'_EL%Q3KJW\dTKm;Pb\EKL(\GGb6@Ko'ePE%hN_G^_-hO_[!Z$P9c7*6j%S:X@5)O=i(FW0L<(]'Q"\"#rlAWHFU,QPA.cA_hIk0JBP/&%7rT&j08Om=h.m"s?rlRg=<S)Gh*P=U_lV&mH)qte49;kJUFHp2&,Zt@3%kh_J>`pe_E\;R"igcY(2.fK%""#99K30c_FP:n6+4QC%D]IeqiS+jI^oh+-$'&n:/t)8Ji5^.s0/f@G8<Uh4Q49kKa&)sadg#u8b=F=rP$J\16)GKTh$IIQ9MdUq$1Mna&/5TSeHUU8Nh&G0%j2up_aP);7O<p,4!>6Xc7+#UdIQ4Ki7`KR5dihJemXq;X5;WnK*lnn[KqZeS(r@ERkE[]o+#WO$9XH^DK1]@.RrJ^S"T/D?OC4II%$59B=&I/FY@0"2ebJZ9u3-8D*!a1U&_B?o27ZW'+RQ7*UZT(<GQo,G0=;D2plaQp^%$"qH<0_u_f$'4*@1Z9!!$V'UT^l`"?qE(6%/+J6XO<7j>%CA&6ju[/!`o%+m_uTm'(]_Q7#W>Fn3"iGU@%3^K.U`m!#U;mU"OR9LZsfIL0Q1n:7l7d[Tu1]$fGb:d*0CfY_e>4?%"sG*)fF8:4Z%\*tVMQfD5`$kX70,]7^i[IZHc'8U&8*1W3?eq=35PY"/m`#>7j-2F)u72s%8R!jN\H%f9Frd072s6+66d[,9Jsm"%(ppJ@UI?)@cZ!#!bdOT=35blf!SRea%/RO>/qRfq+Sm5r_B?o0(ak&N">Cka,?kZ]-34\e&J,'4E]c0;*"OZ3lCgeGJ07?!9`c[*%(7:h5iuEUf*p&7;R`%qLl2%7E_ru(G;_0V)"s7a$g2N-b)h8rkqIo^_K.R%QeX+elLEKY\d"uFQ3(uj,`apNK8O.NCa;+t8/G(-*%=b\0<'g*.rSKtWt#d0"?U'+.$/hk7Ja8'1(`*%4KP)*/hdE3")_<BHm_AI60Hq.3b*!0RQEX7U]_49J#&f6.-&B`^[6]`l:e'dU`%L.b.SIQ]qA+Hir_L]Q(+"48_.4Lga`RRL7**.hFh,RKR*=s/^2N:B=-4VA6D/`6X!ec8$;3Pk@O%M]agLdDH&5qH687c+>C8DFFh%>TqE&3NsJ)c1<e$#IjdC(RBFV(To_E!Kibd+ODh7B8Qa"Y%"r1/uoZr6(Tcn"AFp%&OfpDH/d7(;D-1X1brrV2JS@-Sr`J=i!HQ`%86!;-&7?d>L4hJAYd(Is8*D*V@1ZrUHpr`<@*eokB6=A%!K]:X+9oCo5&LhgBZSnelcD2A6]`UQ,QSQX$V\s6ELoG-M'Y&c]'9[:%ifIg[W&'41IH)5t/C(F"_u^384H:Eik6!Ch%.lL?%7pVQ9S%I/DV<qj(oVrs^'I+.&ho#,%.ImL+&*85K.@_rJLVe`'1S+7$*"0'%BZiA20FUa%@d8%;QY(lK&>#8&_iQ7CXSE,t(rSc-*h!E]e%h5A"(rJAXBe)Q-WZXK.ffb6`ABKn,Tm^u9Wf@dEB`doi-6qH+4f]Y%Jm;_@$(.Ai@#DCPEWn)KA0DrbOl6pb@*"HaKubf#71U9Xf)T9R(qR3b"U,fs:Uiq02Ne,n9X/U!^^=J\DDU=u0aWZS'Up%>(h#V^%*f`a7r.kFt+NP6dPCNtN"f>tf3)aX[XG=ClfE:-SC1*!Wl#Al0,,,-0ARF^[J68bR>[i"9ZA`_^H6\GNM(&jb9EE+F@=4ZaE5fqO%a[L_N5U<3\Lk.W81i,1mK>HfVP:.Qp'M=Mg$*"0'BZiA2^t9<A%%;lb'[<@,'QE2^+t+R]i9/9%KgRDuCUh($6j'E`jY8G-k(Y]"%K-3t*5[luO^gJ5(V?n6+J-8!n&-GV7XeC=-GXsAD1mJU`i!H;Q^]`Hp;m^D3.@O"4a'E'SR1"U,p.SqB?pNCE:or$Nlns;qkQ9]Y%6M.*rSFPfLA6pT*a;"-?/5(TZ+>IsjaUec/`"N>0^q4[0[R?,[8B-Li]Wm2YO=,u4!>AE?9[T.\T!0e[0!8oVKI*ceVoPqE'4\ll%JjIs9*+GVJ9S3<.G3`gAF=/hh(Qc7\JSqqC("*O"fOOE(,8(QE-O^'O)pAB:@n>!TZn38]&.i@YUI`0'eH/UTAXk()*"Wo.GX5r_%)MV.G[WPiu0aUW4.EFl%_B9UhWBe=N-T5iSVlN;G(ls1i:NU>k"AHjq5pj`3a!;c?;]*H'aeGrs^uT_oZt*R#,iB#b+BKCS![d+H%R%eHX>gXQ)7WMpF))gH27=A;DLa7QR%^HcX,SM70Z>]jI[fTW='!L=J8R+6j[2FfO%"_`8)%?4jJDh-*Mi.W<PCQ1;*tC&F!^el1%E'tOL$:d,\"PLYJ&hlV]^_CQ)j,<5K,^KOkV,+PRJF0Y!4jk@tBLH$?-PSRi%3QG+BH4DN)"#_lH@[.E*=E/D"a$>q1ER+EKd[l.%k*Q8sO;8<,pCu?g9]1.LVEu')-+5K5ZA$[O@"N9I.G?]*'h9J\!uNs8=W>n!2WW<r^V4,QEA=:)"r<Nd0FOY$%PFJa=AV?uUuB1?%aJn84j9mTaUAj+*h)*g-#fe25;IEP@$l^JtobPT$OT_&>aP)>8O>DhF!>C\*9_%grhO"LM5'MDDF&8uP3:ihj?6,D?'AhrHjf$c2%K)>LdWbl2N)9*jWfuB;SOMEOU1<..9`=biLI_]dV'o2uXOr">=Zk8\9ieD-$#,f\=2)Yq0ShPaU8<>CL7%;.5!ksLa(o$8*eQ@H$%75l"7VJD>k,kuo\HKAoB_-QjP/i&p+e=[Bs^g0?_]SV\:O<ZC3P5qDJ\2t#ZJc_'b8/u%L"'7[.>jc0:E,le%LD:@ok$Sl0R%RV*%MRJK6`,UW7EBM:7+p+AXh$8ms%*0#>[&3d?5]D'6i5b0s%ilk*S.o;Z((fO4Pd6/2@5+'qQ#1W!"==/3=Mc0bY)a1POQ4`:1U:1;%+NP3cPCNtN"f>tf3)<r]C_3H\VG$hGO05JJQA9HgA;VD]qX>CgE1=RR@lsgZ/TF&g(R2d`*s;_7!aURC'a+r3VW`aDN_)J;VJq?B%bG[JF!?cW+)J#>K]GZJlO=?,8!>BP_9[U:gVSG(=*=g;9LtU0pG<b2HD::2@AVTp"]ESoT(StuU5H]X&/6lY),+E*G"Lt1i/Rh`\%_keg>6HSAW"@V5VK,D,PDP6seG_jZfMUF6[nq9lY6%Wd$-JC/n&kjV@#YQ_<m#)&eB%+GA(/6)?J($>Di=ld</c-#qF>I3AR)o])%("l#%+NP*J":f=IjtQ9ufu>\*83eGT0Sk;70as9_N^j=oK2)p@'*^ag:m(rP:b<5I>K0h*Qt2,/j(`\JZj(\V-T9!h?[sN^=LlMM%J0u=g)u%IWCs^2K8fLo@7/#=@#VlQQ[Y'L=*!QM0/]Mj*![9@Q5n)PV6ajfe2!DklNgs&k+NP3cP(3kE3ML313)<5;9Sje1EQO*C%L>`3FT?T77*8,F#gG*%;#]ANYE4Zr$/VA\4NQ%t)/L2\PJh-p5e%lnaLOgX&PF^kF&,RBOKDmcJ;jW%>LLWR[`NV0djp$G\2]+CR%-7BXsU93GAclB?Q%_`S36k0lSNs;"Gb;Q;T=J>])Y5ncMn8#Nn"I^2\OgGM?R?80("9eOO;*U!sE#@^t3k.IS?kO$--OaJBmQXAf%'6qkkZ#iKJ$3_PJ(e#DiL_aZu%:^ro>`T#P*8C),\sMR5A@d`3ffTnJ7K[@X(d\6=m\'cL!^G'-7?-`gOY,AjK)BS,]=JTiE,!J4%<BGb'5U:e4LuFMa+O)\bG_e'am8Xr6j9VMP^c:!K;5@Wj+lGg&$Oi=i,G(?>\ea,(jJ/LA9JXEEIK-JO"F'DM#M0)UoK:Q*1U?OX%5`d?9)D9.O@PAg7*L\Tj&eKmI$tA-1@ZqWJL'Oi@Mc7ZH-QE1MiA:k.TNbf][Z,@I0M%_LZ,s_"br'US`=GG-:S\-#St$Vf)F/6p%^P*WH9Meb"g/1Y,,_cR1ZG\D['L;c;bU]ul_=;Jp`"380E0!"Fb`SRG#q*=j#kEVr,=$ikJLK5'`X^J,a>,fr"anH(c(So9L5FT"%cQqC<:)nQh+Lm]o^pI3;BSXu#PDrt=.=3<[!Z]%Is/tGf0[)MNeq[`JOFS\uJna^$"sGuF<%+GV-k8M&0S28Td*/a_S&H73G)\R;%Ur\-9bSrF.`<O4UU[hj9).fuQJD9iV$g0F8(ugZi\eo"E`IgO>)<cP'IK7jEHaLlV@YRH>,\A`dJVbj'](?sQ-J4D6Zc!=X6%1MV%"H8Nr&4IMWq-gkQ)hY\e8Ht',EA_3>FAK6"jYc[,cJ`O=YqVP_Tr#Tt+cJkK&e`lX-LlaTO=)0cXouVL.'b'l+;,6B,n+6j2Nu82%%1isYSo?<YJ07?!704g7(5S\:j#k_:.O@&@LkFio9fZU$87WW8auQH)!<fn&P7Y(rs7LOe4-gjToF((OoO]@NGa.Zu>%4^;8-TA'%gVFrcW7r@M[Z(!.igbs`N2iHQnq,^lpR1<VOf,N@,NG$p4jmCpbH32C&MSg4#=_f06Qc_)BeIJW5fa!6,+*I>Rh3f/CT4E\+@Hrb%ba!?CpOOb:ji@k%%lqo(J0Tea[>YLG!7.^!iJ<29NZafubWZVrqSP2CFKJ\(!/1!RFj[W?'Mp&72-l.cRh8!pC*=H!0JTZ$LrhU\%J.P`$+P58bgdbq'oLdR7`R$G>'>CN9<D_6\&T](\p)/C1$RT4$XRTl$5bIR#l3QU(I>IX?0U)sH!dk[B8DljtJhl$!!Xt?HDe+-L%X,%p,A?"XO.ID.n__ODJB@)#k+51<OkEUlKqorC;UYpQXMhiNIjA/mO.OpdqABO1D&Msl[-j!!fdZEY3O<$!tI?<M\TL=oo8nook%/dJrWq1pX97t_N(aYDE%-/HV=XQ4FV6[If,4WG(T'kPA1jn5<+>3qa0O39ka84-68c86qeT62I5?b9`+!`BNXm0=%[o'G8-EpVu)%a8u\UmBJO\N$>-!7J?a.`"3KSqDdUe];5>.N"E7&BYq[U9KnJ:82#<U5NmklbDJrb(IoCeDt2DbNYcl*/82#Zb:HLY#[pHqg^mpj%F.P[Z,CpIrMO,Bb(aOb.HKIbT,+q=]Em1q762-KZ,q[MA1rTAq#&Au%I"ap,V[2(kQQW4.8EOipKIa@hBq$@7H,OcY,9TDJ3njCa%1%Dfl4(=?mfo-bGOC/SLhrQ!JH0,]?&jnp@lK">3m=K3X1ICZT5T8n.Bhab6(4L<7\EKQQAp]g]f2b8[El#[]k7jNH3_\^=($c,b%OhV^YK8(Ps(DUFaOs>Mk71))di&'Y<MB(f?9;<7m^kq@;R-X.&mUK0rP+6<t!N3A@L6LshIDnQ(<h<r9QHl)];ITneq@en?'od>?%1O[4j9]oua-j!H7gI\T"@E<;f).<Z3j@EZIOb,b]n/8_UA@A@.`th1\MX'8ilg9l'@l%0^.LmLKM=!r:niTr8<),Gm6J(gnD6ntk%,tAm-1)4[gAQa86'%OMY)$!DM;G;g4Z7$i"pXipp$'Zi9csj$,<HLJ\aPe[%QLd0>8lQtS>\TOH+.,pBmM.:!X"90o,BD`L&945f%8;WiJc3kj)5X,2rfQ!4,T-9ra04#8Y^kfY;F?^[u=OS+Wek;),JIt>.HuniuBk!1>.Ah>p:(..JWfgkhZjXGSC[j.*o44Y%2Om7+%504mW/[._])hi[\dAb&V"%Vi=ar(4m-KpFPVkJr@9`8o5PYd'T@u)u_#gKt,7lD`L'Ek;kUinah<g:]HQP2`>'@Y&Xf@qV-a(DEs%b^C;P3>gLD@Vr<qQ@/Cp,j5:C>IZYEV#F7oG^H*0I:`1^k!`/^!@_u'@8A]gR<^5k'f&@@"B#p_B9AJL>Qk4oK=njR6Ydf5&Wi_J%3TbY"V#/f'PZI$3l\F+h,Ql>3mQC)/L<MGp^lS^<=]#;p<6Ag+1K`2s(A,dL;$<uA-Hs8l@E:d!;'0#*,CpRu-k^tKQ\35ho?u(+%&[7uj3TbY"V#/f'Q/!6"mjKk;.:R<Vogg0D6mLZ)*5Q(C!$WWn+kAP&R14Aa*LDVWLer\8<!YrSL4lTgR5q:12R4c/Umst)8"eYu%+PeO!(sm:+PRL2a;p<a76+;Co+ic;T+R^^bU;\JFd9:9t@j*,GSRg`u"iV)$G%?>F)Zi;6&XAb;P=-!:,4C<KG-.[*HuS,I<^@ZZ%7N<lJo!@?1jV4sbj>5eA@L*fR.QQQn]:f&BN0;I[JW<E+^+WqXX[Eg_Yb#Wj^a[l>Ur8?.iI(>q5YhqLJif(@'PE7Ghup"\4[(0m%a=KJm8K6?Q-rNh4,T0B1#!#->LoDqcJ.bl(0j!*4h+)(ALcN_.(jQfPfIDckGVhV(U84Fk@pDYHOk76V`j4]#k[gUKS2mGN3<Df`%#ta.c:Ea^)@G`h3)qgH(;Xal"Cc`sKBf!'$`3mMpE2#BRk'FY8qq-jl,Wq5(QB[#d3MuZ)&q&(tdQ!<OIGK]Q_N_UuLf&hQ.CObC%kqZ$K!@]%/MB&4>m>C%s/nlQ"'L`AQX2-?+Pu@n!I)XXS&<NVI3TbY"V#/f/PW9[g-J_oRW=D)ea=27BZ8,kT`Wa<n<%@HMD0YO%%<\_AVYo_3kE+0t0HU\Ko"f@cIfuU&/OCSqB'8(B43P!2l`"5b>$9>P[2G*Xo)'s,R5VBK:@2LiOelVPm%R=g(Ls8k-]tm1b8J%@k%75mH>"tHMj=^rH/&Wh%k'kuX+SE2_8o9Q`qB>kH>':dj$<"?eF)<IB>'h*cje&eks[n4/lbui'm?^d!c;nb,sS7C7I'*kIK`o#OI%e&t5!,]$#YQ![#P7g=q3/$;*hO;#h$INlrZQrk`6+uZak0LY9_$m2-86/]N'R&9!OkZGte[.Q:BpG"*9Z8&["V71N".oOWWmP[*7%ef9g=&h.UI%7<n?9k)S6j%!lZA*,X0MB.i<FZQX:GRC_D"7*]ng;kV[&6WaV,.JK0]%a`r-&R3d<QVMJ[L0U,bW$K.+n@7?/+*45%h"/U1\&-6HR8t@gEJ1<Cnh2d/EBl-fF`\"U-j!#&5)?P*5F&-K$*Cb2%;\KB@0YdtAHEQu\F(mac\Wg<6re8DCMf7&,;W)0AX'j6%kntm0auTd!&GXI?i`W".D'K:O-i!&hfU`qj.qt:F#>,[2-!9BVn5)]WB7LBDLf<;()LAJ^0aR0<.2K<Q!_--6a0sPGkWUb3,^%[@%FBM%Wi(7L=jc=9Vk*`K\H"lrW&X\(s!0XgAiFTG6A#76.`"6n9jG:j\LHSY[WYoeJ)qh#(,5^nU@*^PfLu"n#`tq7]MX'9Tf%VJ+%a/5qG%WNGR'q0Ph`)b"!:HWEiPa1nT=>9s(Y7khd74uB\@S&(OBX=E==@#;dloG&EBdcUo>LGu!.u']J&p8.GVbGckHA`/g+^d`]%Ebt&YP3ug9<ncimfYr_NA<a)+^m7VsF!WDfE+$WrZ&Q`"_4HkIE^e)ES]I9776o"Gf;OJ&b#hDL(UT<!MBNk0>*c9c3=&fnjlRo/%&<O1sEbK6*K'jj>:.f!6>\r>`[?jKlHVkD=4$;#KOjFlrS2bP&XdX(_>4e-*K%QkI!`DjsL7QAW.V_8ZUlB1g%*:&$HZChHd>Se>%!fdO6VNPFnD&%.7R<!m"Q^5=tUMN,\YU=JSWJk"E1J![jV&_NM"DpfN;T(^&$2)U1;fp%Dlj,""Z"0Ea.3np=l.?,U^_q+p4joA$%/o.*sZ*\J'N?Mau5`)N%f[eb%h+)(Ia@=5+=C/4CR,ld*QZh,P-HIOG\5"#(i3UAQ,P-8i#aY^2?kX'@-mHPJBMEW(LZHr`&tKjh%BHru[6c=:<p"bgg5rdjD3A)\6J.gDRZ)tD?\rY&`WIn=U4h$\B0;#Cm3&RB1$olAM.F4+i6RE4`S19ZT;qNHgf"W!4TfE0L@%u,.%CJTd)+[XnK[#n(?+\4.FZ2L+2\=.JuhCD+3MX'9Tf%VJ+a(DEKK@+a>4Y],MbKA%E[@ITD5L\6=;i;$@,H.SO/L7c[E\+D:)6pum%&[6jhFfF?!MC8kTHVDjW2CjMi_a84*bCQj"7Mo2@6bnTEjOi&<,i-M<X9]PgCO4DCMqi>WbABTqi%r'8p!NhP,BKs1:!ldL1qGQ\%X*S"X$k*.c<V&<NWHt<9r4++jA<UJYR'eHZe)]FSg8,%5,9TEtEbt&YP3ug9;HCu-%S$kSO1Fn*(;q7^(No&F98TG]K'N?1iL6..%M]jQRF%fqa"Jg-Ff)2M5d7@bb8K2YI*"dgAXj/6uDF?35j/QPo85YotgNo?bqq-iA3=oRcDXr!T,mHAF7Vk99,ik@gX)k_ZW]2aQ%11PtO-F+W`REZYrmuDp_J]=_[WJ3MkoG^Xn)q^YtP##E(o&O9<7Qajr9fN2L<$fSnegBWF1?AWJ,!%_uF1LV#]'V:8!^+pr,DVN,%P%'6;.I'4]:Kc32J4K@]0d8!&J<TepH'/)&6UObqCD4(;c&!Si^I<auPD`!h1F)pS#UQX9@9[L\F<?oJ1000Z0kj^_H'/gB99rJA%$-d0^&!<ICMW+nFfhS*iX+;VW8Ma+S8&,E\c#X@j+Ym%PY>*G72CX@p2"9Sg@r`,29:&`1&?oV))7K2r8b]J-/+mE]]cH-<#NIZ+%EmEgkK\5CILkQ$PRCiTpF58<K)`OEW=!U3HOE)O24$H)o#UZuOg5(sP#auto[FF<b*tfB47mMsrAD#Jf,i-LQUu^(RYoP^(i-B'@%QBI96h"PghBA,[[`=Pmb@R=L]>@Ge:^j.\1BgZEY'A#\#DdlM9:B:5/\tk=%<Xb*Bp.4Hf=`TZFXF#nu3!*,S-c<CL-L!]PAHhfG%J;cD4eboXfX"F@"=r/+8r/Cd38;\S7?c;*E%)THub]672CPj8X"W<8IKVs-#f=/8cNGMK$@0.Zs':4oCFe)2K71kVj3Z5C!2G*YJ%)(Btklt`rjF'Unp]7*[4Tq?V36;Oc"MBhb?<Z96c%;eu)bs&gl'Lb8ZebTDu9$VSGphPI>YW4E@mTd-Nh-s4VQf=.E&TD2/)7Hq2%8b\@0'AW<T^YHm(qDQ&pHPbSC]8?".h8AufDW1JBgqia:LY]`>S)8Yci?.N\nAH!4rTUf(B(%9HJ,e!X%;s!s"YIL_f9'854hp,$%7Sf@(3W&U'j%]C"=4&De-iZ,RWF(]Fp79AZYFe#,k?m)\T[WaR]eV:rQ%AMP2iloV%u0BQd=bG&*@A-PqnWja:0HN0O*.`qJg5?6%/&,AlURA6@+('6t%)[\@Q@q&_s(?@1@\8@t[hOJmQi/-A\2$[->p^=es1C+bj_n6"nFCNMnY6T1V<H6jB#&i50:tMDJ,J^(j5\IH%I9GT3O//Sn4"2grGsrmFjKPK*%np]\\<R-'P-SQ"(9-qUTnJ&42VG`Fr:t+L5R+Mu'g_b_C"$0fa)Pqp=>65th!$\oJ],h2jUW%)%BMRR`$XWk_pN^^fl0DCQJ,'6<m<,u`)a%79Ekuk8AeL5mJ05e:G)6JFj#&)D>m,IGlY\<tn07C'LuX0-QuO2+jZ@/NY9&NqDU?ac%a/1on9[cZb3:ghM3O0QtYpdIDk'ZaK>?tC!s'aC%75^O#1hr#KcVed9)VJESK)EL.^=uSh"<8%;+t-UV#Hk0"Kc)6JCapG\^2]ZM%"Xj9c5i)n]*5WBHc2E!]^mK`mrs#ZWn6:5LHjVYM?6e>kb3d/8jt/N`.Q\3u3sXgtfm-d8'#Qd02c'<8reQl?(Z:"D2uu8Y1C2`"%<rIFO&h:iO!bRhD\ojZbTjWOLq<'ej\+#Ek4B-YtHuL]b%l\>s=&*(."5c<Aq"_KaqMQH1i>p7:IJ.pWk"kH[HiKFnn,E.Rro<%N%TAKP;ror7"5CWD'h9YQi-3*T/h8f7SrVYX7qkp(#s6sqLngjG/Rl=]%p#Y5K4$adB~>%AI9_PrivateDataEnd